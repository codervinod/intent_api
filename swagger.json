{
    "info": {
        "version": "3.0.0", 
        "description": "Move programming from the user to the machine.", 
        "title": "Nutanix Intentful API"
    }, 
    "paths": {
        "/availability_zones": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/availability_zone_status"
                        }
                    }, 
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/availability_zone"
                        }
                    }
                }, 
                "x-ntnx-permissions": [
                    "availability_zone.create"
                ], 
                "description": "Create an availability zones", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "request", 
                        "schema": {
                            "$ref": "#/definitions/availability_zone"
                        }
                    }
                ], 
                "tags": [
                    "availability_zone"
                ], 
                "x-ntnx-kind": "availability_zone", 
                "summary": "Create an availability zones"
            }
        }, 
        "/availability_zones/list": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/availability_zone_status"
                        }
                    }, 
                    "200": {
                        "description": "Successful operation", 
                        "schema": {
                            "$ref": "#/definitions/availability_zone_list"
                        }
                    }
                }, 
                "x-ntnx-permissions": [
                    "availability_zone.view"
                ], 
                "description": "Get availability zones", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/availability_zone_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "availability_zone"
                ], 
                "x-ntnx-kind": "availability_zone", 
                "summary": "Get availability zones"
            }
        }, 
        "/availability_zones/{uuid}": {
            "put": {
                "responses": {
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/availability_zone_status"
                        }
                    }, 
                    "200": {
                        "description": "Success"
                    }
                }, 
                "x-ntnx-permissions": [
                    "availability_zone.update"
                ], 
                "description": "Modify availability zone", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "request", 
                        "schema": {
                            "$ref": "#/definitions/availability_zone"
                        }
                    }
                ], 
                "tags": [
                    "availability_zone"
                ], 
                "x-ntnx-kind": "availability_zone", 
                "summary": "Modify availability zone"
            }, 
            "get": {
                "responses": {
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/availability_zone_status"
                        }
                    }, 
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/availability_zone"
                        }
                    }
                }, 
                "x-ntnx-permissions": [
                    "availability_zone.view"
                ], 
                "description": "Get details for an availability zones", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "availability_zone"
                ], 
                "x-ntnx-kind": "availability_zone", 
                "summary": "Get details for an availability zones"
            }, 
            "delete": {
                "responses": {
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/availability_zone_status"
                        }
                    }, 
                    "200": {
                        "description": "Success"
                    }
                }, 
                "x-ntnx-permissions": [
                    "availability_zone.delete"
                ], 
                "description": "Delete an availability zone", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "availability_zone"
                ], 
                "x-ntnx-kind": "availability_zone", 
                "summary": "Delete an availability zone"
            }
        }, 
        "/available_extensions/images/{uuid}": {
            "get": {
                "x-ntnx-permissions": [
                    "extension_store.view"
                ], 
                "description": "Get available extension image from uuid", 
                "parameters": [
                    {
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "name": "uuid", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "extension"
                ], 
                "produces": [
                    "image/jpeg", 
                    "image/gif", 
                    "image/png", 
                    "image/bmp"
                ], 
                "summary": "Used to fetch available extension image from uuid", 
                "x-ntnx-kind": "available_extension_images", 
                "responses": {
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/available_extension_status"
                        }
                    }, 
                    "404": {
                        "description": "Extension does not exists", 
                        "schema": {
                            "$ref": "#/definitions/available_extension_status"
                        }
                    }
                }
            }
        }, 
        "/available_extensions/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Retrieved all installed extensions", 
                        "schema": {
                            "$ref": "#/definitions/available_extension_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Failed to retrieve all extensions", 
                        "schema": {
                            "$ref": "#/definitions/available_extension_status"
                        }
                    }
                }, 
                "x-ntnx-permissions": [
                    "extension_store.view"
                ], 
                "description": "Retrieve list of available extensions", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/available_extension_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "extension"
                ], 
                "x-ntnx-kind": "available_extension", 
                "summary": "Get list of available extensions"
            }
        }, 
        "/available_extensions/{uuid}": {
            "get": {
                "responses": {
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/available_extension_status"
                        }
                    }, 
                    "200": {
                        "description": "Successful operation", 
                        "schema": {
                            "$ref": "#/definitions/available_extension_intent_response"
                        }
                    }, 
                    "404": {
                        "description": "Extension does not exists", 
                        "schema": {
                            "$ref": "#/definitions/available_extension_status"
                        }
                    }
                }, 
                "x-ntnx-permissions": [
                    "extension_store.view"
                ], 
                "description": "Get available extension information from extension store", 
                "parameters": [
                    {
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "name": "uuid", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "extension"
                ], 
                "x-ntnx-kind": "available_extension", 
                "summary": "Used to fetch available extension details from extension store"
            }
        }, 
        "/batch": {
            "post": {
                "description": "Posts a list of one or more intentful APIs to be processed", 
                "tags": [
                    "batch"
                ], 
                "responses": {
                    "default": {
                        "description": "Failed to process requests", 
                        "schema": {
                            "$ref": "#/definitions/status"
                        }
                    }, 
                    "200": {
                        "description": "Requests processed successfully.", 
                        "schema": {
                            "$ref": "#/definitions/batch_response"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "description": "List of intent APIs", 
                        "name": "intent_list", 
                        "schema": {
                            "$ref": "#/definitions/batch_request"
                        }
                    }
                ], 
                "summary": "Posts a list of one or more intentful REST APIs to be processed"
            }
        }, 
        "/catalog_items": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/catalog_status"
                        }
                    }, 
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/catalog"
                        }
                    }
                }, 
                "x-ntnx-permissions": [
                    "catalog.create"
                ], 
                "description": "Create a catalog item", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "request", 
                        "schema": {
                            "$ref": "#/definitions/catalog"
                        }
                    }
                ], 
                "tags": [
                    "catalogs"
                ], 
                "x-ntnx-kind": "catalog", 
                "summary": "Create Catalog Item"
            }
        }, 
        "/catalog_items/list": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/catalog_status"
                        }
                    }, 
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/catalog_list"
                        }
                    }
                }, 
                "x-ntnx-permissions": [
                    "catalog.view"
                ], 
                "description": "Get all items in catalog", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/catalog_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "catalogs"
                ], 
                "x-ntnx-kind": "catalog", 
                "summary": "Get catalog items"
            }
        }, 
        "/catalog_items/{uuid}": {
            "put": {
                "responses": {
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/catalog_status"
                        }
                    }, 
                    "200": {
                        "description": "Success"
                    }
                }, 
                "x-ntnx-permissions": [
                    "catalog.update"
                ], 
                "description": "Modify catalog item", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "request", 
                        "schema": {
                            "$ref": "#/definitions/catalog"
                        }
                    }
                ], 
                "tags": [
                    "catalogs"
                ], 
                "x-ntnx-kind": "catalog", 
                "summary": "Update Catalog Item"
            }, 
            "get": {
                "responses": {
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/catalog_status"
                        }
                    }, 
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/catalog"
                        }
                    }
                }, 
                "x-ntnx-permissions": [
                    "catalog.view"
                ], 
                "description": "Get details for a catalog item", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "catalogs"
                ], 
                "x-ntnx-kind": "catalog", 
                "summary": "Get Catalog Item"
            }, 
            "delete": {
                "responses": {
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/catalog_status"
                        }
                    }, 
                    "200": {
                        "description": "Success"
                    }
                }, 
                "x-ntnx-permissions": [
                    "catalog.delete"
                ], 
                "description": "Delete a catalog item", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "catalogs"
                ], 
                "x-ntnx-kind": "catalog", 
                "summary": "Delete Catalog Item"
            }
        }, 
        "/categories": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/category_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/category_status"
                        }
                    }
                }, 
                "x-ntnx-permissions": [
                    "category.create"
                ], 
                "description": "Create a category", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "request", 
                        "schema": {
                            "$ref": "#/definitions/category_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "category"
                ], 
                "x-ntnx-kind": "category", 
                "summary": "Create a category"
            }
        }, 
        "/categories/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/category_list_response"
                        }
                    }, 
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/category_status"
                        }
                    }
                }, 
                "x-ntnx-permissions": [
                    "category.read"
                ], 
                "description": "Get the list of categories", 
                "parameters": [
                    {
                        "required": false, 
                        "in": "body", 
                        "name": "list_request", 
                        "schema": {
                            "$ref": "#/definitions/category_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "category"
                ], 
                "x-ntnx-kind": "category", 
                "summary": "Get categories"
            }
        }, 
        "/categories/{name}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/category_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/category_status"
                        }
                    }
                }, 
                "x-ntnx-permissions": [
                    "category.update"
                ], 
                "description": "Update a category", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "name", 
                        "in": "path", 
                        "maxLength": 140
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "request", 
                        "schema": {
                            "$ref": "#/definitions/category_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "category"
                ], 
                "x-ntnx-kind": "category", 
                "summary": "Update a category"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Successful", 
                        "schema": {
                            "$ref": "#/definitions/category_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/category_status"
                        }
                    }
                }, 
                "x-ntnx-permissions": [
                    "category.read"
                ], 
                "description": "Get a category", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "name", 
                        "in": "path", 
                        "maxLength": 140
                    }
                ], 
                "tags": [
                    "category"
                ], 
                "x-ntnx-kind": "category", 
                "summary": "Get a category"
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/category_status"
                        }
                    }
                }, 
                "x-ntnx-permissions": [
                    "category.delete"
                ], 
                "description": "Delete a category", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "name", 
                        "in": "path", 
                        "maxLength": 140
                    }
                ], 
                "tags": [
                    "category"
                ], 
                "x-ntnx-kind": "category", 
                "summary": "Delete a category"
            }
        }, 
        "/categories/{name}/{value}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/category_value_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/category_status"
                        }
                    }
                }, 
                "x-ntnx-permissions": [
                    "category.update"
                ], 
                "description": "Update an existing category", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "name", 
                        "in": "path", 
                        "maxLength": 140
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "value", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "request", 
                        "schema": {
                            "$ref": "#/definitions/category_value_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "category"
                ], 
                "x-ntnx-kind": "category", 
                "summary": "Update an existing category"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Successful", 
                        "schema": {
                            "$ref": "#/definitions/category_value_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/category_status"
                        }
                    }
                }, 
                "x-ntnx-permissions": [
                    "category.read"
                ], 
                "description": "Get a category value", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "name", 
                        "in": "path", 
                        "maxLength": 140
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "value", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "category"
                ], 
                "x-ntnx-kind": "category", 
                "summary": "Get a category value"
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/category_status"
                        }
                    }
                }, 
                "x-ntnx-permissions": [
                    "category.delete"
                ], 
                "description": "Delete a category value", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "name", 
                        "in": "path", 
                        "maxLength": 140
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "value", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "category"
                ], 
                "x-ntnx-kind": "category", 
                "summary": "Delete a category value"
            }
        }, 
        "/clusters/list": {
            "post": {
                "x-ntnx-permissions": [
                    "cluster.view"
                ], 
                "responses": {
                    "200": {
                        "description": "Request Succeeded", 
                        "schema": {
                            "$ref": "#/definitions/cluster_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/cluster_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/cluster_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "clusters"
                ], 
                "summary": "Get clusters", 
                "x-ntnx-ref-keys": [
                    "cluster_reference"
                ], 
                "x-ntnx-kind": "cluster", 
                "description": "Get clusters by the provided filters"
            }
        }, 
        "/clusters/multicluster_config": {
            "post": {
                "x-ntnx-permissions": [
                    "cluster.update"
                ], 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "type": "string", 
                            "description": "Multicluster configuration request task UUID"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error"
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "spec", 
                        "schema": {
                            "$ref": "#/definitions/multicluster_config_spec"
                        }
                    }
                ], 
                "tags": [
                    "clusters"
                ], 
                "description": "Apply multicluster configuration from Prism Central", 
                "x-ntnx-kind": "cluster", 
                "summary": "Apply multicluster configuration from Prism Central"
            }
        }, 
        "/clusters/multicluster_config/{uuid}": {
            "get": {
                "x-ntnx-permissions": [
                    "cluster.view"
                ], 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/multicluster_config_status"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error"
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "clusters"
                ], 
                "description": "Get multicluster configuration task status", 
                "x-ntnx-kind": "cluster", 
                "summary": "Get multicluster configuration task status"
            }
        }, 
        "/clusters/{uuid}": {
            "put": {
                "x-ntnx-permissions": [
                    "cluster.update"
                ], 
                "responses": {
                    "200": {
                        "description": "Request Succeeded", 
                        "schema": {
                            "$ref": "#/definitions/cluster_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/cluster_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "name": "uuid", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "spec", 
                        "schema": {
                            "$ref": "#/definitions/cluster_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "clusters"
                ], 
                "description": "Given an intenful spec and cluster uuid, update the cluster", 
                "x-ntnx-kind": "cluster", 
                "summary": "Update Cluster"
            }, 
            "get": {
                "x-ntnx-permissions": [
                    "cluster.view"
                ], 
                "responses": {
                    "200": {
                        "description": "Request succeeded", 
                        "schema": {
                            "$ref": "#/definitions/cluster_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/cluster_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "name": "uuid", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "clusters"
                ], 
                "description": "Return the cluster definition by the given uuid", 
                "x-ntnx-kind": "\u2018cluster'", 
                "summary": "Get Cluster"
            }
        }, 
        "/clusters/{uuid}/certificates/ca_certs": {
            "post": {
                "x-ntnx-permissions": [
                    "certificate.create"
                ], 
                "responses": {
                    "200": {
                        "description": "Request Succeeded"
                    }, 
                    "default": {
                        "description": "Internal Error"
                    }
                }, 
                "parameters": [
                    {
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "name": "uuid", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "spec", 
                        "schema": {
                            "$ref": "#/definitions/ca_cert"
                        }
                    }
                ], 
                "tags": [
                    "clusters"
                ], 
                "summary": "Add a new CA certificate", 
                "x-ntnx-ref-keys": [
                    "certificate_reference"
                ], 
                "x-ntnx-kind": "certificate", 
                "description": "Add a new CA certificate"
            }
        }, 
        "/clusters/{uuid}/certificates/ca_certs/{ca_name}": {
            "delete": {
                "x-ntnx-permissions": [
                    "certificate.delete"
                ], 
                "responses": {
                    "200": {
                        "description": "Request Succeeded"
                    }, 
                    "default": {
                        "description": "Internal Error"
                    }
                }, 
                "parameters": [
                    {
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "name": "uuid", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "ca_name", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "clusters"
                ], 
                "summary": "Delete the CA certificate", 
                "x-ntnx-ref-keys": [
                    "certificate_reference"
                ], 
                "x-ntnx-kind": "certificate", 
                "description": "Delete the CA certificate specified by certificate authority name\n"
            }
        }, 
        "/clusters/{uuid}/certificates/client_auth": {
            "put": {
                "x-ntnx-permissions": [
                    "client_auth.update"
                ], 
                "responses": {
                    "200": {
                        "description": "Request Succeeded"
                    }, 
                    "default": {
                        "description": "Internal Error"
                    }
                }, 
                "parameters": [
                    {
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "name": "uuid", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "spec", 
                        "schema": {
                            "$ref": "#/definitions/ca_chain_spec"
                        }
                    }
                ], 
                "tags": [
                    "clusters"
                ], 
                "summary": "Replace the CA chain for client authentication", 
                "x-ntnx-ref-keys": [
                    "client_auth_reference"
                ], 
                "x-ntnx-kind": "client_auth", 
                "description": "Replace the CA chain for client authentication"
            }, 
            "post": {
                "x-ntnx-permissions": [
                    "client_auth.create"
                ], 
                "responses": {
                    "200": {
                        "description": "Request Succeeded"
                    }, 
                    "default": {
                        "description": "Internal Error"
                    }
                }, 
                "parameters": [
                    {
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "name": "uuid", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "spec", 
                        "schema": {
                            "$ref": "#/definitions/ca_chain_spec"
                        }
                    }
                ], 
                "tags": [
                    "clusters"
                ], 
                "summary": "Import CA chain for client authentication", 
                "x-ntnx-ref-keys": [
                    "client_auth_reference"
                ], 
                "x-ntnx-kind": "client_auth", 
                "description": "Import CA chain for client authentication"
            }, 
            "delete": {
                "x-ntnx-permissions": [
                    "client_auth.delete"
                ], 
                "responses": {
                    "200": {
                        "description": "Request Succeeded"
                    }, 
                    "default": {
                        "description": "Internal Error"
                    }
                }, 
                "parameters": [
                    {
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "name": "uuid", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "clusters"
                ], 
                "summary": "Remove the CA chain for client authentication", 
                "x-ntnx-ref-keys": [
                    "client_auth_reference"
                ], 
                "x-ntnx-kind": "client_auth", 
                "description": "Remove the CA chain for client authentication"
            }
        }, 
        "/clusters/{uuid}/certificates/csrs": {
            "get": {
                "x-ntnx-permissions": [
                    "certificate.view"
                ], 
                "responses": {
                    "200": {
                        "description": "Request Succeeded"
                    }, 
                    "default": {
                        "description": "Internal Error"
                    }
                }, 
                "parameters": [
                    {
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "name": "uuid", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "spec", 
                        "schema": {
                            "$ref": "#/definitions/node_uuid_list"
                        }
                    }
                ], 
                "tags": [
                    "clusters"
                ], 
                "summary": "Download CSRs from cluster", 
                "x-ntnx-ref-keys": [
                    "certificate_reference"
                ], 
                "x-ntnx-kind": "certificate", 
                "description": "Download Certificate Signing Requests from cluster"
            }
        }, 
        "/clusters/{uuid}/certificates/csrs/{node_ip}": {
            "get": {
                "x-ntnx-permissions": [
                    "certificate.view"
                ], 
                "responses": {
                    "200": {
                        "description": "Request Succeeded"
                    }, 
                    "default": {
                        "description": "Internal Error"
                    }
                }, 
                "parameters": [
                    {
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "name": "uuid", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "node_ip", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "clusters"
                ], 
                "summary": "Download CSR from a discovered node", 
                "x-ntnx-ref-keys": [
                    "certificate_reference"
                ], 
                "x-ntnx-kind": "certificate", 
                "description": "Download Certificate Signing Request from a discovered node"
            }
        }, 
        "/clusters/{uuid}/certificates/pemkey": {
            "post": {
                "x-ntnx-permissions": [
                    "certificate.create"
                ], 
                "responses": {
                    "200": {
                        "description": "Request Succeeded"
                    }, 
                    "default": {
                        "description": "Internal Error"
                    }
                }, 
                "parameters": [
                    {
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "name": "uuid", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "clusters"
                ], 
                "summary": "Generate a 2048 bits cipher length RSA key", 
                "x-ntnx-ref-keys": [
                    "certificate_reference"
                ], 
                "x-ntnx-kind": "certificate", 
                "description": "Generate a 2048 bits cipher length RSA key"
            }
        }, 
        "/clusters/{uuid}/certificates/pemkey/import": {
            "post": {
                "x-ntnx-permissions": [
                    "certificate.create"
                ], 
                "responses": {
                    "200": {
                        "description": "Request Succeeded"
                    }, 
                    "default": {
                        "description": "Internal Error"
                    }
                }, 
                "parameters": [
                    {
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "name": "uuid", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "spec", 
                        "schema": {
                            "$ref": "#/definitions/pemkey_spec"
                        }
                    }
                ], 
                "tags": [
                    "clusters"
                ], 
                "summary": "Import a new key", 
                "x-ntnx-ref-keys": [
                    "certificate_reference"
                ], 
                "x-ntnx-kind": "certificate", 
                "description": "Import a new key"
            }
        }, 
        "/clusters/{uuid}/certificates/svm_certs/{kms_uuid}": {
            "post": {
                "x-ntnx-permissions": [
                    "certificate.create"
                ], 
                "responses": {
                    "200": {
                        "description": "Request Succeeded"
                    }, 
                    "default": {
                        "description": "Internal Error"
                    }
                }, 
                "parameters": [
                    {
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "name": "uuid", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "kms_uuid", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "spec", 
                        "schema": {
                            "$ref": "#/definitions/certificate_spec_list"
                        }
                    }
                ], 
                "tags": [
                    "clusters"
                ], 
                "summary": "Add one or more certificates to a service VM", 
                "x-ntnx-ref-keys": [
                    "certificate_reference"
                ], 
                "x-ntnx-kind": "certificate", 
                "description": "Add one or more certificates to a service VM"
            }
        }, 
        "/clusters/{uuid}/certificates/svm_certs/{node_uuid}/{kms_uuid}": {
            "put": {
                "x-ntnx-permissions": [
                    "certificate.update"
                ], 
                "responses": {
                    "200": {
                        "description": "Request Succeeded"
                    }, 
                    "default": {
                        "description": "Internal Error"
                    }
                }, 
                "parameters": [
                    {
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "name": "uuid", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "node_uuid", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "kms_uuid", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "cert", 
                        "schema": {
                            "$ref": "#/definitions/certificate"
                        }
                    }
                ], 
                "tags": [
                    "clusters"
                ], 
                "summary": "Replace the certificate on a service VM", 
                "x-ntnx-ref-keys": [
                    "certificate_reference"
                ], 
                "x-ntnx-kind": "certificate", 
                "description": "Replace the certificate on a service VM"
            }, 
            "delete": {
                "x-ntnx-permissions": [
                    "certificate.delete"
                ], 
                "responses": {
                    "200": {
                        "description": "Request Succeeded"
                    }, 
                    "default": {
                        "description": "Internal Error"
                    }
                }, 
                "parameters": [
                    {
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "name": "uuid", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "node_uuid", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "kms_uuid", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "clusters"
                ], 
                "summary": "Delete the certificate on a service VM", 
                "x-ntnx-ref-keys": [
                    "certificate_reference"
                ], 
                "x-ntnx-kind": "certificate", 
                "description": "Delete the certificate on a service VM"
            }
        }, 
        "/clusters/{uuid}/cloud_credentials/{cloud_type}": {
            "post": {
                "x-ntnx-permissions": [
                    "cloud_credentials.create"
                ], 
                "responses": {
                    "200": {
                        "description": "Request succeeded", 
                        "schema": {
                            "$ref": "#/definitions/cloud_credentials_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/cloud_credentials_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "name": "uuid", 
                        "in": "path"
                    }, 
                    {
                        "pattern": "(\\bAWS\\b|\\bAZURE\\b)", 
                        "required": true, 
                        "type": "string", 
                        "name": "cloud_type", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "spec", 
                        "schema": {
                            "$ref": "#/definitions/cloud_credentials_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "clusters"
                ], 
                "summary": "Add a cloud credential for accessing cloud sites", 
                "x-ntnx-ref-keys": [
                    "cloud_credentials_reference"
                ], 
                "x-ntnx-kind": "cloud_credentials", 
                "description": "Add a cloud credential for accessing cloud sites"
            }, 
            "delete": {
                "x-ntnx-permissions": [
                    "cloud_credentials.delete"
                ], 
                "responses": {
                    "200": {
                        "description": "Request succeeded"
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/cloud_credentials_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "name": "uuid", 
                        "in": "path"
                    }, 
                    {
                        "pattern": "(\\bAWS\\b|\\bAZURE\\b)", 
                        "required": true, 
                        "type": "string", 
                        "name": "cloud_type", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "clusters"
                ], 
                "summary": "Delete all cloud credentials", 
                "x-ntnx-ref-keys": [
                    "cloud_credentials_reference"
                ], 
                "x-ntnx-kind": "cloud_credentials", 
                "description": "Delete all cloud credentials"
            }
        }, 
        "/clusters/{uuid}/cloud_credentials/{cloud_type}/list": {
            "post": {
                "x-ntnx-permissions": [
                    "cloud_credentials.view"
                ], 
                "responses": {
                    "200": {
                        "description": "Request Succeeded", 
                        "schema": {
                            "$ref": "#/definitions/cloud_credentials_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/cloud_credentials_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "name": "uuid", 
                        "in": "path"
                    }, 
                    {
                        "pattern": "(\\bAWS\\b|\\bAZURE\\b)", 
                        "required": true, 
                        "type": "string", 
                        "name": "cloud_type", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/cloud_credentials_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "clusters"
                ], 
                "summary": "Get cluster cloud credentials", 
                "x-ntnx-ref-keys": [
                    "cloud_credentials_reference"
                ], 
                "x-ntnx-kind": "cloud_credentials", 
                "description": "Get cluster cloud credentials by the provided filters"
            }
        }, 
        "/clusters/{uuid}/cloud_credentials/{cloud_type}/{cloud_credentials_uuid}": {
            "put": {
                "x-ntnx-permissions": [
                    "cloud_credentials.update"
                ], 
                "responses": {
                    "200": {
                        "description": "Request Succeeded", 
                        "schema": {
                            "$ref": "#/definitions/cloud_credentials_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/cloud_credentials_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "name": "uuid", 
                        "in": "path"
                    }, 
                    {
                        "pattern": "(\\bAWS\\b|\\bAZURE\\b)", 
                        "required": true, 
                        "type": "string", 
                        "name": "cloud_type", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "integer", 
                        "name": "cloud_credentials_uuid", 
                        "in": "path", 
                        "format": "int64"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "spec", 
                        "schema": {
                            "$ref": "#/definitions/cloud_credentials_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "clusters"
                ], 
                "summary": "Modify the specified cluster cloud credentials", 
                "x-ntnx-ref-keys": [
                    "cloud_credentials_reference"
                ], 
                "x-ntnx-kind": "cloud_credentials", 
                "description": "Modify the specified cluster cloud credentials on name or the default\ncredentials flag.\n"
            }, 
            "get": {
                "x-ntnx-permissions": [
                    "cloud_credentials.view"
                ], 
                "responses": {
                    "200": {
                        "description": "Request Succeeded", 
                        "schema": {
                            "$ref": "#/definitions/cloud_credentials_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/cloud_credentials_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "name": "uuid", 
                        "in": "path"
                    }, 
                    {
                        "pattern": "(\\bAWS\\b|\\bAZURE\\b)", 
                        "required": true, 
                        "type": "string", 
                        "name": "cloud_type", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "integer", 
                        "name": "cloud_credentials_uuid", 
                        "in": "path", 
                        "format": "int64"
                    }
                ], 
                "tags": [
                    "clusters"
                ], 
                "summary": "Get cluster cloud credentials with the provided name", 
                "x-ntnx-ref-keys": [
                    "cloud_credentials_reference"
                ], 
                "x-ntnx-kind": "cloud_credentials", 
                "description": "Get cluster cloud credentials with the provided name"
            }, 
            "delete": {
                "x-ntnx-permissions": [
                    "cloud_credentials.delete"
                ], 
                "responses": {
                    "200": {
                        "description": "Request Succeeded"
                    }, 
                    "default": {
                        "description": "Internal Error"
                    }
                }, 
                "parameters": [
                    {
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "name": "uuid", 
                        "in": "path"
                    }, 
                    {
                        "pattern": "(\\bAWS\\b|\\bAZURE\\b)", 
                        "required": true, 
                        "type": "string", 
                        "name": "cloud_type", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "type": "integer", 
                        "name": "cloud_credentials_uuid", 
                        "in": "path", 
                        "format": "int64"
                    }
                ], 
                "tags": [
                    "clusters"
                ], 
                "summary": "Delete the specified cluster cloud credentials", 
                "x-ntnx-ref-keys": [
                    "cloud_credentials_reference"
                ], 
                "x-ntnx-kind": "cloud_credentials", 
                "description": "Delete the specified cluster cloud credentials"
            }
        }, 
        "/clusters/{uuid}/directory_services": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/directory_service_status"
                        }
                    }, 
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/directory_service_intent_response"
                        }
                    }
                }, 
                "x-ntnx-permissions": [
                    "directory_service.add"
                ], 
                "description": "Adds the directory service configuration", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "description": "Directory Service object", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/directory_service_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "clusters"
                ], 
                "x-ntnx-kind": "directory_service", 
                "summary": "Adds the directory service configuration"
            }
        }, 
        "/clusters/{uuid}/directory_services/list": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Failed to retrieve all directories", 
                        "schema": {
                            "$ref": "#/definitions/directory_service_status"
                        }
                    }, 
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/directory_service_list_intent_response"
                        }
                    }
                }, 
                "x-ntnx-permissions": [
                    "directory_service.view"
                ], 
                "description": "Lists the directory service configuration defined in the cluster", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/directory_service_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "clusters"
                ], 
                "x-ntnx-kind": "directory_service", 
                "summary": "Lists the directory service configuration defined in the cluster"
            }
        }, 
        "/clusters/{uuid}/directory_services/search": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/directory_service_status"
                        }
                    }, 
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/directory_service_search_response"
                        }
                    }, 
                    "404": {
                        "description": "Invalid Directory Name Provided", 
                        "schema": {
                            "$ref": "#/definitions/directory_service_status"
                        }
                    }
                }, 
                "x-ntnx-permissions": [
                    "directory_service.search"
                ], 
                "description": "search user or group in the directory service", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "description": "Directory Service search object", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/directory_service_search_input"
                        }
                    }
                ], 
                "tags": [
                    "clusters"
                ], 
                "x-ntnx-kind": "directory_service", 
                "summary": "search user or group in the directory service"
            }
        }, 
        "/clusters/{uuid}/directory_services/{directory_service_uuid}": {
            "put": {
                "responses": {
                    "default": {
                        "description": "Failed to update the directory", 
                        "schema": {
                            "$ref": "#/definitions/directory_service_status"
                        }
                    }, 
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/directory_service_intent_response"
                        }
                    }, 
                    "404": {
                        "description": "Invalid Directory Name Provided", 
                        "schema": {
                            "$ref": "#/definitions/directory_service_status"
                        }
                    }
                }, 
                "x-ntnx-permissions": [
                    "directory_service.update"
                ], 
                "description": "update the directory service configuration", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "name": "directory_service_uuid", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "description": "Directory Service object", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/directory_service_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "clusters"
                ], 
                "x-ntnx-kind": "directory_service", 
                "summary": "update the directory service configuration"
            }, 
            "get": {
                "responses": {
                    "default": {
                        "description": "Failed to retrieve the directory", 
                        "schema": {
                            "$ref": "#/definitions/directory_service_status"
                        }
                    }, 
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/directory_service_intent_response"
                        }
                    }, 
                    "404": {
                        "description": "Invalid Directory Name Provided", 
                        "schema": {
                            "$ref": "#/definitions/directory_service_status"
                        }
                    }
                }, 
                "x-ntnx-permissions": [
                    "directory_service.view"
                ], 
                "description": "Gets the directory service configuration", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "name": "directory_service_uuid", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "clusters"
                ], 
                "x-ntnx-kind": "directory_service", 
                "summary": "Gets the directory service configuration"
            }, 
            "delete": {
                "responses": {
                    "default": {
                        "description": "Failed to Delete the directory", 
                        "schema": {
                            "$ref": "#/definitions/directory_service_status"
                        }
                    }, 
                    "200": {
                        "description": "Success"
                    }, 
                    "404": {
                        "description": "Invalid Directory Uuid Provided", 
                        "schema": {
                            "$ref": "#/definitions/directory_service_status"
                        }
                    }
                }, 
                "x-ntnx-permissions": [
                    "directory_service.delete"
                ], 
                "description": "Deletes the directory service configuration", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "name": "directory_service_uuid", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "clusters"
                ], 
                "x-ntnx-kind": "directory_service", 
                "summary": "Deletes the directory service configuration"
            }
        }, 
        "/clusters/{uuid}/directory_services/{directory_service_uuid}/connect": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Failed to connect to directory service", 
                        "schema": {
                            "$ref": "#/definitions/directory_service_status"
                        }
                    }, 
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/connection_result"
                        }
                    }, 
                    "404": {
                        "description": "Invalid Directory Name Provided", 
                        "schema": {
                            "$ref": "#/definitions/directory_service_status"
                        }
                    }
                }, 
                "x-ntnx-permissions": [
                    "directory_service.connect"
                ], 
                "description": "Connects to a directory service", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "name": "directory_service_uuid", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "description": "Credentials to connect the directory service", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/connection_input"
                        }
                    }
                ], 
                "tags": [
                    "clusters"
                ], 
                "x-ntnx-kind": "directory_service", 
                "summary": "Connects to a directory service"
            }
        }, 
        "/clusters/{uuid}/remote_connections/connect": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Error"
                    }, 
                    "200": {
                        "description": "Request Success"
                    }
                }, 
                "x-ntnx-permissions": [
                    "remote_connection.create"
                ], 
                "description": "Connect to a remote cluster", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "description": "Remote connection spec", 
                        "name": "spec", 
                        "schema": {
                            "$ref": "#/definitions/remote_connection_spec"
                        }
                    }
                ], 
                "tags": [
                    "clusters"
                ], 
                "x-ntnx-kind": "\u2018remote_connection'", 
                "summary": "Connect to a remote cluster"
            }
        }, 
        "/clusters/{uuid}/remote_connections/disconnect/{cluster_uuid}": {
            "delete": {
                "responses": {
                    "default": {
                        "description": "Internal Error"
                    }, 
                    "200": {
                        "description": "Request Success"
                    }
                }, 
                "x-ntnx-permissions": [
                    "remote_connection.delete"
                ], 
                "description": "Disconnect from the specified remote cluster", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "in": "path", 
                        "description": "The UUID of the cluster to disconnect", 
                        "format": "UUID", 
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "name": "cluster_uuid"
                    }
                ], 
                "tags": [
                    "clusters"
                ], 
                "x-ntnx-kind": "\u2018remote_connection'", 
                "summary": "Disconnect from the specified remote cluster"
            }
        }, 
        "/containers": {
            "post": {
                "x-ntnx-permissions": [
                    "container.create"
                ], 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/container_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Server Error", 
                        "schema": {
                            "$ref": "#/definitions/container_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "description": "Intent Spec of Container", 
                        "name": "container_intent", 
                        "schema": {
                            "$ref": "#/definitions/container_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "containers"
                ], 
                "description": "Create a container", 
                "x-ntnx-kind": "container", 
                "summary": "Create a container"
            }
        }, 
        "/containers/list": {
            "post": {
                "x-ntnx-permissions": [
                    "container.view"
                ], 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/container_list_intent_response"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "default": {
                        "description": "Server Error", 
                        "schema": {
                            "$ref": "#/definitions/container_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/container_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "containers"
                ], 
                "description": "Get the list of containers", 
                "x-ntnx-kind": "container", 
                "summary": "List containers for cluster"
            }
        }, 
        "/containers/volumes/list": {
            "post": {
                "x-ntnx-permissions": [
                    "container.view"
                ], 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/container_volume_list_intent_response"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "default": {
                        "description": "Server Error", 
                        "schema": {
                            "$ref": "#/definitions/container_volume_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/container_volume_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "containers"
                ], 
                "description": "Get the list of volumes for containers", 
                "x-ntnx-kind": "container_volume", 
                "summary": "List volumes used for containers in cluster"
            }
        }, 
        "/containers/{uuid}": {
            "put": {
                "x-ntnx-permissions": [
                    "container.update"
                ], 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/container_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Server Error", 
                        "schema": {
                            "$ref": "#/definitions/container_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "uuid of the container that needs to be updated", 
                        "in": "path", 
                        "name": "uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "description": "Intent Spec for Container", 
                        "name": "container_intent", 
                        "schema": {
                            "$ref": "#/definitions/container_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "containers"
                ], 
                "description": "Update container details e.g. state", 
                "x-ntnx-kind": "container", 
                "summary": "Update container details"
            }, 
            "get": {
                "x-ntnx-permissions": [
                    "container.view"
                ], 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/container_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Server Error", 
                        "schema": {
                            "$ref": "#/definitions/container_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Uuid of the container", 
                        "in": "path", 
                        "name": "uuid"
                    }
                ], 
                "tags": [
                    "containers"
                ], 
                "description": "Get container details", 
                "x-ntnx-kind": "container", 
                "summary": "Get container details"
            }, 
            "delete": {
                "x-ntnx-permissions": [
                    "container.delete"
                ], 
                "responses": {
                    "200": {
                        "description": "OK", 
                        "schema": {
                            "$ref": "#/definitions/container_status"
                        }
                    }, 
                    "default": {
                        "description": "Server Error", 
                        "schema": {
                            "$ref": "#/definitions/container_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "uuid", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "containers"
                ], 
                "description": "Delete specific container", 
                "x-ntnx-kind": "container", 
                "summary": "Delete a container"
            }
        }, 
        "/containers/{uuid}/volumes/{volume_uuid}": {
            "get": {
                "x-ntnx-permissions": [
                    "container.view"
                ], 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/container_volume_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Server Error", 
                        "schema": {
                            "$ref": "#/definitions/container_volume_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Uuid of the container", 
                        "in": "path", 
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "name": "uuid"
                    }, 
                    {
                        "description": "Uuid of a volume", 
                        "in": "path", 
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "name": "volume_uuid"
                    }
                ], 
                "tags": [
                    "containers"
                ], 
                "description": "Get container volume details", 
                "x-ntnx-kind": "container_volume", 
                "summary": "Get container volume details"
            }
        }, 
        "/data/changed_regions": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal server error", 
                        "schema": {
                            "$ref": "#/definitions/changed_regions_status"
                        }
                    }, 
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/changed_regions"
                        }
                    }, 
                    "404": {
                        "description": "Not Found. Returned when the file(s) specified by the snapshot_file_path and/or the reference_snapshot_file_path does not exist.\n", 
                        "schema": {
                            "$ref": "#/definitions/changed_regions_status"
                        }
                    }, 
                    "503": {
                        "description": "Service Unavailable. Returned when the system cannot currently handle the request possibly due to overloading.\n", 
                        "schema": {
                            "$ref": "#/definitions/changed_regions_status"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request. Returned due to validation errors.", 
                        "schema": {
                            "$ref": "#/definitions/changed_regions_status"
                        }
                    }
                }, 
                "x-ntnx-permissions": [
                    "data.view"
                ], 
                "description": "Returns information about the regions that have changed between any two snapshots of a file.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/changed_regions_query"
                        }
                    }
                ], 
                "tags": [
                    "data"
                ], 
                "x-ntnx-kind": "changed_regions", 
                "summary": "Query changed regions"
            }
        }, 
        "/docker_registries": {
            "post": {
                "x-ntnx-permissions": [
                    "docker_registry.create"
                ], 
                "responses": {
                    "default": {
                        "description": "Failed to create docker registry", 
                        "schema": {
                            "$ref": "#/definitions/docker_registry_status"
                        }
                    }, 
                    "200": {
                        "description": "Created docker registry", 
                        "schema": {
                            "$ref": "#/definitions/docker_registry_intent_response"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "description": "Docker registry spec", 
                        "name": "spec", 
                        "schema": {
                            "$ref": "#/definitions/docker_registry_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "docker_registry"
                ], 
                "description": "Create a docker registry", 
                "x-ntnx-kind": "docker_registry", 
                "summary": "Create a docker registry"
            }
        }, 
        "/docker_registries/list": {
            "post": {
                "x-ntnx-permissions": [
                    "docker_registry.view"
                ], 
                "responses": {
                    "200": {
                        "description": "Retrieved all docker registries", 
                        "schema": {
                            "$ref": "#/definitions/docker_registry_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Failed to list docker registries", 
                        "schema": {
                            "$ref": "#/definitions/docker_registry_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "metadata", 
                        "schema": {
                            "$ref": "#/definitions/docker_registry_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "docker_registry"
                ], 
                "description": "List all docker registries", 
                "x-ntnx-kind": "docker_registry", 
                "summary": "List all docker registries"
            }
        }, 
        "/docker_registries/search/list": {
            "post": {
                "x-ntnx-permissions": [
                    "docker_registry.view"
                ], 
                "responses": {
                    "200": {
                        "description": "Matched images based on image name", 
                        "schema": {
                            "$ref": "#/definitions/docker_registry_image_search"
                        }
                    }, 
                    "default": {
                        "description": "Failed to communicate with Docker Hub"
                    }, 
                    "404": {
                        "description": "No matches found based in image name", 
                        "schema": {
                            "$ref": "#/definitions/docker_registry_image_search"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "metadata", 
                        "schema": {
                            "$ref": "#/definitions/docker_registry_image_search"
                        }
                    }
                ], 
                "tags": [
                    "docker_registry"
                ], 
                "description": "Searches docker containers for specified registry", 
                "x-ntnx-kind": "docker_image", 
                "summary": "Searches docker containers for specified registry"
            }
        }, 
        "/docker_registries/{uuid}": {
            "put": {
                "x-ntnx-permissions": [
                    "docker_registry.update"
                ], 
                "responses": {
                    "default": {
                        "description": "Failed to update docker registry", 
                        "schema": {
                            "$ref": "#/definitions/docker_registry_status"
                        }
                    }, 
                    "200": {
                        "description": "DDocker registry", 
                        "schema": {
                            "$ref": "#/definitions/docker_registry_intent_response"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "description": "Docker registery spec", 
                        "name": "spec", 
                        "schema": {
                            "$ref": "#/definitions/docker_registry_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "docker_registry"
                ], 
                "description": "Update a docker registry", 
                "x-ntnx-kind": "docker_registry", 
                "summary": "Update a docker registry"
            }, 
            "get": {
                "x-ntnx-permissions": [
                    "docker_registry.view"
                ], 
                "responses": {
                    "default": {
                        "description": "Failed to retrieve docker registry", 
                        "schema": {
                            "$ref": "#/definitions/docker_registry_status"
                        }
                    }, 
                    "200": {
                        "description": "Docker registry", 
                        "schema": {
                            "$ref": "#/definitions/docker_registry_intent_response"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "docker_registry"
                ], 
                "description": "Retrieve a docker registry", 
                "x-ntnx-kind": "docker_registry", 
                "summary": "Retrieve a Docker registry"
            }, 
            "delete": {
                "x-ntnx-permissions": [
                    "docker_registry.delete"
                ], 
                "responses": {
                    "default": {
                        "description": "Failed to delete docker registry", 
                        "schema": {
                            "$ref": "#/definitions/docker_registry_status"
                        }
                    }, 
                    "200": {
                        "description": "Operation succeeded"
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "docker_registry"
                ], 
                "description": "Deletes a Docker registry", 
                "x-ntnx-kind": "docker_registry", 
                "summary": "Deletes a Docker registry"
            }
        }, 
        "/docker_registries/{uuid}/search/list": {
            "post": {
                "x-ntnx-permissions": [
                    "docker_registry.view"
                ], 
                "responses": {
                    "200": {
                        "description": "Matched images based on image name", 
                        "schema": {
                            "$ref": "#/definitions/docker_registry_image_search"
                        }
                    }, 
                    "default": {
                        "description": "Failed to communicate with Docker Hub"
                    }, 
                    "404": {
                        "description": "Specified Docker Registry not found", 
                        "schema": {
                            "$ref": "#/definitions/docker_registry_image_search"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "metadata", 
                        "schema": {
                            "$ref": "#/definitions/docker_registry_image_search"
                        }
                    }
                ], 
                "tags": [
                    "docker_registry"
                ], 
                "description": "Searches docker containers for specified registry", 
                "x-ntnx-kind": "docker_image", 
                "summary": "Searches docker containers for specified registry"
            }
        }, 
        "/extension_stores/login": {
            "get": {
                "description": "Oauth2", 
                "tags": [
                    "extension"
                ], 
                "x-doc-hide": true, 
                "responses": {
                    "302": {
                        "headers": {
                            "Location": {
                                "type": "string"
                            }
                        }, 
                        "description": "redirect to idp login page"
                    }
                }, 
                "summary": "Oauth2 login to idp"
            }
        }, 
        "/extension_stores/oauth/callback": {
            "get": {
                "responses": {
                    "302": {
                        "headers": {
                            "Location": {
                                "type": "string"
                            }
                        }, 
                        "description": "redirect to idp login page"
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "code", 
                        "in": "query"
                    }, 
                    {
                        "type": "string", 
                        "name": "state", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "extension"
                ], 
                "description": "Oauth2 callback from IDP", 
                "x-doc-hide": true, 
                "summary": "Oauth2 callback from IDP"
            }
        }, 
        "/extensions": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/extension_status"
                        }
                    }, 
                    "200": {
                        "description": "Successful operation", 
                        "schema": {
                            "$ref": "#/definitions/extension_intent_response"
                        }
                    }
                }, 
                "x-ntnx-permissions": [
                    "extension.create"
                ], 
                "description": "Install new extension", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "description": "Extension details", 
                        "name": "extension_manifest", 
                        "schema": {
                            "$ref": "#/definitions/extension_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "extension"
                ], 
                "x-ntnx-kind": "extension", 
                "summary": "This is used to Install new extension"
            }
        }, 
        "/extensions/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Retrieved all installed extensions", 
                        "schema": {
                            "$ref": "#/definitions/extension_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Failed to retrieve all extensions", 
                        "schema": {
                            "$ref": "#/definitions/extension_status"
                        }
                    }
                }, 
                "x-ntnx-permissions": [
                    "extension.view"
                ], 
                "description": "Retrieve list of installed extensions", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/extension_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "extension"
                ], 
                "x-ntnx-kind": "extension", 
                "summary": "Retrieve list of installed extensions"
            }
        }, 
        "/extensions/{uuid}": {
            "put": {
                "responses": {
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/extension_status"
                        }
                    }, 
                    "200": {
                        "description": "Successful operation", 
                        "schema": {
                            "$ref": "#/definitions/extension_intent_response"
                        }
                    }, 
                    "404": {
                        "description": "Extension does not exists", 
                        "schema": {
                            "$ref": "#/definitions/extension_status"
                        }
                    }
                }, 
                "x-ntnx-permissions": [
                    "extension.update"
                ], 
                "description": "Update extension", 
                "parameters": [
                    {
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "name": "uuid", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "description": "Extension manifest", 
                        "name": "extension", 
                        "schema": {
                            "$ref": "#/definitions/extension_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "extension"
                ], 
                "x-ntnx-kind": "extension", 
                "summary": "Used to update an extension with new version"
            }, 
            "get": {
                "responses": {
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/extension_status"
                        }
                    }, 
                    "200": {
                        "description": "Successful operation", 
                        "schema": {
                            "$ref": "#/definitions/extension_intent_response"
                        }
                    }, 
                    "404": {
                        "description": "Extension does not exists", 
                        "schema": {
                            "$ref": "#/definitions/extension_status"
                        }
                    }
                }, 
                "x-ntnx-permissions": [
                    "extension.view"
                ], 
                "description": "Get extension information", 
                "parameters": [
                    {
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "name": "uuid", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "extension"
                ], 
                "x-ntnx-kind": "extension", 
                "summary": "Used to fetch installed extension details"
            }, 
            "delete": {
                "responses": {
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/extension_status"
                        }
                    }, 
                    "200": {
                        "description": "Successful operation"
                    }, 
                    "404": {
                        "description": "Extension does not exists", 
                        "schema": {
                            "$ref": "#/definitions/extension_status"
                        }
                    }
                }, 
                "x-ntnx-permissions": [
                    "extension.delete"
                ], 
                "description": "Delete existing extension and its information", 
                "parameters": [
                    {
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "name": "uuid", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "extension"
                ], 
                "x-ntnx-kind": "extension", 
                "summary": "Delete an existing extension"
            }
        }, 
        "/groups": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/groups_get_entities_response"
                        }
                    }, 
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/groups_get_entities_request"
                        }
                    }
                ], 
                "tags": [
                    "groups"
                ], 
                "description": "Get entities from entity db", 
                "x-doc-hide": true, 
                "summary": "Get Entities"
            }
        }, 
        "/hosts/": {
            "post": {
                "x-ntnx-permissions": [
                    "host.create"
                ], 
                "responses": {
                    "200": {
                        "description": "Request succeeded", 
                        "schema": {
                            "$ref": "#/definitions/host_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal error", 
                        "schema": {
                            "$ref": "#/definitions/host_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "description": "Intent Spec of Host", 
                        "name": "host_intent", 
                        "schema": {
                            "$ref": "#/definitions/host_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "hosts"
                ], 
                "description": "Add a node to the cluster given by the host input object", 
                "x-ntnx-kind": "host", 
                "summary": "Add a node"
            }
        }, 
        "/hosts/list": {
            "post": {
                "x-ntnx-permissions": [
                    "host.view"
                ], 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/host_list_intent_response"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "default": {
                        "description": "Server Error", 
                        "schema": {
                            "$ref": "#/definitions/host_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/host_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "hosts"
                ], 
                "description": "Get the list of hosts of the cluster", 
                "x-ntnx-kind": "host", 
                "summary": "Get the hosts"
            }
        }, 
        "/hosts/{uuid}": {
            "get": {
                "x-ntnx-permissions": [
                    "host.view"
                ], 
                "responses": {
                    "200": {
                        "description": "Request succeeded", 
                        "schema": {
                            "$ref": "#/definitions/host_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/host_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "hosts"
                ], 
                "description": "Return the host definition by the given uuid", 
                "x-ntnx-kind": "host", 
                "summary": "Get a Host"
            }, 
            "delete": {
                "x-ntnx-permissions": [
                    "host.delete"
                ], 
                "responses": {
                    "200": {
                        "description": "Success"
                    }, 
                    "default": {
                        "description": "Internal error", 
                        "schema": {
                            "$ref": "#/definitions/host_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "hosts"
                ], 
                "description": "Remove the host given by the uuid", 
                "x-ntnx-kind": "host", 
                "summary": "Remove a host"
            }
        }, 
        "/idempotence_identifiers": {
            "post": {
                "description": "Creates a idempotence identifier", 
                "tags": [
                    "idempotence_identifiers"
                ], 
                "responses": {
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/idempotence_identifiers_status"
                        }
                    }, 
                    "200": {
                        "description": "Successful operation", 
                        "schema": {
                            "$ref": "#/definitions/idempotence_identifiers_response"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": false, 
                        "in": "body", 
                        "description": "An idempotence identifier object", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/idempotence_identifiers_input"
                        }
                    }
                ], 
                "summary": "Creates a idempotence identifier"
            }
        }, 
        "/idempotence_identifiers/{client_identifier}": {
            "get": {
                "description": "Get a idempotence identifier object", 
                "tags": [
                    "idempotence_identifiers"
                ], 
                "responses": {
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/idempotence_identifiers_status"
                        }
                    }, 
                    "200": {
                        "description": "Successful operation", 
                        "schema": {
                            "$ref": "#/definitions/idempotence_identifiers_response"
                        }
                    }, 
                    "404": {
                        "description": "Client identifier does not exists", 
                        "schema": {
                            "$ref": "#/definitions/idempotence_identifiers_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "client_identifier", 
                        "in": "path"
                    }
                ], 
                "summary": "Get a idempotence identifier object"
            }, 
            "delete": {
                "description": "Delete a idempotence identifier object", 
                "tags": [
                    "idempotence_identifiers"
                ], 
                "responses": {
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/idempotence_identifiers_status"
                        }
                    }, 
                    "200": {
                        "description": "Successful operation"
                    }, 
                    "404": {
                        "description": "Client identifier does not exists", 
                        "schema": {
                            "$ref": "#/definitions/idempotence_identifiers_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "client_identifier", 
                        "in": "path"
                    }
                ], 
                "summary": "Delete a idempotence identifier object"
            }
        }, 
        "/images": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/image_status"
                        }
                    }, 
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/image"
                            }, 
                            "type": "array"
                        }
                    }
                }, 
                "x-ntnx-permissions": [
                    "image.create"
                ], 
                "description": "Create an image", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "request", 
                        "schema": {
                            "$ref": "#/definitions/image"
                        }
                    }
                ], 
                "tags": [
                    "images"
                ], 
                "x-ntnx-kind": "image", 
                "summary": "Create Image"
            }
        }, 
        "/images/list": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/image_status"
                        }
                    }, 
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/image_list"
                        }
                    }
                }, 
                "x-ntnx-permissions": [
                    "image.view"
                ], 
                "description": "List images", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/image_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "images"
                ], 
                "x-ntnx-kind": "image", 
                "summary": "List Images"
            }
        }, 
        "/images/{uuid}": {
            "put": {
                "responses": {
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/image_status"
                        }
                    }, 
                    "200": {
                        "description": "Success"
                    }
                }, 
                "x-ntnx-permissions": [
                    "image.update"
                ], 
                "description": "Modify image", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "request", 
                        "schema": {
                            "$ref": "#/definitions/image"
                        }
                    }
                ], 
                "tags": [
                    "images"
                ], 
                "x-ntnx-kind": "image", 
                "summary": "Modify Image"
            }, 
            "get": {
                "responses": {
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/image_status"
                        }
                    }, 
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/image"
                        }
                    }
                }, 
                "x-ntnx-permissions": [
                    "image.view"
                ], 
                "description": "Get details for an image", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": false, 
                        "type": "boolean", 
                        "name": "include_vmdisk_sizes", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "images"
                ], 
                "x-ntnx-kind": "image", 
                "summary": "Get Image"
            }, 
            "delete": {
                "responses": {
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/image_status"
                        }
                    }, 
                    "200": {
                        "description": "Success"
                    }
                }, 
                "x-ntnx-permissions": [
                    "image.delete"
                ], 
                "description": "Delete an image", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "images"
                ], 
                "x-ntnx-kind": "image", 
                "summary": "Delete Image"
            }
        }, 
        
        "/jobs": {
            "post": {
                "x-ntnx-permissions": [
                    "job.create"
                ], 
                "responses": {
                    "200": {
                        "description": "Request Succeeded", 
                        "schema": {
                            "$ref": "#/definitions/job_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/job_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Request body", 
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/job_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "job"
                ], 
                "description": "Create a Job for a workflow with associated metadata", 
                "x-ntnx-kind": "job", 
                "summary": "Create Job"
            }
        }, 
        "/jobs/list": {
            "post": {
                "x-ntnx-permissions": [
                    "job.view"
                ], 
                "responses": {
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/job_status"
                        }
                    }, 
                    "200": {
                        "description": "Successful operation", 
                        "schema": {
                            "$ref": "#/definitions/job_list_intent_response"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/job_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "job"
                ], 
                "description": "List of all the jobs.", 
                "x-ntnx-kind": "job", 
                "summary": "List the Jobs"
            }
        }, 
        "/jobs/{uuid}": {
            "put": {
                "x-ntnx-permissions": [
                    "job.update"
                ], 
                "responses": {
                    "200": {
                        "description": "Request Succeeded", 
                        "schema": {
                            "$ref": "#/definitions/job_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/job_status"
                        }
                    }, 
                    "404": {
                        "description": "Entity not found", 
                        "schema": {
                            "$ref": "#/definitions/job_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "name": "uuid", 
                        "in": "path", 
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "description": "Uuid of job to be updated"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/job_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "job"
                ], 
                "description": "Given an intenful spec and Job uuid, update Job", 
                "x-ntnx-kind": "job", 
                "summary": "Update Job"
            }, 
            "get": {
                "x-ntnx-permissions": [
                    "job.view"
                ], 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/job_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/job_status"
                        }
                    }, 
                    "404": {
                        "description": "Entity not found", 
                        "schema": {
                            "$ref": "#/definitions/job_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "name": "uuid", 
                        "in": "path", 
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "description": "Uuid of job to get"
                    }
                ], 
                "tags": [
                    "job"
                ], 
                "description": "Given a UUID, returns a Job definition", 
                "x-ntnx-kind": "job", 
                "summary": "Get Job"
            }, 
            "patch": {
                "x-ntnx-permissions": [
                    "job.update"
                ], 
                "responses": {
                    "200": {
                        "description": "Request Succeeded", 
                        "schema": {
                            "$ref": "#/definitions/job_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/job_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID Provided", 
                        "schema": {
                            "$ref": "#/definitions/job_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "name": "uuid", 
                        "in": "path", 
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "description": "Uuid of Job to be updated"
                    }, 
                    {
                        "description": "Request body", 
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/job_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "job"
                ], 
                "description": "Given an intentful spec and Job UUID, update Job using partial update semantics", 
                "x-ntnx-kind": "job", 
                "summary": "Update Job (partial)"
            }, 
            "delete": {
                "x-ntnx-permissions": [
                    "job.delete"
                ], 
                "responses": {
                    "200": {
                        "description": "Request Succeeded"
                    }, 
                    "default": {
                        "description": "Internal Error"
                    }, 
                    "404": {
                        "description": "Invalid UUID Provided", 
                        "schema": {
                            "$ref": "#/definitions/job_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "name": "uuid", 
                        "in": "path", 
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "description": "Uuid of the job to be deleted"
                    }
                ], 
                "tags": [
                    "job"
                ], 
                "description": "Delete a Job given its UUID", 
                "x-ntnx-kind": "job", 
                "summary": "Delete Job"
            }
        }, 
        "/logout": {
            "get": {
                "x-ntnx-kind": "user", 
                "summary": "Logs out the current user", 
                "responses": {
                    "200": {
                        "description": "Successfully invalidated session"
                    }, 
                    "default": {
                        "description": "Failed to invalidate session"
                    }
                }, 
                "tags": [
                    "user"
                ], 
                "description": "Invalidates the session for current user"
            }
        }, 
        "/networks": {
            "post": {
                "x-ntnx-permissions": [
                    "network.create"
                ], 
                "description": "Create a network", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "request", 
                        "schema": {
                            "$ref": "#/definitions/network"
                        }
                    }
                ], 
                "tags": [
                    "network"
                ], 
                "summary": "Create a network", 
                "x-ntnx-ref-keys": [
                    "packet_processor_chain_reference"
                ], 
                "x-ntnx-kind": "network", 
                "responses": {
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/network_status"
                        }
                    }, 
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/network"
                        }
                    }
                }
            }
        }, 
        "/networks/list": {
            "post": {
                "x-ntnx-permissions": [
                    "network.view"
                ], 
                "description": "Get networks", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/network_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "network"
                ], 
                "summary": "Get networks", 
                "x-ntnx-ref-keys": [
                    "packet_processor_chain_reference"
                ], 
                "x-ntnx-kind": "network", 
                "responses": {
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/network_status"
                        }
                    }, 
                    "200": {
                        "description": "Successful operation", 
                        "schema": {
                            "$ref": "#/definitions/network_list"
                        }
                    }
                }
            }
        }, 
        "/networks/{uuid}": {
            "put": {
                "x-ntnx-permissions": [
                    "network.update"
                ], 
                "description": "Modify network", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "request", 
                        "schema": {
                            "$ref": "#/definitions/network"
                        }
                    }
                ], 
                "tags": [
                    "network"
                ], 
                "summary": "Modify network", 
                "x-ntnx-ref-keys": [
                    "packet_processor_chain_reference"
                ], 
                "x-ntnx-kind": "network", 
                "responses": {
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/network_status"
                        }
                    }, 
                    "200": {
                        "description": "Success"
                    }
                }
            }, 
            "get": {
                "x-ntnx-permissions": [
                    "network.view"
                ], 
                "description": "Get details for a network", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "network"
                ], 
                "summary": "Get details for a network", 
                "x-ntnx-ref-keys": [
                    "packet_processor_chain_reference"
                ], 
                "x-ntnx-kind": "network", 
                "responses": {
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/network_status"
                        }
                    }, 
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/network"
                        }
                    }
                }
            }, 
            "delete": {
                "x-ntnx-permissions": [
                    "network.delete"
                ], 
                "description": "Delete a network", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "network"
                ], 
                "summary": "Delete a network", 
                "x-ntnx-ref-keys": [
                    "packet_processor_chain_reference"
                ], 
                "x-ntnx-kind": "network", 
                "responses": {
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/network_status"
                        }
                    }, 
                    "200": {
                        "description": "Success"
                    }
                }
            }
        }, 
        "/oauth/authorize": {
            "post": {
                "description": "Authorization confirmation post url", 
                "tags": [
                    "oauth"
                ], 
                "responses": {
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/oauth_status"
                        }
                    }, 
                    "302": {
                        "headers": {
                            "Location": {
                                "type": "string"
                            }
                        }, 
                        "description": "authorization grant is provided in callback url callback url\nis in format {redirect_uri}/?code={grant_code}&state={state}\n"
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Your client ID", 
                        "in": "formData", 
                        "name": "client_id"
                    }, 
                    {
                        "in": "formData", 
                        "type": "string", 
                        "description": "Whitespace-separated list of scopes you application needs", 
                        "name": "scope"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Must be 'code'", 
                        "in": "formData", 
                        "name": "response_type"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Must be 'yes' or 'no'", 
                        "in": "formData", 
                        "name": "confirm"
                    }, 
                    {
                        "in": "formData", 
                        "type": "string", 
                        "description": "This URL is used to provide user authorization if the user accepted\naccess to the application or not\n", 
                        "name": "redirect_uri"
                    }, 
                    {
                        "in": "formData", 
                        "type": "string", 
                        "description": "state parameter to prevent cross site origin attacks", 
                        "name": "state"
                    }
                ], 
                "summary": "Used to get authorization code from server"
            }
        }, 
        "/oauth/client": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/oauth_client_status"
                        }
                    }, 
                    "200": {
                        "description": "Successful operation", 
                        "schema": {
                            "$ref": "#/definitions/oauth_client_response"
                        }
                    }
                }, 
                "x-ntnx-permissions": [
                    "oauth_client.create"
                ], 
                "description": "Add new Oauth Client", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "description": "Oauth client details", 
                        "name": "oauth_client", 
                        "schema": {
                            "$ref": "#/definitions/oauth_client_input"
                        }
                    }
                ], 
                "tags": [
                    "oauth"
                ], 
                "x-ntnx-kind": "oauth_client", 
                "summary": "This is used to register new oauth client"
            }
        }, 
        "/oauth/client/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Retrieved all oauth clients", 
                        "schema": {
                            "$ref": "#/definitions/oauth_client_list"
                        }
                    }, 
                    "default": {
                        "description": "Failed to retrieve all projects", 
                        "schema": {
                            "$ref": "#/definitions/oauth_client_status"
                        }
                    }
                }, 
                "x-ntnx-permissions": [
                    "oauth_client.list"
                ], 
                "description": "Retrieves all oauth clients", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/oauth_client_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "oauth"
                ], 
                "x-ntnx-kind": "oauth_client", 
                "summary": "Retrieves all oauth client"
            }
        }, 
        "/oauth/client/{client_id}": {
            "put": {
                "responses": {
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/oauth_client_status"
                        }
                    }, 
                    "200": {
                        "description": "Successful operation", 
                        "schema": {
                            "$ref": "#/definitions/oauth_client_response"
                        }
                    }, 
                    "404": {
                        "description": "Client identifier does not exists", 
                        "schema": {
                            "$ref": "#/definitions/oauth_client_status"
                        }
                    }
                }, 
                "x-ntnx-permissions": [
                    "oauth_client.modify"
                ], 
                "description": "Update Oauth client information", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "client_id", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "description": "Oauth client details", 
                        "name": "oauth_client", 
                        "schema": {
                            "$ref": "#/definitions/oauth_client_input"
                        }
                    }
                ], 
                "tags": [
                    "oauth"
                ], 
                "x-ntnx-kind": "oauth_client", 
                "summary": "Used to update existing client details"
            }, 
            "get": {
                "responses": {
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/oauth_client_status"
                        }
                    }, 
                    "200": {
                        "description": "Successful operation", 
                        "schema": {
                            "$ref": "#/definitions/oauth_client_response"
                        }
                    }, 
                    "404": {
                        "description": "Client identifier does not exists", 
                        "schema": {
                            "$ref": "#/definitions/oauth_client_status"
                        }
                    }
                }, 
                "x-ntnx-permissions": [
                    "oauth_client.view"
                ], 
                "description": "Get Oauth client information", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "client_id", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "oauth"
                ], 
                "x-ntnx-kind": "oauth_client", 
                "summary": "Used to fetch existing oauth client details"
            }, 
            "delete": {
                "responses": {
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/oauth_client_status"
                        }
                    }, 
                    "200": {
                        "description": "Successful operation"
                    }, 
                    "404": {
                        "description": "Client id does not exists", 
                        "schema": {
                            "$ref": "#/definitions/oauth_client_status"
                        }
                    }
                }, 
                "x-ntnx-permissions": [
                    "oauth_client.delete"
                ], 
                "description": "Delete existing Oauth client information", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "client_id", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "oauth"
                ], 
                "x-ntnx-kind": "oauth_client", 
                "summary": "Delete an existing Oauth client"
            }
        }, 
        "/oauth/generate_token": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Oauth token generation success", 
                        "schema": {
                            "$ref": "#/definitions/oauth_generate_token_response"
                        }
                    }, 
                    "default": {
                        "description": "Failed to generate oauth token", 
                        "schema": {
                            "$ref": "#/definitions/oauth_status"
                        }
                    }
                }, 
                "x-ntnx-permissions": [
                    "oauth_token.create"
                ], 
                "description": "Generates an oauth token", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "oauth_generate_token_request", 
                        "schema": {
                            "$ref": "#/definitions/oauth_generate_token_request"
                        }
                    }
                ], 
                "tags": [
                    "oauth"
                ], 
                "x-ntnx-kind": "oauth_token", 
                "summary": "This is used when the user is already authenticated and would like to\ncreate bearer tokens for distribution\n"
            }
        }, 
        "/oauth/token": {
            "post": {
                "description": "Returns an access token", 
                "tags": [
                    "oauth"
                ], 
                "responses": {
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/oauth_status"
                        }
                    }, 
                    "200": {
                        "description": "A new token", 
                        "schema": {
                            "$ref": "#/definitions/oauth_token"
                        }
                    }, 
                    "401": {
                        "description": "Missing or invalid authentication", 
                        "schema": {
                            "$ref": "#/definitions/oauth_status"
                        }
                    }, 
                    "400": {
                        "description": "Missing or wrong grant_type", 
                        "schema": {
                            "$ref": "#/definitions/oauth_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Must be authorization_code or refresh_token", 
                        "in": "formData", 
                        "name": "grant_type"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Your client ID", 
                        "in": "formData", 
                        "name": "client_id"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Your client secret", 
                        "in": "formData", 
                        "name": "client_secret"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "authorization_code received in redirect_uri\nmust for grant_type = authorization_code\n", 
                        "in": "formData", 
                        "name": "code"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "refresh_token received with previous token\nmust for grant_type = refresh_token\n", 
                        "in": "formData", 
                        "name": "refresh_token"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "state parameter to prevent cross site origin attacks\nuse only if passed in getting authorization\n", 
                        "in": "formData", 
                        "name": "state"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "redirect uri used to get authorization\nmust for grant_type = authorization_code\n", 
                        "in": "formData", 
                        "name": "redirect_uri"
                    }
                ], 
                "summary": "This callback is used to get token from Oauth2 provider"
            }
        }, 
        "/oauth/token/register": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Oauth token registration success", 
                        "schema": {
                            "$ref": "#/definitions/oauth_register_token_response"
                        }
                    }, 
                    "default": {
                        "description": "Failed to register oauth token", 
                        "schema": {
                            "$ref": "#/definitions/oauth_status"
                        }
                    }
                }, 
                "x-ntnx-permissions": [
                    "oauth_token.register"
                ], 
                "description": "Register an oauth token\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "oauth_register_token_request", 
                        "schema": {
                            "$ref": "#/definitions/oauth_register_token_request"
                        }
                    }
                ], 
                "tags": [
                    "oauth"
                ], 
                "x-ntnx-kind": "oauth_token", 
                "summary": "This is used when a client wants to create a communication channel\nwith the server by using oauth tokens.\n"
            }
        }, 
        "/oauth/token/unregister/{client_id}": {
            "delete": {
                "responses": {
                    "200": {
                        "description": "Oauth token unregister success"
                    }, 
                    "default": {
                        "description": "Failed to unregister oauth token"
                    }
                }, 
                "x-ntnx-permissions": [
                    "oauth_token.delete"
                ], 
                "description": "Unregister client access token and revoke the access token issued to\nthe client\n", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "client_id", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "oauth"
                ], 
                "x-ntnx-kind": "oauth_token", 
                "summary": "Unregister client access token and revoke the access token issued to\nthe client\n"
            }
        }, 
        "/packet_processor_chains": {
            "post": {
                "x-ntnx-permissions": [
                    "packet_processor_chain.create"
                ], 
                "responses": {
                    "200": {
                        "description": "Request Succeeded", 
                        "schema": {
                            "$ref": "#/definitions/packet_processor_chain_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/packet_processor_chain_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/packet_processor_chain_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "packet_processor_chain"
                ], 
                "description": "Given an intentful spec, creates a packet processor chain with associated metadata", 
                "x-ntnx-kind": "packet_processor_chain", 
                "summary": "Create Packet Processor Chain"
            }
        }, 
        "/packet_processor_chains/list": {
            "post": {
                "x-ntnx-permissions": [
                    "packet_processor_chain.read"
                ], 
                "responses": {
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/packet_processor_chain_status"
                        }
                    }, 
                    "200": {
                        "description": "Successful operation", 
                        "schema": {
                            "$ref": "#/definitions/packet_processor_chain_list_intent_response"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/packet_processor_chain_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "packet_processor_chain"
                ], 
                "description": "List the packet_processor_chains with associated metadata", 
                "x-ntnx-kind": "packet_processor_chain", 
                "summary": "List the packet processor chains"
            }
        }, 
        "/packet_processor_chains/{uuid}": {
            "put": {
                "x-ntnx-permissions": [
                    "packet_processor_chain.update"
                ], 
                "responses": {
                    "200": {
                        "description": "Request Succeeded", 
                        "schema": {
                            "$ref": "#/definitions/packet_processor_chain_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/packet_processor_chain_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "name": "uuid", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/packet_processor_chain_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "packet_processor_chain"
                ], 
                "description": "Given an intenful spec and uuid, update packet processor chain", 
                "x-ntnx-kind": "packet_processor_chain", 
                "summary": "Update packet processor chain"
            }, 
            "get": {
                "x-ntnx-permissions": [
                    "packet_processor_chain.read"
                ], 
                "responses": {
                    "200": {
                        "description": "Request succeeded", 
                        "schema": {
                            "$ref": "#/definitions/packet_processor_chain_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/packet_processor_chain_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "name": "uuid", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "packet_processor_chain"
                ], 
                "description": "Given a UUID, returns a packet_processor_chain definition", 
                "x-ntnx-kind": "packet_processor_chain", 
                "summary": "Get packet processor chain"
            }, 
            "delete": {
                "x-ntnx-permissions": [
                    "packet_processor_chain.delete"
                ], 
                "responses": {
                    "200": {
                        "description": "Request Succeeded"
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/packet_processor_chain_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "name": "uuid", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "packet_processor_chain"
                ], 
                "description": "Delete a packet processor chain given its uuid", 
                "x-ntnx-kind": "packet_processor_chain", 
                "summary": "Delete packet processor chain"
            }
        }, 
        "/permissions": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/permission_status"
                        }
                    }, 
                    "200": {
                        "description": "Successful operation", 
                        "schema": {
                            "$ref": "#/definitions/permission"
                        }
                    }
                }, 
                "x-ntnx-permissions": [
                    "permission.create"
                ], 
                "description": "Creates a permission", 
                "parameters": [
                    {
                        "required": false, 
                        "in": "body", 
                        "description": "A Permission object", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/permission"
                        }
                    }
                ], 
                "tags": [
                    "permission"
                ], 
                "x-ntnx-kind": "permission", 
                "summary": "Creates a permission"
            }
        }, 
        "/permissions/list": {
            "post": {
                "x-ntnx-permissions": [
                    "permission.view"
                ], 
                "description": "Get permissions", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/permission_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "permission"
                ], 
                "summary": "Get permissions", 
                "x-ntnx-ref-keys": [
                    "permission_reference", 
                    "permission_reference_list"
                ], 
                "x-ntnx-kind": "permission", 
                "responses": {
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/permission_status"
                        }
                    }, 
                    "200": {
                        "description": "Successful operation", 
                        "schema": {
                            "$ref": "#/definitions/permission_list"
                        }
                    }
                }
            }
        }, 
        "/permissions/{uuid}": {
            "put": {
                "responses": {
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/permission_status"
                        }
                    }, 
                    "200": {
                        "description": "Successful operation", 
                        "schema": {
                            "$ref": "#/definitions/permission"
                        }
                    }
                }, 
                "x-ntnx-permissions": [
                    "permission.update"
                ], 
                "description": "Update permission", 
                "parameters": [
                    {
                        "description": "ID of permission that needs to be updated", 
                        "in": "path", 
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "name": "uuid"
                    }, 
                    {
                        "required": false, 
                        "in": "body", 
                        "description": "A Permission object", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/permission"
                        }
                    }
                ], 
                "tags": [
                    "permission"
                ], 
                "x-ntnx-kind": "permission", 
                "summary": "Update permission"
            }, 
            "get": {
                "responses": {
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/permission_status"
                        }
                    }, 
                    "200": {
                        "description": "Successful operation", 
                        "schema": {
                            "$ref": "#/definitions/permission"
                        }
                    }
                }, 
                "x-ntnx-permissions": [
                    "permission.list"
                ], 
                "description": "Get a permission object", 
                "parameters": [
                    {
                        "description": "ID of permission that needs to be fetched", 
                        "in": "path", 
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "name": "uuid"
                    }
                ], 
                "tags": [
                    "permission"
                ], 
                "x-ntnx-kind": "permission", 
                "summary": "Get a permission object"
            }, 
            "delete": {
                "responses": {
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/permission_status"
                        }
                    }, 
                    "200": {
                        "description": "Successful operation"
                    }
                }, 
                "x-ntnx-permissions": [
                    "permission.delete"
                ], 
                "description": "Delete a permission object", 
                "parameters": [
                    {
                        "description": "UUID of permission", 
                        "in": "path", 
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "name": "uuid"
                    }
                ], 
                "tags": [
                    "permission"
                ], 
                "x-ntnx-kind": "permission", 
                "summary": "Delete a permission object"
            }
        }, 
        "/policy": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/policy_status"
                        }
                    }, 
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/policy"
                        }
                    }
                }, 
                "x-ntnx-permissions": [
                    "policy.create"
                ], 
                "description": "Create a policy", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "request", 
                        "schema": {
                            "$ref": "#/definitions/policy"
                        }
                    }
                ], 
                "tags": [
                    "policy"
                ], 
                "x-ntnx-kind": "policy", 
                "summary": "Create policy"
            }
        }, 
        "/policy/list": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/policy_status"
                        }
                    }, 
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/policy_list"
                        }
                    }
                }, 
                "x-ntnx-permissions": [
                    "policy.view"
                ], 
                "description": "Get all policies", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/policy_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "policy"
                ], 
                "x-ntnx-kind": "policy", 
                "summary": "Get policies"
            }
        }, 
        "/policy/{uuid}": {
            "put": {
                "responses": {
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/policy_status"
                        }
                    }, 
                    "200": {
                        "description": "Success"
                    }
                }, 
                "x-ntnx-permissions": [
                    "policy.update"
                ], 
                "description": "Modify policy", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "request", 
                        "schema": {
                            "$ref": "#/definitions/policy"
                        }
                    }
                ], 
                "tags": [
                    "policy"
                ], 
                "x-ntnx-kind": "policy", 
                "summary": "Modify policy"
            }, 
            "get": {
                "responses": {
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/policy_status"
                        }
                    }, 
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/policy"
                        }
                    }
                }, 
                "x-ntnx-permissions": [
                    "policy.view"
                ], 
                "description": "Get details for a policy", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "policy"
                ], 
                "x-ntnx-kind": "policy", 
                "summary": "Get details for a policy"
            }, 
            "delete": {
                "responses": {
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/policy_status"
                        }
                    }, 
                    "200": {
                        "description": "Success"
                    }
                }, 
                "x-ntnx-permissions": [
                    "policy.delete"
                ], 
                "description": "Delete a policy", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "policy"
                ], 
                "x-ntnx-kind": "policy", 
                "summary": "Delete policy"
            }
        },
        "/projects": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Failed to create project", 
                        "schema": {
                            "$ref": "#/definitions/project_status"
                        }
                    }, 
                    "200": {
                        "description": "Created project", 
                        "schema": {
                            "$ref": "#/definitions/project"
                        }
                    }
                }, 
                "x-ntnx-permissions": [
                    "project.create"
                ], 
                "description": "Creaters a project", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "description": "Project object", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/project"
                        }
                    }
                ], 
                "tags": [
                    "project"
                ], 
                "x-ntnx-kind": "project", 
                "summary": "Creates a project"
            }
        }, 
        "/projects/list": {
            "post": {
                "x-ntnx-permissions": [
                    "project.view"
                ], 
                "description": "Retrieves all Projects", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/project_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "project"
                ], 
                "summary": "Retrieves all Projects", 
                "x-ntnx-ref-keys": [
                    "project_reference_list"
                ], 
                "x-ntnx-kind": "project", 
                "responses": {
                    "200": {
                        "description": "Retrieved all projects", 
                        "schema": {
                            "$ref": "#/definitions/project_list"
                        }
                    }, 
                    "default": {
                        "description": "Failed to retrieve all projects", 
                        "schema": {
                            "$ref": "#/definitions/project_status"
                        }
                    }
                }
            }
        }, 
        "/projects/{uuid}": {
            "put": {
                "responses": {
                    "default": {
                        "description": "Failed to update project", 
                        "schema": {
                            "$ref": "#/definitions/project_status"
                        }
                    }, 
                    "200": {
                        "description": "Updated project", 
                        "schema": {
                            "$ref": "#/definitions/project"
                        }
                    }
                }, 
                "x-ntnx-permissions": [
                    "project.update"
                ], 
                "description": "Updates a project", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "description": "Project object", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/project"
                        }
                    }
                ], 
                "tags": [
                    "project"
                ], 
                "x-ntnx-kind": "project", 
                "summary": "Updates a project"
            }, 
            "get": {
                "x-ntnx-permissions": [
                    "project.view"
                ], 
                "description": "Retrieves specified Project", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "project"
                ], 
                "summary": "Retrieves specified Project", 
                "x-ntnx-ref-keys": [
                    "project_reference"
                ], 
                "x-ntnx-kind": "project", 
                "responses": {
                    "default": {
                        "description": "Failed to retrieve project", 
                        "schema": {
                            "$ref": "#/definitions/project_status"
                        }
                    }, 
                    "200": {
                        "description": "Retrieved project", 
                        "schema": {
                            "$ref": "#/definitions/project"
                        }
                    }
                }
            }, 
            "delete": {
                "responses": {
                    "default": {
                        "description": "Failed to delete project", 
                        "schema": {
                            "$ref": "#/definitions/project_status"
                        }
                    }, 
                    "200": {
                        "description": "Deleted project"
                    }
                }, 
                "x-ntnx-permissions": [
                    "project.delete"
                ], 
                "description": "Deletes a project", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "project"
                ], 
                "x-ntnx-kind": "project", 
                "summary": "Deletes a project"
            }
        }, 
        "/roles": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/role_status"
                        }
                    }, 
                    "200": {
                        "description": "Successful operation", 
                        "schema": {
                            "$ref": "#/definitions/role"
                        }
                    }
                }, 
                "x-ntnx-permissions": [
                    "role.create"
                ], 
                "description": "Creates a role", 
                "parameters": [
                    {
                        "required": false, 
                        "in": "body", 
                        "description": "A Role object", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/role"
                        }
                    }
                ], 
                "tags": [
                    "role"
                ], 
                "x-ntnx-kind": "role", 
                "summary": "Creates a role"
            }
        }, 
        "/roles/list": {
            "post": {
                "x-ntnx-permissions": [
                    "role.view"
                ], 
                "description": "Get roles", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/role_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "role"
                ], 
                "summary": "Get roles", 
                "x-ntnx-ref-keys": [
                    "role_reference", 
                    "role_reference_list"
                ], 
                "x-ntnx-kind": "role", 
                "responses": {
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/role_status"
                        }
                    }, 
                    "200": {
                        "description": "Successful operation", 
                        "schema": {
                            "$ref": "#/definitions/role_list"
                        }
                    }
                }
            }
        }, 
        "/roles/{uuid}": {
            "put": {
                "responses": {
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/role_status"
                        }
                    }, 
                    "200": {
                        "description": "Successful operation", 
                        "schema": {
                            "$ref": "#/definitions/role"
                        }
                    }
                }, 
                "x-ntnx-permissions": [
                    "role.update"
                ], 
                "description": "Update role", 
                "parameters": [
                    {
                        "description": "ID of role that needs to be updated", 
                        "in": "path", 
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "name": "uuid"
                    }, 
                    {
                        "required": false, 
                        "in": "body", 
                        "description": "A Role object", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/role"
                        }
                    }
                ], 
                "tags": [
                    "role"
                ], 
                "x-ntnx-kind": "role", 
                "summary": "Update role"
            }, 
            "get": {
                "responses": {
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/role_status"
                        }
                    }, 
                    "200": {
                        "description": "Successful operation", 
                        "schema": {
                            "$ref": "#/definitions/role"
                        }
                    }
                }, 
                "x-ntnx-permissions": [
                    "role.view"
                ], 
                "description": "Get a role object", 
                "parameters": [
                    {
                        "description": "ID of role that needs to be fetched", 
                        "in": "path", 
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "name": "uuid"
                    }
                ], 
                "tags": [
                    "role"
                ], 
                "x-ntnx-kind": "role", 
                "summary": "Get a role object"
            }, 
            "delete": {
                "responses": {
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/role_status"
                        }
                    }, 
                    "200": {
                        "description": "Successful operation"
                    }
                }, 
                "x-ntnx-permissions": [
                    "role.delete"
                ], 
                "description": "Delete a role object", 
                "parameters": [
                    {
                        "description": "UUID of role", 
                        "in": "path", 
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "name": "uuid"
                    }
                ], 
                "tags": [
                    "role"
                ], 
                "x-ntnx-kind": "role", 
                "summary": "Delete a role object"
            }
        }, 
        "/users/me": {
            "get": {
                "x-ntnx-kind": "user", 
                "summary": "Retrieves currently logged in user", 
                "responses": {
                    "200": {
                        "description": "Retrieved logged in user object", 
                        "schema": {
                            "$ref": "#/definitions/user"
                        }
                    }, 
                    "default": {
                        "description": "Failed to retrieve currently logged in user", 
                        "schema": {
                            "$ref": "#/definitions/user_status"
                        }
                    }
                }, 
                "tags": [
                    "user"
                ], 
                "description": "Retrieves currently logged in user"
            }
        }, 
        "/users/{uuid}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Updated user object", 
                        "schema": {
                            "$ref": "#/definitions/user"
                        }
                    }, 
                    "default": {
                        "description": "Failed to updated user", 
                        "schema": {
                            "$ref": "#/definitions/user_status"
                        }
                    }
                }, 
                "x-ntnx-permissions": [
                    "user.update"
                ], 
                "description": "Update user", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "spec", 
                        "schema": {
                            "$ref": "#/definitions/user_spec"
                        }
                    }
                ], 
                "tags": [
                    "user"
                ], 
                "x-ntnx-kind": "user", 
                "summary": "Update user"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Retrieved user object", 
                        "schema": {
                            "$ref": "#/definitions/user"
                        }
                    }, 
                    "default": {
                        "description": "Failed to retrieve specified user", 
                        "schema": {
                            "$ref": "#/definitions/user_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "user"
                ], 
                "description": "Retrieves specified user", 
                "x-ntnx-kind": "user", 
                "summary": "Retrieves specified user"
            }
        }, 
        "/versions": {
            "get": {
                "description": "'/versions' returns the api version information\n", 
                "tags": [
                    "versions"
                ], 
                "responses": {
                    "200": {
                        "description": "OK", 
                        "schema": {
                            "$ref": "#/definitions/versions"
                        }
                    }
                }, 
                "summary": "Get details on the api version"
            }
        }, 
        "/vm_backup_profiles": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/vm_backup_profile_status"
                        }
                    }, 
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/vm_backup_profile"
                        }
                    }
                }, 
                "x-ntnx-permissions": [
                    "vm_backup_profile.create"
                ], 
                "description": "Create a VM backup profile", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "request", 
                        "schema": {
                            "$ref": "#/definitions/vm_backup_profile"
                        }
                    }
                ], 
                "tags": [
                    "vm_backup_profile"
                ], 
                "x-ntnx-kind": "vm_backup_profile", 
                "summary": "Create a VM backup profile"
            }
        }, 
        "/vm_backup_profiles/list": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/vm_backup_profile_status"
                        }
                    }, 
                    "200": {
                        "description": "Successful operation", 
                        "schema": {
                            "$ref": "#/definitions/vm_backup_profile_list"
                        }
                    }
                }, 
                "x-ntnx-permissions": [
                    "vm_backup_profile.view"
                ], 
                "description": "Get VM backup profiles", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/vm_backup_profile_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "vm_backup_profile"
                ], 
                "x-ntnx-kind": "vm_backup_profile", 
                "summary": "Get VM backup profiles"
            }
        }, 
        "/vm_backup_profiles/{uuid}": {
            "put": {
                "responses": {
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/vm_backup_profile_status"
                        }
                    }, 
                    "200": {
                        "description": "Success"
                    }
                }, 
                "x-ntnx-permissions": [
                    "vm_backup_profile.update"
                ], 
                "description": "Modify VM backup profile", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "request", 
                        "schema": {
                            "$ref": "#/definitions/vm_backup_profile"
                        }
                    }
                ], 
                "tags": [
                    "vm_backup_profile"
                ], 
                "x-ntnx-kind": "vm_backup_profile", 
                "summary": "Modify VM backup profile"
            }, 
            "get": {
                "responses": {
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/vm_backup_profile_status"
                        }
                    }, 
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/vm_backup_profile"
                        }
                    }
                }, 
                "x-ntnx-permissions": [
                    "vm_backup_profile.view"
                ], 
                "description": "Get details for a VM backup profile", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "vm_backup_profile"
                ], 
                "x-ntnx-kind": "vm_backup_profile", 
                "summary": "Get details for a VM backup profile"
            }, 
            "delete": {
                "responses": {
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/vm_backup_profile_status"
                        }
                    }, 
                    "200": {
                        "description": "Success"
                    }
                }, 
                "x-ntnx-permissions": [
                    "vm_backup_profile.delete"
                ], 
                "description": "Delete a VM backup profile", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "vm_backup_profile"
                ], 
                "x-ntnx-kind": "vm_backup_profile", 
                "summary": "Delete a VM backup profile"
            }
        }, 
        "/vm_backups/list": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/vm_backup_status"
                        }
                    }, 
                    "200": {
                        "description": "Successful operation", 
                        "schema": {
                            "$ref": "#/definitions/vm_backup_list_intent_response"
                        }
                    }
                }, 
                "x-ntnx-permissions": [
                    "vm_backups.view"
                ], 
                "description": "Get kind backups", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/vm_backup_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "vm_backup"
                ], 
                "x-ntnx-kind": "vm_backup", 
                "summary": "Get kind backups"
            }
        }, 
        "/vm_backups/{uuid}": {
            "get": {
                "x-ntnx-permissions": [
                    "vm_backup.read"
                ], 
                "responses": {
                    "200": {
                        "description": "Request succeeded", 
                        "schema": {
                            "$ref": "#/definitions/vm_backup_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/vm_backup_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID Provided", 
                        "schema": {
                            "$ref": "#/definitions/vm_backup_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                        "required": true, 
                        "type": "string", 
                        "name": "uuid", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "vm_backup"
                ], 
                "description": "Given a UUID, returns a kind backup definition", 
                "x-ntnx-kind": "vm_backup", 
                "summary": "Get kind backup"
            }
        }, 
        "/vm_snapshots": {
            "post": {
                "x-ntnx-permissions": [
                    "vm_snapshot.create"
                ], 
                "responses": {
                    "200": {
                        "description": "Request Succeeded", 
                        "schema": {
                            "$ref": "#/definitions/vm_snapshot_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/vm_snapshot_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/vm_snapshot_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "vm_snapshot"
                ], 
                "description": "Given an intentful spec, creates a snapshot with associated metadata\n", 
                "x-ntnx-kind": "vm_snapshot", 
                "summary": "Create kind snapshot"
            }
        }, 
        "/vm_snapshots/list": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/vm_snapshot_status"
                        }
                    }, 
                    "200": {
                        "description": "Successful operation", 
                        "schema": {
                            "$ref": "#/definitions/vm_snapshot_list_intent_response"
                        }
                    }
                }, 
                "x-ntnx-permissions": [
                    "vm_snapshots.view"
                ], 
                "description": "Get kind snapshots", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/vm_snapshot_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "vm_snapshot"
                ], 
                "x-ntnx-kind": "vm_snapshot", 
                "summary": "Get kind snapshots"
            }
        }, 
        "/vm_snapshots/{uuid}": {
            "put": {
                "x-ntnx-permissions": [
                    "vm_snapshot.update"
                ], 
                "responses": {
                    "200": {
                        "description": "Request succeeded", 
                        "schema": {
                            "$ref": "#/definitions/vm_snapshot_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/vm_snapshot_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID Provided", 
                        "schema": {
                            "$ref": "#/definitions/vm_snapshot_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                        "required": true, 
                        "type": "string", 
                        "name": "uuid", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/vm_snapshot_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "vm_snapshot"
                ], 
                "description": "Given an intenful spec and snapshot uuid, update kind snapshot\n", 
                "x-ntnx-kind": "vm_snapshot", 
                "summary": "Update kind snapshot"
            }, 
            "get": {
                "x-ntnx-permissions": [
                    "vm_snapshot.read"
                ], 
                "responses": {
                    "200": {
                        "description": "Request succeeded", 
                        "schema": {
                            "$ref": "#/definitions/vm_snapshot_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/vm_snapshot_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID Provided", 
                        "schema": {
                            "$ref": "#/definitions/vm_snapshot_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                        "required": true, 
                        "type": "string", 
                        "name": "uuid", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "vm_snapshot"
                ], 
                "description": "Given a UUID, returns a kind snapshot definition", 
                "x-ntnx-kind": "vm_snapshot", 
                "summary": "Get kind snapshot"
            }, 
            "delete": {
                "x-ntnx-permissions": [
                    "vm_snapshot.delete"
                ], 
                "responses": {
                    "200": {
                        "description": "Request Succeeded"
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/vm_snapshot_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID Provided", 
                        "schema": {
                            "$ref": "#/definitions/vm_snapshot_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                        "required": true, 
                        "type": "string", 
                        "name": "uuid", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "vm_snapshot"
                ], 
                "description": "Delete a kind snapshot given its uuid", 
                "x-ntnx-kind": "vm_snapshot", 
                "summary": "Delete kind snapshot"
            }
        }, 
        "/vms": {
            "post": {
                "x-ntnx-permissions": [
                    "vm.create", 
                    "virtual_disk.create", 
                    "virtual_nic.create"
                ], 
                "responses": {
                    "200": {
                        "description": "Request Succeeded", 
                        "schema": {
                            "$ref": "#/definitions/vm_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/vm_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/vm_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "vm"
                ], 
                "description": "Given an intentful spec, creates a VM with associated metadata", 
                "x-ntnx-kind": "vm", 
                "summary": "Create VM"
            }
        }, 
        "/vms/list": {
            "post": {
                "x-ntnx-permissions": [
                    "vm.read", 
                    "virtual_disk.read", 
                    "virtual_nic.read"
                ], 
                "responses": {
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/vm_status"
                        }
                    }, 
                    "200": {
                        "description": "Successful operation", 
                        "schema": {
                            "$ref": "#/definitions/vm_list_intent_response"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/vm_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "vm"
                ], 
                "description": "List the VMs with associated metadata", 
                "x-ntnx-kind": "vm", 
                "summary": "List the VMs"
            }
        }, 
        "/vms/{uuid}": {
            "put": {
                "x-ntnx-permissions": [
                    "vm.update", 
                    "virtual_disk.update", 
                    "virtual_nic.update"
                ], 
                "responses": {
                    "200": {
                        "description": "Request Succeeded", 
                        "schema": {
                            "$ref": "#/definitions/vm_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/vm_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID Provided", 
                        "schema": {
                            "$ref": "#/definitions/vm_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "name": "uuid", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/vm_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "vm"
                ], 
                "description": "Given an intenful spec and VM uuid, update VM", 
                "x-ntnx-kind": "vm", 
                "summary": "Update VM"
            }, 
            "get": {
                "x-ntnx-permissions": [
                    "vm.read", 
                    "virtual_disk.read", 
                    "virtual_nic.read"
                ], 
                "responses": {
                    "200": {
                        "description": "Request succeeded", 
                        "schema": {
                            "$ref": "#/definitions/vm_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/vm_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID Provided", 
                        "schema": {
                            "$ref": "#/definitions/vm_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "name": "uuid", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "vm"
                ], 
                "description": "Given a UUID, returns a VM definition", 
                "x-ntnx-kind": "vm", 
                "summary": "Get VM"
            }, 
            "delete": {
                "x-ntnx-permissions": [
                    "vm.delete", 
                    "virtual_disk.delete", 
                    "virtual_nic.delete"
                ], 
                "responses": {
                    "200": {
                        "description": "Request Succeeded"
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/vm_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID Provided", 
                        "schema": {
                            "$ref": "#/definitions/vm_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "name": "uuid", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "vm"
                ], 
                "description": "Delete a VM given its uuid", 
                "x-ntnx-kind": "vm", 
                "summary": "Delete VM"
            }
        }, 
        "/volume_group_backups/list": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/volume_group_backup_status"
                        }
                    }, 
                    "200": {
                        "description": "Successful operation", 
                        "schema": {
                            "$ref": "#/definitions/volume_group_backup_list_intent_response"
                        }
                    }
                }, 
                "x-ntnx-permissions": [
                    "volume_group_backups.view"
                ], 
                "description": "Get kind backups", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/volume_group_backup_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "volume_group_backup"
                ], 
                "x-ntnx-kind": "volume_group_backup", 
                "summary": "Get kind backups"
            }
        }, 
        "/volume_group_backups/{uuid}": {
            "get": {
                "x-ntnx-permissions": [
                    "volume_group_backup.read"
                ], 
                "responses": {
                    "200": {
                        "description": "Request succeeded", 
                        "schema": {
                            "$ref": "#/definitions/volume_group_backup_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/volume_group_backup_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID Provided", 
                        "schema": {
                            "$ref": "#/definitions/volume_group_backup_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                        "required": true, 
                        "type": "string", 
                        "name": "uuid", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "volume_group_backup"
                ], 
                "description": "Given a UUID, returns a kind backup definition", 
                "x-ntnx-kind": "volume_group_backup", 
                "summary": "Get kind backup"
            }
        }, 
        "/volume_group_snapshots": {
            "post": {
                "x-ntnx-permissions": [
                    "volume_group_snapshot.create"
                ], 
                "responses": {
                    "200": {
                        "description": "Request Succeeded", 
                        "schema": {
                            "$ref": "#/definitions/volume_group_snapshot_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/volume_group_snapshot_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/volume_group_snapshot_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "volume_group_snapshot"
                ], 
                "description": "Given an intentful spec, creates a snapshot with associated metadata\n", 
                "x-ntnx-kind": "volume_group_snapshot", 
                "summary": "Create kind snapshot"
            }
        }, 
        "/volume_group_snapshots/list": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/volume_group_snapshot_status"
                        }
                    }, 
                    "200": {
                        "description": "Successful operation", 
                        "schema": {
                            "$ref": "#/definitions/volume_group_snapshot_list_intent_response"
                        }
                    }
                }, 
                "x-ntnx-permissions": [
                    "volume_group_snapshots.view"
                ], 
                "description": "Get kind snapshots", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/volume_group_snapshot_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "volume_group_snapshot"
                ], 
                "x-ntnx-kind": "volume_group_snapshot", 
                "summary": "Get kind snapshots"
            }
        }, 
        "/volume_group_snapshots/{uuid}": {
            "put": {
                "x-ntnx-permissions": [
                    "volume_group_snapshot.update"
                ], 
                "responses": {
                    "200": {
                        "description": "Request succeeded", 
                        "schema": {
                            "$ref": "#/definitions/volume_group_snapshot_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/volume_group_snapshot_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID Provided", 
                        "schema": {
                            "$ref": "#/definitions/volume_group_snapshot_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                        "required": true, 
                        "type": "string", 
                        "name": "uuid", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/volume_group_snapshot_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "volume_group_snapshot"
                ], 
                "description": "Given an intenful spec and snapshot uuid, update kind snapshot\n", 
                "x-ntnx-kind": "volume_group_snapshot", 
                "summary": "Update kind snapshot"
            }, 
            "get": {
                "x-ntnx-permissions": [
                    "volume_group_snapshot.read"
                ], 
                "responses": {
                    "200": {
                        "description": "Request succeeded", 
                        "schema": {
                            "$ref": "#/definitions/volume_group_snapshot_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/volume_group_snapshot_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID Provided", 
                        "schema": {
                            "$ref": "#/definitions/volume_group_snapshot_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                        "required": true, 
                        "type": "string", 
                        "name": "uuid", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "volume_group_snapshot"
                ], 
                "description": "Given a UUID, returns a kind snapshot definition", 
                "x-ntnx-kind": "volume_group_snapshot", 
                "summary": "Get kind snapshot"
            }, 
            "delete": {
                "x-ntnx-permissions": [
                    "volume_group_snapshot.delete"
                ], 
                "responses": {
                    "200": {
                        "description": "Request Succeeded"
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/volume_group_snapshot_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID Provided", 
                        "schema": {
                            "$ref": "#/definitions/volume_group_snapshot_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                        "required": true, 
                        "type": "string", 
                        "name": "uuid", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "volume_group_snapshot"
                ], 
                "description": "Delete a kind snapshot given its uuid", 
                "x-ntnx-kind": "volume_group_snapshot", 
                "summary": "Delete kind snapshot"
            }
        }, 
        "/volume_groups": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Created volume group", 
                        "schema": {
                            "$ref": "#/definitions/volume_group"
                        }
                    }, 
                    "default": {
                        "description": "Failed to create volume group", 
                        "schema": {
                            "$ref": "#/definitions/volume_group_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "description": "Volume group object", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/volume_group"
                        }
                    }
                ], 
                "tags": [
                    "volume_group"
                ], 
                "description": "Creates a volume group", 
                "x-ntnx-kind": "volume_group", 
                "summary": "Creates a volume group"
            }
        }, 
        "/volume_groups/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Retrieved all volume groups", 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/volume_group_list"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "default": {
                        "description": "Failed to retrieve all volume groups", 
                        "schema": {
                            "$ref": "#/definitions/volume_group_status"
                        }
                    }
                }, 
                "tags": [
                    "volume_group"
                ], 
                "description": "Retrieves all volume groups", 
                "x-ntnx-kind": "volume_group", 
                "x-ntnx-ref-keys": [
                    "volume_group_reference", 
                    "volume_group_reference_list"
                ], 
                "summary": "Retrieves all volume groups"
            }
        }, 
        "/volume_groups/{uuid}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Successfully updated specified volume group", 
                        "schema": {
                            "$ref": "#/definitions/volume_group"
                        }
                    }, 
                    "default": {
                        "description": "Failed to updated specified volume group", 
                        "schema": {
                            "$ref": "#/definitions/volume_group_status"
                        }
                    }, 
                    "404": {
                        "description": "Specified volume group does not exist", 
                        "schema": {
                            "$ref": "#/definitions/volume_group_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "description": "Volume group object", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/volume_group"
                        }
                    }
                ], 
                "tags": [
                    "volume_group"
                ], 
                "description": "Updates specified volume group", 
                "x-ntnx-kind": "volume_group", 
                "summary": "Updates specified volume group"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Successfully retrieved specified volume group", 
                        "schema": {
                            "$ref": "#/definitions/volume_group"
                        }
                    }, 
                    "default": {
                        "description": "Failed to retrieve specified volume group", 
                        "schema": {
                            "$ref": "#/definitions/volume_group_status"
                        }
                    }, 
                    "404": {
                        "description": "Specified volume group does not exist", 
                        "schema": {
                            "$ref": "#/definitions/volume_group_status"
                        }
                    }
                }, 
                "description": "Retrieves specified volume group", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "volume_group"
                ], 
                "x-ntnx-kind": "volume_group", 
                "x-ntnx-ref-keys": [
                    "volume_group_reference"
                ], 
                "summary": "Retrieves specified volume group"
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Deleted specified volume group"
                    }, 
                    "default": {
                        "description": "Failed to delete specified volume group", 
                        "schema": {
                            "$ref": "#/definitions/volume_group_status"
                        }
                    }, 
                    "404": {
                        "description": "Specified volume group does not exist", 
                        "schema": {
                            "$ref": "#/definitions/volume_group_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "volume_group"
                ], 
                "description": "Deletes a volume group", 
                "x-ntnx-kind": "volume_group", 
                "summary": "Deletes a volume group"
            }
        }, 
        "/webhooks": {
            "post": {
                "x-ntnx-permissions": [
                    "webhook.create"
                ], 
                "responses": {
                    "200": {
                        "description": "Request succeeded", 
                        "schema": {
                            "$ref": "#/definitions/webhook_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal error", 
                        "schema": {
                            "$ref": "#/definitions/webhook_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/webhook_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "webhook"
                ], 
                "description": "Given an intentful spec, creates a Webhook with associated metadata", 
                "x-ntnx-kind": "webhook", 
                "summary": "Create Webhook"
            }
        }, 
        "/webhooks/list": {
            "post": {
                "x-ntnx-permissions": [
                    "webhook.view"
                ], 
                "responses": {
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/webhook_status"
                        }
                    }, 
                    "200": {
                        "description": "Successful operation", 
                        "schema": {
                            "$ref": "#/definitions/webhook_list_intent_response"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/webhook_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "webhook"
                ], 
                "description": "List the Webhooks with associated metadata", 
                "x-ntnx-kind": "webhook", 
                "summary": "List the webhooks"
            }
        }, 
        "/webhooks/{uuid}": {
            "put": {
                "x-ntnx-permissions": [
                    "webhook.update"
                ], 
                "responses": {
                    "200": {
                        "description": "Request Succeeded", 
                        "schema": {
                            "$ref": "#/definitions/webhook_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal error", 
                        "schema": {
                            "$ref": "#/definitions/webhook_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID Provided", 
                        "schema": {
                            "$ref": "#/definitions/webhook_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "name": "uuid", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/webhook_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "webhook"
                ], 
                "description": "Given an intenful spec and Webhook uuid, update Webhook", 
                "x-ntnx-kind": "webhook", 
                "summary": "Update Webhook"
            }, 
            "get": {
                "x-ntnx-permissions": [
                    "webhook.view"
                ], 
                "responses": {
                    "200": {
                        "description": "Request succeeded", 
                        "schema": {
                            "$ref": "#/definitions/webhook_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/webhook_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID Provided", 
                        "schema": {
                            "$ref": "#/definitions/webhook_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "name": "uuid", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "webhook"
                ], 
                "description": "Given a UUID, returns a webhook definition", 
                "x-ntnx-kind": "webhook", 
                "summary": "Get a webhook"
            }, 
            "delete": {
                "x-ntnx-permissions": [
                    "webhook.delete"
                ], 
                "responses": {
                    "200": {
                        "description": "Request succeeded"
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/webhook_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/webhook_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "name": "uuid", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "webhook"
                ], 
                "description": "Delete a webhook given its uuid", 
                "x-ntnx-kind": "webhook", 
                "summary": "Delete a webhook"
            }
        }, 
        "/workflows": {
            "post": {
                "x-ntnx-permissions": [
                    "workflow.create"
                ], 
                "responses": {
                    "200": {
                        "description": "Request Succeeded", 
                        "schema": {
                            "$ref": "#/definitions/workflow_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/workflow_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Request body", 
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/workflow_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "workflow"
                ], 
                "description": "Given  an intentful spec creates a Workflow with associated metadata", 
                "x-ntnx-kind": "workflow", 
                "summary": "Create Workflow"
            }
        }, 
        "/workflows/list": {
            "post": {
                "x-ntnx-permissions": [
                    "workflow.view"
                ], 
                "responses": {
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/workflow_status"
                        }
                    }, 
                    "200": {
                        "description": "Successful operation", 
                        "schema": {
                            "$ref": "#/definitions/workflow_list_intent_response"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/workflow_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "workflow"
                ], 
                "description": "List the Workflows with associated metadata", 
                "x-ntnx-kind": "workflow", 
                "summary": "List the Workflows"
            }
        }, 
        "/workflows/{uuid}": {
            "put": {
                "x-ntnx-permissions": [
                    "workflow.update"
                ], 
                "responses": {
                    "200": {
                        "description": "Request Succeeded", 
                        "schema": {
                            "$ref": "#/definitions/workflow_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/workflow_status"
                        }
                    }, 
                    "404": {
                        "description": "Entity not found", 
                        "schema": {
                            "$ref": "#/definitions/workflow_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "name": "uuid", 
                        "in": "path", 
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "description": "Uuid of workflow to be updated"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/workflow_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "workflow"
                ], 
                "description": "Given an intenful spec and Workflow UUID, update Workflow", 
                "x-ntnx-kind": "workflow", 
                "summary": "Update Workflow"
            }, 
            "get": {
                "x-ntnx-permissions": [
                    "workflow.view"
                ], 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/workflow_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/workflow_status"
                        }
                    }, 
                    "404": {
                        "description": "Entity not found", 
                        "schema": {
                            "$ref": "#/definitions/workflow_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "name": "uuid", 
                        "in": "path", 
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "description": "Uuid of workflow to get"
                    }
                ], 
                "tags": [
                    "workflow"
                ], 
                "description": "Given a UUID, returns a Workflow definition", 
                "x-ntnx-kind": "workflow", 
                "summary": "Get Workflow"
            }, 
            "patch": {
                "x-ntnx-permissions": [
                    "workflow.update"
                ], 
                "responses": {
                    "200": {
                        "description": "Request Succeeded", 
                        "schema": {
                            "$ref": "#/definitions/workflow_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/workflow_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID Provided", 
                        "schema": {
                            "$ref": "#/definitions/workflow_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "name": "uuid", 
                        "in": "path", 
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "description": "Uuid of workflow to be updated"
                    }, 
                    {
                        "description": "Request body", 
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/workflow_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "workflow"
                ], 
                "description": "Given an intentful spec and Workflow UUID, update Workflow using partial update semantics", 
                "x-ntnx-kind": "workflow", 
                "summary": "Update Workflow (partial)"
            }, 
            "delete": {
                "x-ntnx-permissions": [
                    "workflow.delete"
                ], 
                "responses": {
                    "200": {
                        "description": "Request Succeeded"
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/workflow_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID Provided", 
                        "schema": {
                            "$ref": "#/definitions/workflow_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "name": "uuid", 
                        "in": "path", 
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "description": "Uuid of the workflow to be deleted"
                    }
                ], 
                "tags": [
                    "workflow"
                ], 
                "description": "Delete a Workflow given its UUID", 
                "x-ntnx-kind": "workflow", 
                "summary": "Delete Workflow"
            }
        }
    }, 
    "schemes": [
        "https"
    ], 
    "parameters": {
        "lang": {
            "in": "query", 
            "description": "The language for localization", 
            "format": "string", 
            "required": false, 
            "type": "string", 
            "name": "lang"
        }, 
        "kind": {
            "in": "path", 
            "description": "The kind of the entity.", 
            "format": "string", 
            "required": true, 
            "type": "string", 
            "name": "kind"
        }, 
        "uuid": {
            "in": "path", 
            "description": "The UUID of the entity.", 
            "format": "UUID", 
            "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
            "required": true, 
            "type": "string", 
            "name": "uuid"
        }
    }, 
    "produces": [
        "application/json"
    ], 
    "basePath": "/api/nutanix/v3", 
    "securityDefinitions": {
        "basicAuth": {
            "type": "basic"
        }
    }, 
    "definitions": {
        "account_list_metadata": {
            "title": "Metadata for account list", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "account", 
                    "readOnly": true, 
                    "enum": [
                        "account"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found for the kind"
                }, 
                "sort_column": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "account_metadata": {
            "title": "account metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "type": "string", 
                    "description": "Time when account was last updated"
                }, 
                "kind": {
                    "default": "account", 
                    "readOnly": true, 
                    "enum": [
                        "account"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "account uuid"
                }, 
                "creation_time": {
                    "type": "string", 
                    "description": "Time when account was created"
                }, 
                "account_reference": {
                    "$ref": "#/definitions/account_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the account"
                }, 
                "parent_reference": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "If present, spec was copied from the referenced entity. Could have\nbeen a live entity, backup, snapshot or template entity. This field\nis special as it is the only field in metadata that is modifiable by\nthe user in case of template-based upgrades and in-place reverts.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "entity_version": {
                    "type": "integer", 
                    "description": "Monotonically increasing number"
                }, 
                "name": {
                    "type": "string", 
                    "description": "account name", 
                    "maxLength": 140
                }
            }, 
            "description": "The account kind metadata"
        }, 
        "account_reference": {
            "title": "Reference to a account", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "account", 
                    "readOnly": true, 
                    "enum": [
                        "account"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "name": {
                    "type": "string", 
                    "maxLength": 140
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string"
                }
            }, 
            "description": "The reference to a account"
        }, 
        "account_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "status": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "Only value possible is \"failure\"."
                }, 
                "kind": {
                    "default": "account", 
                    "readOnly": true, 
                    "enum": [
                        "account"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "details": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "readOnly": true, 
                    "type": "object", 
                    "description": "Custom key-value details relevant to the status."
                }, 
                "message": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "A sentence explaining the reason for the status."
                }, 
                "reason": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "One snake_case word."
                }, 
                "api_version": {
                    "readOnly": true, 
                    "type": "string"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "api_request": {
            "title": "Api request", 
            "required": [
                "path_and_params", 
                "operation"
            ], 
            "type": "object", 
            "properties": {
                "body": {
                    "additionalProperties": {
                        "type": "object"
                    }, 
                    "type": "object", 
                    "description": "API request intent spec"
                }, 
                "operation": {
                    "enum": [
                        "DELETE", 
                        "GET", 
                        "HEAD", 
                        "PATCH", 
                        "POST", 
                        "PUT"
                    ], 
                    "type": "string", 
                    "description": "REST verbs"
                }, 
                "path_and_params": {
                    "type": "string", 
                    "description": "Part of request url that consists of path, query etc"
                }
            }, 
            "description": "Api request"
        }, 
        "api_response": {
            "title": "API response", 
            "required": [
                "path_and_params", 
                "api_response", 
                "status"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "type": "string"
                }, 
                "api_response": {
                    "additionalProperties": {
                        "type": "object"
                    }, 
                    "type": "object"
                }, 
                "path_and_params": {
                    "type": "string", 
                    "description": "same as api_request path_and_params value"
                }
            }, 
            "description": "API Response"
        }, 
        "attribute": {
            "title": "Directory service Search attributes response", 
            "type": "object", 
            "properties": {
                "attribute_values": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "value of the attribute"
                }, 
                "attribute_name": {
                    "type": "string", 
                    "description": "name of the attribute"
                }
            }, 
            "description": "Directory service Search attributes response"
        }, 
        "availability_zone": {
            "title": "Create availability zone request", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/availability_zone_resources"
                }, 
                "spec": {
                    "$ref": "#/definitions/availability_zone_resources"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/availability_zone_metadata"
                }
            }, 
            "description": "Request to make an availability zone"
        }, 
        "availability_zone_list": {
            "title": "Availability zone entity list", 
            "required": [
                "metadata", 
                "api_version", 
                "entities"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/availability_zone_resources"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/availability_zone_list_metadata"
                }
            }, 
            "description": "Availability zone entity list"
        }, 
        "availability_zone_list_metadata": {
            "title": "Metadata for availability_zone list", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "availability_zone", 
                    "readOnly": true, 
                    "enum": [
                        "availability_zone"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found for the kind"
                }, 
                "sort_column": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "availability_zone_metadata": {
            "title": "availability_zone metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "type": "string", 
                    "description": "Time when availability_zone was last updated"
                }, 
                "kind": {
                    "default": "availability_zone", 
                    "readOnly": true, 
                    "enum": [
                        "availability_zone"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "availability_zone uuid"
                }, 
                "creation_time": {
                    "type": "string", 
                    "description": "Time when availability_zone was created"
                }, 
                "account_reference": {
                    "$ref": "#/definitions/account_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the availability_zone"
                }, 
                "parent_reference": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "If present, spec was copied from the referenced entity. Could have\nbeen a live entity, backup, snapshot or template entity. This field\nis special as it is the only field in metadata that is modifiable by\nthe user in case of template-based upgrades and in-place reverts.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "entity_version": {
                    "type": "integer", 
                    "description": "Monotonically increasing number"
                }, 
                "name": {
                    "type": "string", 
                    "description": "availability_zone name", 
                    "maxLength": 140
                }
            }, 
            "description": "The availability_zone kind metadata"
        }, 
        "availability_zone_reference": {
            "title": "Reference to a availability_zone", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "availability_zone", 
                    "readOnly": true, 
                    "enum": [
                        "availability_zone"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "name": {
                    "type": "string", 
                    "maxLength": 140
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string"
                }
            }, 
            "description": "The reference to a availability_zone"
        }, 
        "availability_zone_resources": {
            "title": "Availability Zone creation/modification spec", 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Availability Zone Name"
                }, 
                "resources": {
                    "required": [
                        "management_url", 
                        "management_plane_type"
                    ], 
                    "type": "object", 
                    "properties": {
                        "management_url": {
                            "type": "string", 
                            "description": "Identifier of the management plane. This could be the URL of the\nPC or the FQDN of Xi portal.\n"
                        }, 
                        "region": {
                            "type": "string", 
                            "description": "Cloud region where the data will be replicated to. Based on the\ncloud provider type the available list of regions will differ.\n"
                        }, 
                        "container_mapping": {
                            "items": {
                                "properties": {
                                    "source_storage_container_name": {
                                        "type": "string", 
                                        "description": "Name of the storage container on the source cluster\n"
                                    }, 
                                    "source_cluster_uuid": {
                                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                                        "type": "string", 
                                        "description": "Source cluster where the entity is present"
                                    }, 
                                    "remote_cluster_uuid": {
                                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                                        "type": "string", 
                                        "description": "Source cluster where the entity is present"
                                    }, 
                                    "remote_storage_container_name": {
                                        "type": "string", 
                                        "description": "Name of the storage container on the remote cluster\n"
                                    }
                                }
                            }, 
                            "type": "array", 
                            "description": "Mapping of storage container names on the local cluster to the\nstorage container names on the remote cluster. Data will be\nreplicated to the remote cluster accordingly. If a mapping for a\nlocal storage container name doesn't exist here, it'll be assumed\nthat the data needs to be replicated to a similarly named storage\ncontainer on the remote cluster.\n"
                        }, 
                        "management_plane_type": {
                            "enum": [
                                "PC", 
                                "Xi", 
                                "AWS", 
                                "Azure"
                            ], 
                            "type": "string", 
                            "description": "This defines the type of management entity. Its value can be Xi,\nPC, AWS or Azure. How to talk to management entity will be\ndecided based on the type of management plane.\n"
                        }, 
                        "credentials": {
                            "type": "object", 
                            "description": "Credentials required to connect to the management plane.\n", 
                            "properties": {
                                "access_key": {
                                    "type": "string", 
                                    "description": "Access key for AWS, or subscription id for Azure.\n"
                                }, 
                                "secret_key": {
                                    "type": "string", 
                                    "description": "Secret key for AWS.\n"
                                }, 
                                "certificate_path": {
                                    "type": "string", 
                                    "description": "Full file path of the Azure client certificate\nfile(<file_name>.pem).\n"
                                }
                            }
                        }
                    }, 
                    "title": "Availability zone resource"
                }
            }, 
            "description": "Availability Zone creation/modification spec"
        }, 
        "availability_zone_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "status": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "Only value possible is \"failure\"."
                }, 
                "kind": {
                    "default": "availability_zone", 
                    "readOnly": true, 
                    "enum": [
                        "availability_zone"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "details": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "readOnly": true, 
                    "type": "object", 
                    "description": "Custom key-value details relevant to the status."
                }, 
                "message": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "A sentence explaining the reason for the status."
                }, 
                "reason": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "One snake_case word."
                }, 
                "api_version": {
                    "readOnly": true, 
                    "type": "string"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "available_extension": {
            "title": "Available extension manifest information", 
            "required": [
                "name", 
                "description", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Extension name", 
                    "maxLength": 140
                }, 
                "resources": {
                    "$ref": "#/definitions/available_extension_resources"
                }, 
                "description": {
                    "type": "string", 
                    "description": "Extension description", 
                    "maxLength": 1000
                }
            }, 
            "description": "Available extension manifest information"
        }, 
        "available_extension_def_status": {
            "title": "Available extension status definition", 
            "required": [
                "name", 
                "description", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Extension name", 
                    "maxLength": 140
                }, 
                "resources": {
                    "$ref": "#/definitions/available_extension_resources"
                }, 
                "description": {
                    "type": "string", 
                    "description": "Extension description", 
                    "maxLength": 1000
                }
            }, 
            "description": "Available extension status definition"
        }, 
        "available_extension_intent_input": {
            "title": "available_extension Intent Entity", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "metadata": {
                    "$ref": "#/definitions/available_extension_metadata"
                }, 
                "spec": {
                    "$ref": "#/definitions/available_extension"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "options": {
                    "$ref": "#/definitions/options"
                }
            }, 
            "description": "An intentful representation of a available_extension"
        }, 
        "available_extension_intent_resource": {
            "title": "available_extension Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/available_extension_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/available_extension"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/available_extension_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a available_extension"
        }, 
        "available_extension_intent_response": {
            "title": "available_extension Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/available_extension_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/available_extension"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/available_extension_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a available_extension"
        }, 
        "available_extension_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/available_extension_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/available_extension_list_metadata"
                }
            }, 
            "description": "Response object for intentful operation of available_extensions"
        }, 
        "available_extension_list_metadata": {
            "title": "Metadata for available_extension list", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "available_extension", 
                    "readOnly": true, 
                    "enum": [
                        "available_extension"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found for the kind"
                }, 
                "sort_column": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "available_extension_metadata": {
            "title": "available_extension metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "type": "string", 
                    "description": "Time when available_extension was last updated"
                }, 
                "kind": {
                    "default": "available_extension", 
                    "readOnly": true, 
                    "enum": [
                        "available_extension"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "available_extension uuid"
                }, 
                "creation_time": {
                    "type": "string", 
                    "description": "Time when available_extension was created"
                }, 
                "account_reference": {
                    "$ref": "#/definitions/account_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the available_extension"
                }, 
                "parent_reference": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "If present, spec was copied from the referenced entity. Could have\nbeen a live entity, backup, snapshot or template entity. This field\nis special as it is the only field in metadata that is modifiable by\nthe user in case of template-based upgrades and in-place reverts.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "entity_version": {
                    "type": "integer", 
                    "description": "Monotonically increasing number"
                }, 
                "name": {
                    "type": "string", 
                    "description": "available_extension name", 
                    "maxLength": 140
                }
            }, 
            "description": "The available_extension kind metadata"
        }, 
        "available_extension_reference": {
            "title": "Reference to a available_extension", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "available_extension", 
                    "readOnly": true, 
                    "enum": [
                        "available_extension"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "name": {
                    "type": "string", 
                    "maxLength": 140
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string"
                }
            }, 
            "description": "The reference to a available_extension"
        }, 
        "available_extension_resources": {
            "title": "Available Extension resources", 
            "required": [
                "name", 
                "version", 
                "description", 
                "company", 
                "icon_image_uuid"
            ], 
            "type": "object", 
            "properties": {
                "container_image_name": {
                    "type": "string", 
                    "description": "Containter image name"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of extension", 
                    "maxLength": 140
                }, 
                "screen_shot_uuids": {
                    "items": {
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "type": "string", 
                        "description": "screen shot image uuid4"
                    }, 
                    "type": "array", 
                    "description": "Screen shot image uuid list"
                }, 
                "company": {
                    "type": "string", 
                    "description": "Company which developed the extension"
                }, 
                "description": {
                    "type": "string", 
                    "description": "Description", 
                    "maxLength": 1000
                }, 
                "container_port": {
                    "type": "integer", 
                    "description": "Port at which container service is running"
                }, 
                "internal_name": {
                    "type": "string", 
                    "description": "Internal name of extension"
                }, 
                "oauth_scopes": {
                    "items": {
                        "type": "string", 
                        "description": "oauth scope"
                    }, 
                    "type": "array", 
                    "description": "list of oauth scopes"
                }, 
                "registry_uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "UUID for registry where container image is stored"
                }, 
                "version": {
                    "type": "string", 
                    "description": "Version string"
                }, 
                "container_image_tag": {
                    "type": "string", 
                    "description": "Continater image tag"
                }, 
                "document_root": {
                    "type": "string", 
                    "description": "Document root for landing page of extension"
                }, 
                "multi_user_app": {
                    "default": false, 
                    "type": "boolean", 
                    "description": "Used only when same instance of app is used for all users"
                }, 
                "icon_image_uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "Icon image uuid4"
                }, 
                "container_spec": {
                    "$ref": "#/definitions/extension_container_options"
                }
            }, 
            "description": "Available Extension resources"
        }, 
        "available_extension_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "status": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "Only value possible is \"failure\"."
                }, 
                "kind": {
                    "default": "available_extension", 
                    "readOnly": true, 
                    "enum": [
                        "available_extension"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "details": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "readOnly": true, 
                    "type": "object", 
                    "description": "Custom key-value details relevant to the status."
                }, 
                "message": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "A sentence explaining the reason for the status."
                }, 
                "reason": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "One snake_case word."
                }, 
                "api_version": {
                    "readOnly": true, 
                    "type": "string"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "batch_list_metadata": {
            "title": "Metadata for batch list", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "batch", 
                    "readOnly": true, 
                    "enum": [
                        "batch"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found for the kind"
                }, 
                "sort_column": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "batch_metadata": {
            "title": "batch metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "type": "string", 
                    "description": "Time when batch was last updated"
                }, 
                "kind": {
                    "default": "batch", 
                    "readOnly": true, 
                    "enum": [
                        "batch"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "batch uuid"
                }, 
                "creation_time": {
                    "type": "string", 
                    "description": "Time when batch was created"
                }, 
                "account_reference": {
                    "$ref": "#/definitions/account_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the batch"
                }, 
                "parent_reference": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "If present, spec was copied from the referenced entity. Could have\nbeen a live entity, backup, snapshot or template entity. This field\nis special as it is the only field in metadata that is modifiable by\nthe user in case of template-based upgrades and in-place reverts.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "entity_version": {
                    "type": "integer", 
                    "description": "Monotonically increasing number"
                }, 
                "name": {
                    "type": "string", 
                    "description": "batch name", 
                    "maxLength": 140
                }
            }, 
            "description": "The batch kind metadata"
        }, 
        "batch_reference": {
            "title": "Reference to a batch", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "batch", 
                    "readOnly": true, 
                    "enum": [
                        "batch"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "name": {
                    "type": "string", 
                    "maxLength": 140
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string"
                }
            }, 
            "description": "The reference to a batch"
        }, 
        "batch_request": {
            "title": "Batch request", 
            "required": [
                "api_version", 
                "api_request_list", 
                "continue_on_failure"
            ], 
            "type": "object", 
            "properties": {
                "continue_on_failure": {
                    "default": true, 
                    "type": "boolean", 
                    "description": "If true - continue processing remaining APIs in the list"
                }, 
                "api_request_list": {
                    "items": {
                        "$ref": "#/definitions/api_request"
                    }, 
                    "type": "array", 
                    "description": "Intent api list"
                }, 
                "api_version": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "execute_order": {
                    "default": "SEQUENTIAL", 
                    "enum": [
                        "SEQUENTIAL", 
                        "NON_SEQUENTIAL"
                    ], 
                    "type": "string", 
                    "description": "Determines whether the API execution proceeds sequentially or not"
                }
            }, 
            "description": "Batch request"
        }, 
        "batch_response": {
            "title": "Batch api success response", 
            "type": "object", 
            "properties": {
                "api_response_list": {
                    "items": {
                        "$ref": "#/definitions/api_response"
                    }, 
                    "type": "array"
                }
            }, 
            "description": "List of results of each intent api_request"
        }, 
        "batch_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "status": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "Only value possible is \"failure\"."
                }, 
                "kind": {
                    "default": "batch", 
                    "readOnly": true, 
                    "enum": [
                        "batch"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "details": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "readOnly": true, 
                    "type": "object", 
                    "description": "Custom key-value details relevant to the status."
                }, 
                "message": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "A sentence explaining the reason for the status."
                }, 
                "reason": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "One snake_case word."
                }, 
                "api_version": {
                    "readOnly": true, 
                    "type": "string"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "build_info": {
            "title": "Cluter build details", 
            "required": [
                "build_type", 
                "version", 
                "commit_id", 
                "short_commit_id", 
                "commit_date"
            ], 
            "type": "object", 
            "properties": {
                "commit_id": {
                    "type": "string", 
                    "description": "Last Git commit id which the build is based on"
                }, 
                "version": {
                    "type": "string", 
                    "description": "Version string in format <code_name>-<version_numbers>-<branch_type>,\ni.e master, danube-4.5.0.2-stable\n"
                }, 
                "short_commit_id": {
                    "type": "string", 
                    "description": "First 6 characters of the last Git commit id"
                }, 
                "commit_date": {
                    "type": "string", 
                    "description": "Date/time of the last commit"
                }, 
                "build_type": {
                    "type": "string", 
                    "description": "Build type, one of {dbg, opt, release}"
                }
            }, 
            "description": "Cluter build details"
        }, 
        "ca_cert": {
            "title": "CA certificate info", 
            "required": [
                "ca_name", 
                "certificate"
            ], 
            "type": "object", 
            "properties": {
                "ca_name": {
                    "type": "string", 
                    "description": "Name of the certificate authority"
                }, 
                "certificate": {
                    "type": "string", 
                    "description": "Certificate content", 
                    "format": "byte"
                }
            }, 
            "description": "CA certificate info"
        }, 
        "ca_chain_spec": {
            "title": "CA chain spec", 
            "required": [
                "name", 
                "ca_chain"
            ], 
            "type": "object", 
            "properties": {
                "ca_chain": {
                    "type": "string", 
                    "description": "Content of CA chain", 
                    "format": "byte"
                }, 
                "name": {
                    "type": "string", 
                    "description": "The name of the CA Chain file"
                }
            }, 
            "description": "CA chain spec"
        }, 
        "catalog": {
            "title": "Create catalog request", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/catalog_resources"
                }, 
                "spec": {
                    "$ref": "#/definitions/catalog_resources"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/catalog_metadata"
                }
            }, 
            "description": "Request to make a catalog item"
        }, 
        "catalog_generic_key_value_pair": {
            "title": "Generic key value pair", 
            "properties": {
                "key": {
                    "type": "string"
                }, 
                "value": {
                    "type": "string"
                }
            }, 
            "description": "Generic key value pair used for metadata store"
        }, 
        "catalog_image_template": {
            "title": "Catalog Image template item spec", 
            "properties": {
                "image_type": {
                    "$ref": "#/definitions/catalog_image_type"
                }, 
                "image_uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string"
                }
            }, 
            "description": "Image template"
        }, 
        "catalog_image_type": {
            "enum": [
                "DISK_IMAGE", 
                "ISO_IMAGE"
            ], 
            "type": "string", 
            "description": "Type of the image", 
            "title": "Image type"
        }, 
        "catalog_list": {
            "title": "Catalog entity list", 
            "required": [
                "metadata", 
                "api_version", 
                "entities"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/catalog"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/catalog_list_metadata"
                }
            }, 
            "description": "Catalog item entity list"
        }, 
        "catalog_list_metadata": {
            "title": "Metadata for catalog list", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "catalog", 
                    "readOnly": true, 
                    "enum": [
                        "catalog"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found for the kind"
                }, 
                "sort_column": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "catalog_metadata": {
            "title": "catalog metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "type": "string", 
                    "description": "Time when catalog was last updated"
                }, 
                "kind": {
                    "default": "catalog", 
                    "readOnly": true, 
                    "enum": [
                        "catalog"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "catalog uuid"
                }, 
                "creation_time": {
                    "type": "string", 
                    "description": "Time when catalog was created"
                }, 
                "account_reference": {
                    "$ref": "#/definitions/account_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the catalog"
                }, 
                "parent_reference": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "If present, spec was copied from the referenced entity. Could have\nbeen a live entity, backup, snapshot or template entity. This field\nis special as it is the only field in metadata that is modifiable by\nthe user in case of template-based upgrades and in-place reverts.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "entity_version": {
                    "type": "integer", 
                    "description": "Monotonically increasing number"
                }, 
                "name": {
                    "type": "string", 
                    "description": "catalog name", 
                    "maxLength": 140
                }
            }, 
            "description": "The catalog kind metadata"
        }, 
        "catalog_metadata_store": {
            "items": {
                "$ref": "#/definitions/catalog_generic_key_value_pair"
            }, 
            "type": "array", 
            "description": "Generic key value pair metadata", 
            "title": "Metadata store"
        }, 
        "catalog_network_template": {
            "title": "Catalog Network template item spec", 
            "properties": {
                "network_uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string"
                }, 
                "vlan_id": {
                    "type": "integer", 
                    "format": "int32"
                }
            }, 
            "description": "Network template"
        }, 
        "catalog_reference": {
            "title": "Reference to a catalog", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "catalog", 
                    "readOnly": true, 
                    "enum": [
                        "catalog"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "name": {
                    "type": "string", 
                    "maxLength": 140
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string"
                }
            }, 
            "description": "The reference to a catalog"
        }, 
        "catalog_resources": {
            "title": "Catalog creation/modification spec", 
            "required": [
                "name"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Catalog item name", 
                    "maxLength": 140
                }, 
                "resources": {
                    "required": [
                        "item_type"
                    ], 
                    "type": "object", 
                    "properties": {
                        "image_type": {
                            "enum": [
                                "DISK_IMAGE", 
                                "ISO_IMAGE"
                            ], 
                            "type": "string"
                        }, 
                        "memory_size_mb": {
                            "type": "integer", 
                            "format": "int64"
                        }, 
                        "num_vcpus": {
                            "type": "integer", 
                            "format": "int64"
                        }, 
                        "item_type": {
                            "enum": [
                                "IMAGE", 
                                "VM", 
                                "TEMPLATE"
                            ], 
                            "type": "string"
                        }, 
                        "virtual_disk_list": {
                            "items": {
                                "$ref": "#/definitions/virtual_disk"
                            }, 
                            "type": "array", 
                            "description": "Virtual Disks attached to the VM"
                        }, 
                        "template": {
                            "$ref": "#/definitions/catalog_template_item"
                        }, 
                        "image_size": {
                            "type": "integer", 
                            "format": "int64"
                        }, 
                        "vm_reference": {
                            "$ref": "#/definitions/vm_reference"
                        }, 
                        "image_reference": {
                            "$ref": "#/definitions/image_reference"
                        }
                    }, 
                    "title": "Catalog item resource"
                }, 
                "description": {
                    "type": "string", 
                    "description": "A description for the catalog item", 
                    "maxLength": 1000
                }
            }, 
            "description": "Catalog item creation/modification spec"
        }, 
        "catalog_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "status": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "Only value possible is \"failure\"."
                }, 
                "kind": {
                    "default": "catalog", 
                    "readOnly": true, 
                    "enum": [
                        "catalog"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "details": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "readOnly": true, 
                    "type": "object", 
                    "description": "Custom key-value details relevant to the status."
                }, 
                "message": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "A sentence explaining the reason for the status."
                }, 
                "reason": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "One snake_case word."
                }, 
                "api_version": {
                    "readOnly": true, 
                    "type": "string"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "catalog_storage_template": {
            "title": "Catalog Storage template item spec", 
            "properties": {
                "storage_container_uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string"
                }, 
                "storage_container_name": {
                    "type": "string"
                }
            }, 
            "description": "Storage template"
        }, 
        "catalog_template_item": {
            "title": "Catalog template item spec", 
            "type": "object", 
            "properties": {
                "network_template": {
                    "$ref": "#/definitions/catalog_network_template"
                }, 
                "vm_template": {
                    "$ref": "#/definitions/catalog_vm_template"
                }, 
                "storage_template": {
                    "$ref": "#/definitions/catalog_storage_template"
                }, 
                "image_template": {
                    "$ref": "#/definitions/catalog_image_template"
                }, 
                "volume_template": {
                    "$ref": "#/definitions/catalog_volume_template"
                }, 
                "metadata_store": {
                    "$ref": "#/definitions/catalog_metadata_store"
                }
            }, 
            "description": "Template item"
        }, 
        "catalog_vm_template": {
            "title": "Catalog VM template item spec", 
            "properties": {
                "memory_size_mb": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "num_vcpus": {
                    "type": "integer", 
                    "format": "int32"
                }
            }, 
            "description": "VM template"
        }, 
        "catalog_volume_template": {
            "title": "Catalog Volume template item spec", 
            "properties": {
                "volume_uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string"
                }
            }, 
            "description": "Volume template"
        }, 
        "category": {
            "title": "Category Input Definition", 
            "required": [
                "name"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Name of the category", 
                    "maxLength": 140
                }, 
                "allowed_values": {
                    "items": {
                        "$ref": "#/definitions/category_value"
                    }, 
                    "type": "array", 
                    "description": "List of allowed values for category"
                }
            }, 
            "description": "Category input definition object"
        }, 
        "category_intent_input": {
            "title": "Category Intent Entity", 
            "required": [
                "api_version"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "type": "object", 
                    "properties": {
                        "resources": {
                            "$ref": "#/definitions/category"
                        }
                    }
                }, 
                "api_version": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "Api version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/category_metadata"
                }
            }, 
            "description": "An intentful representation of a Category"
        }, 
        "category_intent_response": {
            "title": "Category Intent Response", 
            "required": [
                "api_version"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "type": "object", 
                    "properties": {
                        "resources": {
                            "$ref": "#/definitions/category_resource_status"
                        }
                    }
                }, 
                "spec": {
                    "type": "object", 
                    "properties": {
                        "resources": {
                            "$ref": "#/definitions/category"
                        }
                    }
                }, 
                "api_version": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "Api version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/category_metadata"
                }
            }, 
            "description": "Response object for intentnful operations on a Category"
        }, 
        "category_list_metadata": {
            "title": "Metadata for category list", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "category", 
                    "readOnly": true, 
                    "enum": [
                        "category"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found for the kind"
                }, 
                "sort_column": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "category_list_response": {
            "title": "Category List Response", 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/category_value_intent_response"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "type": "string", 
                    "description": "Api Version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/category_list_metadata"
                }
            }, 
            "description": "Response contianing list of categories"
        }, 
        "category_metadata": {
            "title": "category metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "type": "string", 
                    "description": "Time when category was last updated"
                }, 
                "kind": {
                    "default": "category", 
                    "readOnly": true, 
                    "enum": [
                        "category"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "category uuid"
                }, 
                "creation_time": {
                    "type": "string", 
                    "description": "Time when category was created"
                }, 
                "account_reference": {
                    "$ref": "#/definitions/account_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the category"
                }, 
                "parent_reference": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "If present, spec was copied from the referenced entity. Could have\nbeen a live entity, backup, snapshot or template entity. This field\nis special as it is the only field in metadata that is modifiable by\nthe user in case of template-based upgrades and in-place reverts.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "entity_version": {
                    "type": "integer", 
                    "description": "Monotonically increasing number"
                }, 
                "name": {
                    "type": "string", 
                    "description": "category name", 
                    "maxLength": 140
                }
            }, 
            "description": "The category kind metadata"
        }, 
        "category_reference": {
            "title": "Reference to a category", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "category", 
                    "readOnly": true, 
                    "enum": [
                        "category"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "name": {
                    "type": "string", 
                    "maxLength": 140
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string"
                }
            }, 
            "description": "The reference to a category"
        }, 
        "category_resource_status": {
            "title": "Category object status", 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Name of the category", 
                    "maxLength": 140
                }, 
                "allowed_values": {
                    "items": {
                        "$ref": "#/definitions/category_value"
                    }, 
                    "type": "array", 
                    "description": "List of allowed values for category"
                }
            }, 
            "description": "Category object status"
        }, 
        "category_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "status": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "Only value possible is \"failure\"."
                }, 
                "kind": {
                    "default": "category", 
                    "readOnly": true, 
                    "enum": [
                        "category"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "details": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "readOnly": true, 
                    "type": "object", 
                    "description": "Custom key-value details relevant to the status."
                }, 
                "message": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "A sentence explaining the reason for the status."
                }, 
                "reason": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "One snake_case word."
                }, 
                "api_version": {
                    "readOnly": true, 
                    "type": "string"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "category_value": {
            "title": "Category value definition", 
            "required": [
                "value"
            ], 
            "type": "object", 
            "properties": {
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "Uuid of the category value"
                }, 
                "value": {
                    "type": "string", 
                    "description": "name of the category value."
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the category", 
                    "maxLength": 140
                }
            }, 
            "description": "Category value input object"
        }, 
        "category_value_intent_input": {
            "title": "Category value", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "type": "object", 
                    "properties": {
                        "resources": {
                            "$ref": "#/definitions/category_value"
                        }
                    }
                }, 
                "api_version": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "Api version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/category_metadata"
                }
            }, 
            "description": "An intentful representation of a Category value"
        }, 
        "category_value_intent_response": {
            "title": "Category Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "type": "object", 
                    "properties": {
                        "resources": {
                            "$ref": "#/definitions/category_value"
                        }
                    }
                }, 
                "spec": {
                    "type": "object", 
                    "properties": {
                        "resources": {
                            "$ref": "#/definitions/category_value"
                        }
                    }
                }, 
                "api_version": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "Api version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/category_metadata"
                }
            }, 
            "description": "Response object for intentnful operations on a Category"
        }, 
        "certificate": {
            "title": "Certificate content", 
            "required": [
                "content"
            ], 
            "type": "object", 
            "properties": {
                "content": {
                    "type": "string", 
                    "description": "Certificate content", 
                    "format": "byte"
                }
            }, 
            "description": "Certificate content"
        }, 
        "certificate_spec": {
            "title": "Certificate info", 
            "required": [
                "certificate"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Certificate file name"
                }, 
                "certificate": {
                    "type": "string", 
                    "description": "Certificate content", 
                    "format": "byte"
                }
            }, 
            "description": "Certificate info"
        }, 
        "certificate_spec_list": {
            "title": "List of cetificate spec", 
            "required": [
                "specs"
            ], 
            "type": "object", 
            "properties": {
                "specs": {
                    "items": {
                        "$ref": "#/definitions/certificate_spec"
                    }, 
                    "type": "array", 
                    "description": "List of certificate specs"
                }
            }, 
            "description": "List of certificate spec"
        }, 
        "certification_signing_info": {
            "title": "Customer information in Certificate Signing Request", 
            "type": "object", 
            "properties": {
                "city": {
                    "type": "string", 
                    "description": "The Town or City where customer's business is located"
                }, 
                "state": {
                    "type": "string", 
                    "description": "The Province, Region, County or State where customer business is\nis located\n"
                }, 
                "country_code": {
                    "type": "string", 
                    "description": "Two-letter ISO code for Country where customer's organization is\nlocated\n"
                }, 
                "common_name": {
                    "type": "string", 
                    "description": "Common name of the organization or host server"
                }, 
                "organization": {
                    "type": "string", 
                    "description": "Name of the customer business"
                }, 
                "email_address": {
                    "type": "string", 
                    "description": "Email address of the certificate administrator"
                }, 
                "common_name_suffix": {
                    "type": "string", 
                    "description": "Common name is by default <node_uuid>.nutanix.com, but if a customer\nwants something instead of nutanix.com they can specify it here.\n"
                }
            }, 
            "description": "Customer information used in Certificate Signing Request for\ncreating digital certificates\n"
        }, 
        "changed_regions": {
            "title": "Changed regions", 
            "required": [
                "file_size"
            ], 
            "type": "object", 
            "properties": {
                "regions": {
                    "items": {
                        "$ref": "#/definitions/region"
                    }, 
                    "type": "array", 
                    "description": "List of regions describing the change for the interval [start_offset, next_offset).\n"
                }, 
                "next_offset": {
                    "type": "integer", 
                    "description": "The offset from where the client must continue the request. This field will not be set when there are no more changed regions to be returned. Note that the next_offset can be outside the endOffset specified by the client in the request. This helps clients reach the next changed offset faster.\n", 
                    "format": "int64"
                }, 
                "file_size": {
                    "type": "integer", 
                    "description": "Size of the file specified by snapshot_file_path.", 
                    "format": "int64"
                }
            }, 
            "description": "Returns information about all the regions that have changed in the interval: [start_offset, next_offset).\n"
        }, 
        "changed_regions_list_metadata": {
            "title": "Metadata for changed_regions list", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "changed_regions", 
                    "readOnly": true, 
                    "enum": [
                        "changed_regions"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found for the kind"
                }, 
                "sort_column": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "changed_regions_metadata": {
            "title": "changed_regions metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "type": "string", 
                    "description": "Time when changed_regions was last updated"
                }, 
                "kind": {
                    "default": "changed_regions", 
                    "readOnly": true, 
                    "enum": [
                        "changed_regions"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "changed_regions uuid"
                }, 
                "creation_time": {
                    "type": "string", 
                    "description": "Time when changed_regions was created"
                }, 
                "account_reference": {
                    "$ref": "#/definitions/account_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the changed_regions"
                }, 
                "parent_reference": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "If present, spec was copied from the referenced entity. Could have\nbeen a live entity, backup, snapshot or template entity. This field\nis special as it is the only field in metadata that is modifiable by\nthe user in case of template-based upgrades and in-place reverts.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "entity_version": {
                    "type": "integer", 
                    "description": "Monotonically increasing number"
                }, 
                "name": {
                    "type": "string", 
                    "description": "changed_regions name", 
                    "maxLength": 140
                }
            }, 
            "description": "The changed_regions kind metadata"
        }, 
        "changed_regions_query": {
            "title": "Changed Regions Query", 
            "required": [
                "snapshot_file_path"
            ], 
            "type": "object", 
            "properties": {
                "end_offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "The absolute offset in bytes up to which to query for the changed regions. Note that the interval specified by the start_offset together with the end_offset is right half-open. If the end_offset is not specified, the portion from the start_offset till the end of the file will be included in the query.\n", 
                    "format": "int64"
                }, 
                "snapshot_file_path": {
                    "type": "string", 
                    "description": "Absolute path of a file within a snapshot of an entity such as a virtual machine, a volume group or a protection domain.\n"
                }, 
                "start_offset": {
                    "default": 0, 
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "The absolute offset in bytes from where to query for the changed regions.\n", 
                    "format": "int64"
                }, 
                "reference_snapshot_file_path": {
                    "type": "string", 
                    "description": "Absolute path of a file within a snapshot that must be used as the reference in the computation of the changed regions. If this path is not specified, then the changed regions will not be computed. Instead, the sparse and the non-sparse regions of the file specified in snapshot_file_path will be returned.\n"
                }
            }, 
            "description": "Instances of this type are used to specify the input for the changed regions query.\n"
        }, 
        "changed_regions_reference": {
            "title": "Reference to a changed_regions", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "changed_regions", 
                    "readOnly": true, 
                    "enum": [
                        "changed_regions"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "name": {
                    "type": "string", 
                    "maxLength": 140
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string"
                }
            }, 
            "description": "The reference to a changed_regions"
        }, 
        "changed_regions_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "status": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "Only value possible is \"failure\"."
                }, 
                "kind": {
                    "default": "changed_regions", 
                    "readOnly": true, 
                    "enum": [
                        "changed_regions"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "details": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "readOnly": true, 
                    "type": "object", 
                    "description": "Custom key-value details relevant to the status."
                }, 
                "message": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "A sentence explaining the reason for the status."
                }, 
                "reason": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "One snake_case word."
                }, 
                "api_version": {
                    "readOnly": true, 
                    "type": "string"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "checksum": {
            "title": "Image checksum", 
            "required": [
                "checksum_algorithm", 
                "checksum_value"
            ], 
            "properties": {
                "checksum_algorithm": {
                    "$ref": "#/definitions/checksum_algorithm"
                }, 
                "checksum_value": {
                    "type": "string", 
                    "format": "bytes"
                }
            }, 
            "description": "Image checksum"
        }, 
        "checksum_algorithm": {
            "enum": [
                "SHA_256", 
                "SHA_1"
            ], 
            "type": "string", 
            "description": "The type of checksum calculated for the image", 
            "title": "Checksum algorithm"
        }, 
        "client_auth": {
            "title": "Client authentication config", 
            "required": [
                "status"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "enum": [
                        "ENABLED", 
                        "DISABLED"
                    ], 
                    "type": "string", 
                    "description": "Status of client authentication"
                }, 
                "ca_chain": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "Content of CA chain certificate", 
                    "format": "byte"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "Name of CA chain file"
                }
            }, 
            "description": "Client authentication config"
        }, 
        "clone_resource": {
            "title": "Creates new disk based on existing specification", 
            "properties": {
                "ndfs_filepath": {
                    "type": "string", 
                    "description": "Path of the image to clone from. If this is specified, then vmdisk_uuid and image_path should not be set.\n"
                }, 
                "vmdisk_uuid": {
                    "type": "string", 
                    "description": "UUID of the disk to clone from. If this is specified, then image_path and ndfs_filepath should not be set.\n"
                }, 
                "image_path": {
                    "type": "string", 
                    "description": "Path of the image to clone from. If this is specified, then vmdisk_uuid and ndfs_filepath should not be set.\n"
                }, 
                "minimum_size_mb": {
                    "type": "integer", 
                    "description": "The minimum size of the resulting clone in MiB. This should only be specified if vmdisk_uuid is set.\n", 
                    "format": "int64"
                }
            }, 
            "description": "Creates new disk based on existing specification"
        }, 
        "cloud_credentials": {
            "description": "Cloud credentials spec", 
            "title": "Cloud Credentials Spec", 
            "discriminator": "cloud_type", 
            "required": [
                "name", 
                "cloud_type"
            ], 
            "type": "object", 
            "properties": {
                "is_default": {
                    "type": "boolean", 
                    "description": "Indicates if it is the default credentials"
                }, 
                "key_id": {
                    "type": "string", 
                    "description": "Access key for AWS, or subscription id for Azure\n"
                }, 
                "cloud_type": {
                    "$ref": "#/definitions/cloud_type"
                }, 
                "name": {
                    "type": "string", 
                    "description": "User friendly name for the credentials"
                }, 
                "secure_id": {
                    "type": "string", 
                    "description": "Secret key for AWS, or full file path of the Azure client certificate\nfile(<file_name>.pem)\n"
                }
            }
        }, 
        "cloud_credentials_def_status": {
            "title": "Cloud credentials Configuration", 
            "required": [
                "uuid", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "uuid": {
                    "type": "integer", 
                    "description": "UUID to uniquely identify cloud credentials", 
                    "format": "int64"
                }, 
                "resources": {
                    "$ref": "#/definitions/cloud_credentials"
                }
            }, 
            "description": "Cloud credentials configuration"
        }, 
        "cloud_credentials_intent_input": {
            "title": "cloud_credentials Intent Entity", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "metadata": {
                    "$ref": "#/definitions/cloud_credentials_metadata"
                }, 
                "spec": {
                    "$ref": "#/definitions/cloud_credentials"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "options": {
                    "$ref": "#/definitions/options"
                }
            }, 
            "description": "An intentful representation of a cloud_credentials"
        }, 
        "cloud_credentials_intent_resource": {
            "title": "cloud_credentials Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/cloud_credentials_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/cloud_credentials"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/cloud_credentials_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a cloud_credentials"
        }, 
        "cloud_credentials_intent_response": {
            "title": "cloud_credentials Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/cloud_credentials_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/cloud_credentials"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/cloud_credentials_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a cloud_credentials"
        }, 
        "cloud_credentials_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/cloud_credentials_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/cloud_credentials_list_metadata"
                }
            }, 
            "description": "Response object for intentful operation of cloud_credentialss"
        }, 
        "cloud_credentials_list_metadata": {
            "title": "Metadata for cloud_credentials list", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "cloud_credentials", 
                    "readOnly": true, 
                    "enum": [
                        "cloud_credentials"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found for the kind"
                }, 
                "sort_column": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "cloud_credentials_metadata": {
            "title": "cloud_credentials metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "type": "string", 
                    "description": "Time when cloud_credentials was last updated"
                }, 
                "kind": {
                    "default": "cloud_credentials", 
                    "readOnly": true, 
                    "enum": [
                        "cloud_credentials"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "cloud_credentials uuid"
                }, 
                "creation_time": {
                    "type": "string", 
                    "description": "Time when cloud_credentials was created"
                }, 
                "account_reference": {
                    "$ref": "#/definitions/account_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the cloud_credentials"
                }, 
                "parent_reference": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "If present, spec was copied from the referenced entity. Could have\nbeen a live entity, backup, snapshot or template entity. This field\nis special as it is the only field in metadata that is modifiable by\nthe user in case of template-based upgrades and in-place reverts.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "entity_version": {
                    "type": "integer", 
                    "description": "Monotonically increasing number"
                }, 
                "name": {
                    "type": "string", 
                    "description": "cloud_credentials name", 
                    "maxLength": 140
                }
            }, 
            "description": "The cloud_credentials kind metadata"
        }, 
        "cloud_credentials_reference": {
            "title": "Reference to a cloud_credentials", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "cloud_credentials", 
                    "readOnly": true, 
                    "enum": [
                        "cloud_credentials"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "name": {
                    "type": "string", 
                    "maxLength": 140
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string"
                }
            }, 
            "description": "The reference to a cloud_credentials"
        }, 
        "cloud_credentials_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "status": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "Only value possible is \"failure\"."
                }, 
                "kind": {
                    "default": "cloud_credentials", 
                    "readOnly": true, 
                    "enum": [
                        "cloud_credentials"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "details": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "readOnly": true, 
                    "type": "object", 
                    "description": "Custom key-value details relevant to the status."
                }, 
                "message": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "A sentence explaining the reason for the status."
                }, 
                "reason": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "One snake_case word."
                }, 
                "api_version": {
                    "readOnly": true, 
                    "type": "string"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "cloud_type": {
            "enum": [
                "AWS", 
                "AZURE"
            ], 
            "type": "string", 
            "description": "Cloud site type", 
            "title": "Cloud Site Type"
        }, 
        "cluster": {
            "title": "Cluster Definition", 
            "type": "object", 
            "properties": {
                "resources": {
                    "type": "object", 
                    "description": "Cluster resources", 
                    "properties": {
                        "config": {
                            "$ref": "#/definitions/cluster_config"
                        }, 
                        "network": {
                            "$ref": "#/definitions/cluster_network"
                        }
                    }
                }, 
                "name": {
                    "type": "string", 
                    "description": "Cluster Name", 
                    "maxLength": 140
                }, 
                "policies": {
                    "$ref": "#/definitions/policies"
                }, 
                "providers": {
                    "$ref": "#/definitions/providers"
                }
            }, 
            "description": "Cluster Definition"
        }, 
        "cluster_config": {
            "title": "Cluster Configuration", 
            "type": "object", 
            "properties": {
                "client_auth": {
                    "$ref": "#/definitions/client_auth"
                }, 
                "software_map": {
                    "additionalProperties": {
                        "$ref": "#/definitions/cluster_software"
                    }, 
                    "type": "object", 
                    "description": "Map of installed softwares on the cluster with software type as the\nkey\n"
                }, 
                "encryption_status": {
                    "$ref": "#/definitions/encryption_status"
                }, 
                "ssl_key": {
                    "readOnly": true, 
                    "$ref": "#/definitions/ssl_key"
                }, 
                "redundancy_factor": {
                    "type": "integer", 
                    "description": "Cluster supported redundancy factor", 
                    "format": "int32"
                }, 
                "remote_connections": {
                    "items": {
                        "$ref": "#/definitions/cluster_connection_info"
                    }, 
                    "readOnly": true, 
                    "type": "array", 
                    "description": "List of connected clusters"
                }, 
                "certification_signing_info": {
                    "$ref": "#/definitions/certification_signing_info"
                }, 
                "content_cache_fingerprint_percentage": {
                    "type": "integer", 
                    "description": "Percentage of the disk capacity that can have fingerprints in the\nextent group metadata to be used by the content cache\n", 
                    "format": "int32"
                }, 
                "enabled_features": {
                    "items": {
                        "enum": [
                            "LOCK_DOWN_ENABLED", 
                            "PASSWORD_REMOTE_LOGIN_ENABLED", 
                            "SHADOW_CLONES_ENABLED", 
                            "COMMON_CRITERIA_MODE_ENABLED", 
                            "SSP_CONFIGURED"
                        ], 
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Array of enabled features"
                }, 
                "timezone": {
                    "type": "string", 
                    "description": "Zone name used in value of TZ environment variable"
                }, 
                "supported_information_verbosity": {
                    "enum": [
                        "NOTHING", 
                        "BASIC", 
                        "BASIC_PLUS_CORE_DUMP", 
                        "ALL"
                    ], 
                    "type": "string", 
                    "description": "Verbosity level settings for populating support information.\n- 'Nothing': Send nothing\n- 'Basic': Send basic information - skip core dump and hypervisor\n           stats information\n- 'BasicPlusCoreDump': Send basic and core dump information\n- 'All': Send all information\n"
                }, 
                "build": {
                    "readOnly": true, 
                    "$ref": "#/definitions/build_info"
                }, 
                "ca_certs": {
                    "items": {
                        "$ref": "#/definitions/ca_cert"
                    }, 
                    "readOnly": true, 
                    "type": "array", 
                    "description": "List of cluster trusted CA certificates"
                }, 
                "public_keys": {
                    "items": {
                        "$ref": "#/definitions/public_key"
                    }, 
                    "type": "array", 
                    "description": "List of valid ssh keys for the cluster"
                }, 
                "key_management_servers": {
                    "items": {
                        "$ref": "#/definitions/key_management_server"
                    }, 
                    "type": "array", 
                    "description": "List of cluster key management server"
                }, 
                "type": {
                    "readOnly": true, 
                    "$ref": "#/definitions/cluster_type"
                }
            }, 
            "description": "Cluster Configuration"
        }, 
        "cluster_connection_info": {
            "title": "Connected cluster info", 
            "required": [
                "uuid", 
                "name", 
                "ip_address", 
                "type"
            ], 
            "type": "object", 
            "properties": {
                "ip_address": {
                    "type": "string"
                }, 
                "type": {
                    "$ref": "#/definitions/cluster_type"
                }, 
                "uuid": {
                    "type": "string"
                }, 
                "name": {
                    "type": "string"
                }
            }, 
            "description": "Connected cluster info\n"
        }, 
        "cluster_def_status": {
            "title": "Cluster Status", 
            "required": [
                "uuid", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Cluster Name", 
                    "maxLength": 140
                }, 
                "resources": {
                    "required": [
                        "config", 
                        "nodes", 
                        "network"
                    ], 
                    "type": "object", 
                    "description": "Cluster resources", 
                    "properties": {
                        "config": {
                            "$ref": "#/definitions/cluster_config"
                        }, 
                        "nodes": {
                            "$ref": "#/definitions/cluster_nodes"
                        }, 
                        "stats": {
                            "additionalProperties": {
                                "type": "integer", 
                                "format": "int32"
                            }, 
                            "readOnly": true, 
                            "type": "object", 
                            "description": "Stats data map"
                        }, 
                        "network": {
                            "$ref": "#/definitions/cluster_network"
                        }, 
                        "runtime_status": {
                            "items": {
                                "enum": [
                                    "UPGRADE_IN_PROGRESS", 
                                    "HAVE_SELF_ENCRYPTING_DRIVE"
                                ], 
                                "type": "string"
                            }, 
                            "type": "array", 
                            "description": "Cluster current attributes and onging operations"
                        }
                    }
                }, 
                "uuid": {
                    "type": "string", 
                    "description": "Cluster UUID"
                }, 
                "policies": {
                    "$ref": "#/definitions/policies"
                }, 
                "providers": {
                    "$ref": "#/definitions/providers"
                }
            }, 
            "description": "Cluster status definition"
        }, 
        "cluster_domain_server": {
            "title": "Domain Server", 
            "required": [
                "name"
            ], 
            "type": "object", 
            "properties": {
                "nameserver": {
                    "type": "string", 
                    "description": "The IP of the nameserver that can resolve the domain name. Must set\nwhen joining the domain\n"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Joined domain name. In 'put' request, empty name will unjoin the\ncluster from current domain.\n"
                }, 
                "domain_credentials": {
                    "$ref": "#/definitions/credentials"
                }
            }, 
            "description": "Cluster domain server. Only applied to the cluster with all hyperv hosts\n"
        }, 
        "cluster_intent_input": {
            "title": "cluster Intent Entity", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "metadata": {
                    "$ref": "#/definitions/cluster_metadata"
                }, 
                "spec": {
                    "$ref": "#/definitions/cluster"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "options": {
                    "$ref": "#/definitions/options"
                }
            }, 
            "description": "An intentful representation of a cluster"
        }, 
        "cluster_intent_resource": {
            "title": "cluster Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/cluster_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/cluster"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/cluster_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a cluster"
        }, 
        "cluster_intent_response": {
            "title": "cluster Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/cluster_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/cluster"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/cluster_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a cluster"
        }, 
        "cluster_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/cluster_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/cluster_list_metadata"
                }
            }, 
            "description": "Response object for intentful operation of clusters"
        }, 
        "cluster_list_metadata": {
            "title": "Metadata for cluster list", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "cluster", 
                    "readOnly": true, 
                    "enum": [
                        "cluster"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found for the kind"
                }, 
                "sort_column": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "cluster_metadata": {
            "title": "cluster metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "type": "string", 
                    "description": "Time when cluster was last updated"
                }, 
                "kind": {
                    "default": "cluster", 
                    "readOnly": true, 
                    "enum": [
                        "cluster"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "cluster uuid"
                }, 
                "creation_time": {
                    "type": "string", 
                    "description": "Time when cluster was created"
                }, 
                "account_reference": {
                    "$ref": "#/definitions/account_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the cluster"
                }, 
                "parent_reference": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "If present, spec was copied from the referenced entity. Could have\nbeen a live entity, backup, snapshot or template entity. This field\nis special as it is the only field in metadata that is modifiable by\nthe user in case of template-based upgrades and in-place reverts.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "entity_version": {
                    "type": "integer", 
                    "description": "Monotonically increasing number"
                }, 
                "name": {
                    "type": "string", 
                    "description": "cluster name", 
                    "maxLength": 140
                }
            }, 
            "description": "The cluster kind metadata"
        }, 
        "cluster_network": {
            "title": "Cluster Network Configuration", 
            "type": "object", 
            "properties": {
                "domain": {
                    "$ref": "#/definitions/cluster_domain_server"
                }, 
                "http_proxy_whitelist": {
                    "items": {
                        "$ref": "#/definitions/http_proxy_whitelist"
                    }, 
                    "type": "array", 
                    "description": "List of Http Proxy Whiltelist"
                }, 
                "masquerading_ip": {
                    "type": "string", 
                    "description": "The cluster NAT'd or proxy IP which maps to the cluster local IP\n"
                }, 
                "masquerading_port": {
                    "type": "integer", 
                    "description": "Port used together with masquerading_ip to connect to the cluster\n", 
                    "format": "int32"
                }, 
                "http_proxy_list": {
                    "items": {
                        "$ref": "#/definitions/cluster_network_entity"
                    }, 
                    "type": "array", 
                    "description": "List of proxies to connect to the service centers"
                }, 
                "smtp_server": {
                    "$ref": "#/definitions/smtp_server"
                }, 
                "ntp_server_ip_list": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "The list of IP addresses or FQDNs of the NTP servers"
                }, 
                "external_ip_address": {
                    "type": "string", 
                    "description": "The local IP of cluster visible externally"
                }, 
                "external_subnet": {
                    "default": "172.16.0.0/255.240.0.0", 
                    "type": "string", 
                    "description": "External subnet for cross server communication. The format is\nIP/netmask\n"
                }, 
                "service_center_list": {
                    "items": {
                        "$ref": "#/definitions/cluster_network_entity"
                    }, 
                    "type": "array", 
                    "description": "List of service centers that can be connected to"
                }, 
                "name_server_ip_list": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "The list of IP addresses of the name servers"
                }, 
                "nfs_subnet_whitelist": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Comma separated list of subnets (of the form 'a.b.c.d/l.m.n.o') that\nare allowed to send NFS requests to this container. If not specified,\nthe global NFS whitelist will be looked up for access permission.\nThe internal subnet is always automatically considered part of the\nwhitelist, even if the field below does not explicitly specify it.\nSimilarly, all the hypervisor IPs are considered part of the\nwhitelist. Finally, to permit debugging, all of the SVMs local IPs\nare considered to be implicitly part of the whitelist\n"
                }, 
                "internal_subnet": {
                    "default": "192.168.5.0/255.255.255.0", 
                    "type": "string", 
                    "description": "The internal subnet is local to every server - its not visible\noutside.iSCSI requests generated internally within the appliance\n(by user VMs or VMFS) are sent to the internal subnet. The format is\nIP/netmask\n"
                }, 
                "external_dataservices_ip_address": {
                    "type": "string", 
                    "description": "The cluster IP address that provides external entities access to\nvarious cluster data services\n"
                }
            }, 
            "description": "Cluster network"
        }, 
        "cluster_network_entity": {
            "title": "Cluster Network Entity", 
            "required": [
                "ip_config"
            ], 
            "type": "object", 
            "properties": {
                "credentials": {
                    "$ref": "#/definitions/credentials"
                }, 
                "ip_config": {
                    "$ref": "#/definitions/server_ip_config"
                }, 
                "proxy_type": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array"
                }
            }, 
            "description": "Cluster network entity"
        }, 
        "cluster_nodes": {
            "title": "Cluster Nodes", 
            "type": "object", 
            "properties": {
                "hypervisor_servers": {
                    "items": {
                        "$ref": "#/definitions/hypervisor_server"
                    }, 
                    "type": "array"
                }, 
                "node_version": {
                    "$ref": "#/definitions/node_version"
                }
            }, 
            "description": "Node info for this cluster"
        }, 
        "cluster_reference": {
            "title": "Reference to a cluster", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "cluster", 
                    "readOnly": true, 
                    "enum": [
                        "cluster"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "name": {
                    "type": "string", 
                    "maxLength": 140
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string"
                }
            }, 
            "description": "The reference to a cluster"
        }, 
        "cluster_software": {
            "title": "Cluster software", 
            "required": [
                "type", 
                "version"
            ], 
            "properties": {
                "url": {
                    "type": "string", 
                    "description": "It is used to provide customized software download location.\nThe default location is Nutanix portal service\n"
                }, 
                "status": {
                    "enum": [
                        "INSTALLED", 
                        "UPGRADING"
                    ], 
                    "type": "string", 
                    "description": "Current software status"
                }, 
                "version": {
                    "type": "string"
                }, 
                "type": {
                    "$ref": "#/definitions/software_type"
                }
            }, 
            "description": "Cluster software"
        }, 
        "cluster_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "status": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "Only value possible is \"failure\"."
                }, 
                "kind": {
                    "default": "cluster", 
                    "readOnly": true, 
                    "enum": [
                        "cluster"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "details": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "readOnly": true, 
                    "type": "object", 
                    "description": "Custom key-value details relevant to the status."
                }, 
                "message": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "A sentence explaining the reason for the status."
                }, 
                "reason": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "One snake_case word."
                }, 
                "api_version": {
                    "readOnly": true, 
                    "type": "string"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "cluster_type": {
            "items": {
                "type": "string"
            }, 
            "type": "array", 
            "description": "Array of cluster types, such as a cluster can function as both NDFS\nand cloud data gateway\n- 'NDFS': Regular NDFS serving user IOs\n- 'MULTI_CLUSTER': Multicluster analytics and management\n- 'CLOUD_DATA_GATEWAY': Cloud backup and DR gateway\n- 'AVM': Cloud Analytics VM\n- 'MINERVA': Minerva cluster for file server\n- 'WITNESS_VM' : Witness VM cluster\n- 'EXTENSION_STORE_VM': Extension store VM cluster\n- 'XI_VM': Xi VM cluster\n", 
            "title": "Cluster Type"
        }, 
        "condition": {
            "title": "Condition", 
            "type": "object", 
            "properties": {
                "status": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "reason": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "One snake_case word."
                }, 
                "type": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "message": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "A sentence explaining the reason."
                }, 
                "entity_version": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The object version for which this \"state\" is relevant."
                }
            }, 
            "description": "Condition"
        }, 
        "connection_input": {
            "title": "Connection input", 
            "required": [
                "username", 
                "password"
            ], 
            "type": "object", 
            "properties": {
                "username": {
                    "type": "string", 
                    "description": "user name"
                }, 
                "password": {
                    "type": "string", 
                    "description": "password"
                }
            }, 
            "description": "Credentials to Connect"
        }, 
        "connection_result": {
            "title": "Connection Result", 
            "type": "object", 
            "properties": {
                "message": {
                    "type": "string", 
                    "description": "Connection status message"
                }, 
                "connection_status": {
                    "type": "boolean", 
                    "description": "Connection status"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/directory_service_metadata"
                }
            }, 
            "description": "Connection Result"
        }, 
        "container": {
            "title": "Container Entity", 
            "required": [
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Container name", 
                    "maxLength": 140
                }, 
                "resources": {
                    "$ref": "#/definitions/container_resources"
                }
            }, 
            "description": "Container Entity"
        }, 
        "container_basic_options": {
            "title": "Container minimum options definition", 
            "type": "object", 
            "properties": {
                "volume_mount_map": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "description": "Map of Volume Group name to mount path"
                }, 
                "restart_policy": {
                    "type": "string", 
                    "description": "Container restart policy"
                }, 
                "environments": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "description": "List of environment variables."
                }, 
                "memory_mb": {
                    "type": "integer", 
                    "description": "Memory in MBs", 
                    "format": "int32"
                }, 
                "command": {
                    "type": "string", 
                    "description": "Command to be executed for the container"
                }, 
                "provider_name": {
                    "enum": [
                        "DOCKER"
                    ], 
                    "type": "string", 
                    "description": "Name of container provider"
                }, 
                "port_mapping_reference_list": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "description": "List of port mappings"
                }, 
                "cpu_shares": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "Number of cpus", 
                    "format": "int32"
                }
            }, 
            "description": "Container params"
        }, 
        "container_def_status": {
            "title": "Container Status Definition", 
            "required": [
                "resources", 
                "name"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Container name", 
                    "maxLength": 140
                }, 
                "resources": {
                    "$ref": "#/definitions/container_resources"
                }
            }, 
            "description": "Container Status Definition"
        }, 
        "container_intent_input": {
            "title": "container Intent Entity", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "metadata": {
                    "$ref": "#/definitions/container_metadata"
                }, 
                "spec": {
                    "$ref": "#/definitions/container"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "options": {
                    "$ref": "#/definitions/options"
                }
            }, 
            "description": "An intentful representation of a container"
        }, 
        "container_intent_resource": {
            "title": "container Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/container_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/container"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/container_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a container"
        }, 
        "container_intent_response": {
            "title": "container Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/container_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/container"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/container_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a container"
        }, 
        "container_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/container_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/container_list_metadata"
                }
            }, 
            "description": "Response object for intentful operation of containers"
        }, 
        "container_list_metadata": {
            "title": "Metadata for container list", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "container", 
                    "readOnly": true, 
                    "enum": [
                        "container"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found for the kind"
                }, 
                "sort_column": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "container_metadata": {
            "title": "container metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "type": "string", 
                    "description": "Time when container was last updated"
                }, 
                "kind": {
                    "default": "container", 
                    "readOnly": true, 
                    "enum": [
                        "container"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "container uuid"
                }, 
                "creation_time": {
                    "type": "string", 
                    "description": "Time when container was created"
                }, 
                "account_reference": {
                    "$ref": "#/definitions/account_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the container"
                }, 
                "parent_reference": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "If present, spec was copied from the referenced entity. Could have\nbeen a live entity, backup, snapshot or template entity. This field\nis special as it is the only field in metadata that is modifiable by\nthe user in case of template-based upgrades and in-place reverts.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "entity_version": {
                    "type": "integer", 
                    "description": "Monotonically increasing number"
                }, 
                "name": {
                    "type": "string", 
                    "description": "container name", 
                    "maxLength": 140
                }
            }, 
            "description": "The container kind metadata"
        }, 
        "container_options": {
            "title": "Container Options Definition", 
            "type": "object", 
            "properties": {
                "options": {
                    "type": "string", 
                    "description": "JSON blob of container options"
                }
            }, 
            "description": "Container params usage description for Cmd line or YAML compose file"
        }, 
        "container_reference": {
            "title": "Reference to a container", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "container", 
                    "readOnly": true, 
                    "enum": [
                        "container"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "name": {
                    "type": "string", 
                    "maxLength": 140
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string"
                }
            }, 
            "description": "The reference to a container"
        }, 
        "container_resources": {
            "title": "Container Resources Definition", 
            "required": [
                "image_name"
            ], 
            "type": "object", 
            "properties": {
                "network_reference_list": {
                    "items": {
                        "$ref": "#/definitions/network_reference"
                    }, 
                    "type": "array", 
                    "description": "Networks associated with this Container"
                }, 
                "container_basic_options": {
                    "$ref": "#/definitions/container_basic_options"
                }, 
                "image_name": {
                    "type": "string", 
                    "description": "Image name", 
                    "maxLength": 140
                }, 
                "volume_list": {
                    "items": {
                        "$ref": "#/definitions/container_volume"
                    }, 
                    "type": "array", 
                    "description": "Volumes associated with this Container"
                }, 
                "container_state": {
                    "enum": [
                        "QUEUED", 
                        "IMAGE_DOWNLOADED", 
                        "CREATED", 
                        "RUNNING", 
                        "STOPPED", 
                        "KILLED", 
                        "REMOVED", 
                        "DELETED", 
                        "PAUSED"
                    ], 
                    "type": "string", 
                    "description": "Desired state of the Container"
                }, 
                "container_options": {
                    "$ref": "#/definitions/container_options"
                }, 
                "volume_reference_list": {
                    "items": {
                        "$ref": "#/definitions/container_volume_reference"
                    }, 
                    "type": "array", 
                    "description": "Referenced Volumes associated with this Container"
                }, 
                "registry_reference": {
                    "$ref": "#/definitions/docker_registry_reference"
                }
            }, 
            "description": "Container Resources Definition"
        }, 
        "container_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "status": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "Only value possible is \"failure\"."
                }, 
                "kind": {
                    "default": "container", 
                    "readOnly": true, 
                    "enum": [
                        "container"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "details": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "readOnly": true, 
                    "type": "object", 
                    "description": "Custom key-value details relevant to the status."
                }, 
                "message": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "A sentence explaining the reason for the status."
                }, 
                "reason": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "One snake_case word."
                }, 
                "api_version": {
                    "readOnly": true, 
                    "type": "string"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "container_volume": {
            "title": "Container Volume Entity", 
            "type": "object", 
            "properties": {
                "size_mb": {
                    "type": "integer", 
                    "description": "Size of file system for volume", 
                    "format": "int32"
                }, 
                "storage_container_uuid": {
                    "type": "string", 
                    "description": "Storage Container UUID to be used for volume"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Container Volume name", 
                    "maxLength": 140
                }, 
                "file_system_type": {
                    "type": "string", 
                    "description": "File system to be used for volume"
                }
            }, 
            "description": "Container Volume Entity"
        }, 
        "container_volume_def_status": {
            "title": "Container volume status", 
            "required": [
                "uuid", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "UUID to uniquely identify Container volume"
                }, 
                "resources": {
                    "$ref": "#/definitions/container_volume"
                }
            }, 
            "description": "Container volume status"
        }, 
        "container_volume_intent_input": {
            "title": "container_volume Intent Entity", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "metadata": {
                    "$ref": "#/definitions/container_volume_metadata"
                }, 
                "spec": {
                    "$ref": "#/definitions/container_volume"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "options": {
                    "$ref": "#/definitions/options"
                }
            }, 
            "description": "An intentful representation of a container_volume"
        }, 
        "container_volume_intent_resource": {
            "title": "container_volume Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/container_volume_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/container_volume"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/container_volume_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a container_volume"
        }, 
        "container_volume_intent_response": {
            "title": "container_volume Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/container_volume_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/container_volume"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/container_volume_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a container_volume"
        }, 
        "container_volume_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/container_volume_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/container_volume_list_metadata"
                }
            }, 
            "description": "Response object for intentful operation of container_volumes"
        }, 
        "container_volume_list_metadata": {
            "title": "Metadata for container_volume list", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "container_volume", 
                    "readOnly": true, 
                    "enum": [
                        "container_volume"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found for the kind"
                }, 
                "sort_column": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "container_volume_metadata": {
            "title": "container_volume metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "type": "string", 
                    "description": "Time when container_volume was last updated"
                }, 
                "kind": {
                    "default": "container_volume", 
                    "readOnly": true, 
                    "enum": [
                        "container_volume"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "container_volume uuid"
                }, 
                "creation_time": {
                    "type": "string", 
                    "description": "Time when container_volume was created"
                }, 
                "account_reference": {
                    "$ref": "#/definitions/account_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the container_volume"
                }, 
                "parent_reference": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "If present, spec was copied from the referenced entity. Could have\nbeen a live entity, backup, snapshot or template entity. This field\nis special as it is the only field in metadata that is modifiable by\nthe user in case of template-based upgrades and in-place reverts.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "entity_version": {
                    "type": "integer", 
                    "description": "Monotonically increasing number"
                }, 
                "name": {
                    "type": "string", 
                    "description": "container_volume name", 
                    "maxLength": 140
                }
            }, 
            "description": "The container_volume kind metadata"
        }, 
        "container_volume_reference": {
            "title": "Reference to a container_volume", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "container_volume", 
                    "readOnly": true, 
                    "enum": [
                        "container_volume"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "name": {
                    "type": "string", 
                    "maxLength": 140
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string"
                }
            }, 
            "description": "The reference to a container_volume"
        }, 
        "container_volume_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "status": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "Only value possible is \"failure\"."
                }, 
                "kind": {
                    "default": "container_volume", 
                    "readOnly": true, 
                    "enum": [
                        "container_volume"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "details": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "readOnly": true, 
                    "type": "object", 
                    "description": "Custom key-value details relevant to the status."
                }, 
                "message": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "A sentence explaining the reason for the status."
                }, 
                "reason": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "One snake_case word."
                }, 
                "api_version": {
                    "readOnly": true, 
                    "type": "string"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "create_resource": {
            "title": "Creates new disk based on specified configuration", 
            "properties": {
                "size_mb": {
                    "type": "integer", 
                    "description": "Size of the disk to be created in MiB", 
                    "format": "int64"
                }, 
                "storage_container_uuid": {
                    "type": "string", 
                    "description": "Container UUID on which to create the disk"
                }
            }, 
            "description": "Creates new disk based on specified configuration"
        }, 
        "credentials": {
            "title": "Credentials to login server", 
            "required": [
                "username"
            ], 
            "type": "object", 
            "properties": {
                "username": {
                    "type": "string"
                }, 
                "password": {
                    "type": "string"
                }
            }, 
            "description": "Credentials to login server"
        }, 
        "dhcp_options": {
            "title": "DHCP options", 
            "type": "object", 
            "properties": {
                "domain_search": {
                    "type": "string"
                }, 
                "boot_file_name": {
                    "type": "string"
                }, 
                "domain_name_servers": {
                    "type": "string"
                }, 
                "domain_name": {
                    "type": "string"
                }, 
                "tftp_server_name": {
                    "type": "string"
                }
            }, 
            "description": "Spec for defining DHCP options"
        }, 
        "directory_service": {
            "title": "Directory service", 
            "required": [
                "resources", 
                "name"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "directory service name", 
                    "maxLength": 140
                }, 
                "resources": {
                    "required": [
                        "url", 
                        "domain"
                    ], 
                    "type": "object", 
                    "properties": {
                        "url": {
                            "type": "string", 
                            "description": "Url of the directory"
                        }, 
                        "connection_information": {
                            "description": "Validates and connects to the directory service with the given\ncredentials\n", 
                            "$ref": "#/definitions/connection_input"
                        }, 
                        "domain": {
                            "type": "string", 
                            "description": "domain name"
                        }, 
                        "admin_user_reference_list": {
                            "items": {
                                "$ref": "#/definitions/user_reference"
                            }, 
                            "type": "array", 
                            "description": "List of admin users reference"
                        }, 
                        "admin_group_list": {
                            "items": {
                                "type": "string"
                            }, 
                            "type": "array", 
                            "description": "List of distinguished name of the admin group in the directory\nservice\n"
                        }
                    }, 
                    "title": "Directory service resources"
                }
            }, 
            "description": "Directory Service configuration"
        }, 
        "directory_service_def_status": {
            "title": "directory service", 
            "required": [
                "resources", 
                "name"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "directory service name", 
                    "maxLength": 140
                }, 
                "resources": {
                    "required": [
                        "url", 
                        "domain"
                    ], 
                    "type": "object", 
                    "properties": {
                        "url": {
                            "type": "string", 
                            "description": "Url of the directory"
                        }, 
                        "domain": {
                            "type": "string", 
                            "description": "domain name"
                        }, 
                        "admin_user_reference_list": {
                            "items": {
                                "$ref": "#/definitions/user_reference"
                            }, 
                            "type": "array", 
                            "description": "List of users assigned as an admin"
                        }
                    }, 
                    "title": "Directory service resources"
                }
            }, 
            "description": "directory service configuration"
        }, 
        "directory_service_intent_input": {
            "title": "directory_service Intent Entity", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "metadata": {
                    "$ref": "#/definitions/directory_service_metadata"
                }, 
                "spec": {
                    "$ref": "#/definitions/directory_service"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "options": {
                    "$ref": "#/definitions/options"
                }
            }, 
            "description": "An intentful representation of a directory_service"
        }, 
        "directory_service_intent_resource": {
            "title": "directory_service Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/directory_service_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/directory_service"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/directory_service_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a directory_service"
        }, 
        "directory_service_intent_response": {
            "title": "directory_service Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/directory_service_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/directory_service"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/directory_service_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a directory_service"
        }, 
        "directory_service_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/directory_service_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/directory_service_list_metadata"
                }
            }, 
            "description": "Response object for intentful operation of directory_services"
        }, 
        "directory_service_list_metadata": {
            "title": "Metadata for directory_service list", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "directory_service", 
                    "readOnly": true, 
                    "enum": [
                        "directory_service"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found for the kind"
                }, 
                "sort_column": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "directory_service_metadata": {
            "title": "directory_service metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "type": "string", 
                    "description": "Time when directory_service was last updated"
                }, 
                "kind": {
                    "default": "directory_service", 
                    "readOnly": true, 
                    "enum": [
                        "directory_service"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "directory_service uuid"
                }, 
                "creation_time": {
                    "type": "string", 
                    "description": "Time when directory_service was created"
                }, 
                "account_reference": {
                    "$ref": "#/definitions/account_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the directory_service"
                }, 
                "parent_reference": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "If present, spec was copied from the referenced entity. Could have\nbeen a live entity, backup, snapshot or template entity. This field\nis special as it is the only field in metadata that is modifiable by\nthe user in case of template-based upgrades and in-place reverts.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "entity_version": {
                    "type": "integer", 
                    "description": "Monotonically increasing number"
                }, 
                "name": {
                    "type": "string", 
                    "description": "directory_service name", 
                    "maxLength": 140
                }
            }, 
            "description": "The directory_service kind metadata"
        }, 
        "directory_service_reference": {
            "title": "Reference to a directory_service", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "directory_service", 
                    "readOnly": true, 
                    "enum": [
                        "directory_service"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "name": {
                    "type": "string", 
                    "maxLength": 140
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string"
                }
            }, 
            "description": "The reference to a directory_service"
        }, 
        "directory_service_search_input": {
            "title": "Directory Service search input", 
            "required": [
                "query"
            ], 
            "type": "object", 
            "properties": {
                "requested_attribute_list": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "If set search will only return these attributes in the result else will send the defualt attribute list"
                }, 
                "query": {
                    "type": "string", 
                    "description": "string to be searched"
                }, 
                "search_attribute_list": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "If set search will be performed on these attributes else will be performed on cn (common name)"
                }
            }, 
            "description": "Directory Service search input"
        }, 
        "directory_service_search_response": {
            "title": "Directory Service search response", 
            "type": "object", 
            "properties": {
                "search_result": {
                    "items": {
                        "$ref": "#/definitions/entity"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/directory_service_metadata"
                }
            }, 
            "description": "Directory Service search response"
        }, 
        "directory_service_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "status": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "Only value possible is \"failure\"."
                }, 
                "kind": {
                    "default": "directory_service", 
                    "readOnly": true, 
                    "enum": [
                        "directory_service"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "details": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "readOnly": true, 
                    "type": "object", 
                    "description": "Custom key-value details relevant to the status."
                }, 
                "message": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "A sentence explaining the reason for the status."
                }, 
                "reason": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "One snake_case word."
                }, 
                "api_version": {
                    "readOnly": true, 
                    "type": "string"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "disk_address": {
            "title": "Disk Address", 
            "required": [
                "adapter_type", 
                "device_index"
            ], 
            "type": "object", 
            "properties": {
                "device_index": {
                    "type": "integer"
                }, 
                "adapter_type": {
                    "enum": [
                        "SCSI", 
                        "IDE", 
                        "PCI", 
                        "SATA"
                    ], 
                    "type": "string"
                }
            }, 
            "description": "Disk Address"
        }, 
        "disk_encryption_status": {
            "title": "Cluster disk encryption status", 
            "required": [
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "encryption_capable": {
                    "type": "boolean", 
                    "description": "Indicates if disk is encryption capable"
                }, 
                "uuid": {
                    "type": "string", 
                    "description": "Disk UUID"
                }, 
                "rekey": {
                    "type": "boolean", 
                    "description": "Request to set the new passwords for the encryption capable disk\n"
                }
            }, 
            "description": "Cluster disk encryption status"
        }, 
        "docker_registry": {
            "title": "Docker Registry spec", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Name of the docker registry", 
                    "maxLength": 140
                }, 
                "resources": {
                    "$ref": "#/definitions/docker_registry_resources"
                }
            }, 
            "description": "Docker registry spec"
        }, 
        "docker_registry_def_status": {
            "title": "Docker Registry", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Name of the docker registry", 
                    "maxLength": 140
                }, 
                "resources": {
                    "$ref": "#/definitions/docker_registry_resources"
                }
            }, 
            "description": "Docker registry"
        }, 
        "docker_registry_image_search": {
            "title": "Docker registry image search results response", 
            "required": [
                "metadata", 
                "api_version"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/docker_registry_image_status"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/docker_registry_list_metadata"
                }
            }, 
            "description": "Docker registry image search results response"
        }, 
        "docker_registry_image_status": {
            "title": "Docker registry image search result", 
            "required": [
                "name", 
                "is_official", 
                "owner", 
                "tags"
            ], 
            "type": "object", 
            "properties": {
                "owner": {
                    "type": "string", 
                    "description": "Owner user name"
                }, 
                "description": {
                    "type": "string", 
                    "description": "Repository description", 
                    "maxLength": 1000
                }, 
                "is_official": {
                    "type": "boolean", 
                    "description": "Whether it is an official Docker Hub image"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Repository name", 
                    "maxLength": 140
                }, 
                "tags": {
                    "items": {
                        "$ref": "#/definitions/docker_registry_image_tag"
                    }, 
                    "type": "array"
                }
            }, 
            "description": "Docker registry image search result"
        }, 
        "docker_registry_image_tag": {
            "title": "Docker Hub tagged image", 
            "required": [
                "name", 
                "size_mb", 
                "modified_date"
            ], 
            "type": "object", 
            "properties": {
                "size_mb": {
                    "type": "integer", 
                    "description": "Size of the image in MiB", 
                    "format": "int64"
                }, 
                "modified_date": {
                    "type": "string", 
                    "description": "Last modified date in RFC 3339"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Image tag name", 
                    "maxLength": 140
                }
            }, 
            "description": "Docker Hub tagged image"
        }, 
        "docker_registry_intent_input": {
            "title": "docker_registry Intent Entity", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "metadata": {
                    "$ref": "#/definitions/docker_registry_metadata"
                }, 
                "spec": {
                    "$ref": "#/definitions/docker_registry"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "options": {
                    "$ref": "#/definitions/options"
                }
            }, 
            "description": "An intentful representation of a docker_registry"
        }, 
        "docker_registry_intent_resource": {
            "title": "docker_registry Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/docker_registry_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/docker_registry"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/docker_registry_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a docker_registry"
        }, 
        "docker_registry_intent_response": {
            "title": "docker_registry Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/docker_registry_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/docker_registry"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/docker_registry_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a docker_registry"
        }, 
        "docker_registry_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/docker_registry_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/docker_registry_list_metadata"
                }
            }, 
            "description": "Response object for intentful operation of docker_registrys"
        }, 
        "docker_registry_list_metadata": {
            "title": "Metadata for docker_registry list", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "docker_registry", 
                    "readOnly": true, 
                    "enum": [
                        "docker_registry"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found for the kind"
                }, 
                "sort_column": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "docker_registry_metadata": {
            "title": "docker_registry metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "type": "string", 
                    "description": "Time when docker_registry was last updated"
                }, 
                "kind": {
                    "default": "docker_registry", 
                    "readOnly": true, 
                    "enum": [
                        "docker_registry"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "docker_registry uuid"
                }, 
                "creation_time": {
                    "type": "string", 
                    "description": "Time when docker_registry was created"
                }, 
                "account_reference": {
                    "$ref": "#/definitions/account_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the docker_registry"
                }, 
                "parent_reference": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "If present, spec was copied from the referenced entity. Could have\nbeen a live entity, backup, snapshot or template entity. This field\nis special as it is the only field in metadata that is modifiable by\nthe user in case of template-based upgrades and in-place reverts.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "entity_version": {
                    "type": "integer", 
                    "description": "Monotonically increasing number"
                }, 
                "name": {
                    "type": "string", 
                    "description": "docker_registry name", 
                    "maxLength": 140
                }
            }, 
            "description": "The docker_registry kind metadata"
        }, 
        "docker_registry_reference": {
            "title": "Reference to a docker_registry", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "docker_registry", 
                    "readOnly": true, 
                    "enum": [
                        "docker_registry"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "name": {
                    "type": "string", 
                    "maxLength": 140
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string"
                }
            }, 
            "description": "The reference to a docker_registry"
        }, 
        "docker_registry_resources": {
            "title": "Docker Registry Resources", 
            "type": "object", 
            "properties": {
                "username": {
                    "type": "string", 
                    "description": "User name of the docker registry"
                }, 
                "system_default": {
                    "readOnly": true, 
                    "type": "boolean", 
                    "description": "Flag to indicate whether the docker registry is a system default\n"
                }, 
                "certificate": {
                    "type": "string", 
                    "description": "Cerfiticate required for the private docker registry"
                }, 
                "url": {
                    "type": "string", 
                    "description": "URL of the docker registry"
                }, 
                "password": {
                    "type": "string", 
                    "description": "Password of the user for the docker registry"
                }, 
                "enabled": {
                    "type": "boolean", 
                    "description": "Flag to indicate whether the docker registry is enabled or not\n"
                }
            }, 
            "description": "Docker registry resources"
        }, 
        "docker_registry_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "status": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "Only value possible is \"failure\"."
                }, 
                "kind": {
                    "default": "docker_registry", 
                    "readOnly": true, 
                    "enum": [
                        "docker_registry"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "details": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "readOnly": true, 
                    "type": "object", 
                    "description": "Custom key-value details relevant to the status."
                }, 
                "message": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "A sentence explaining the reason for the status."
                }, 
                "reason": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "One snake_case word."
                }, 
                "api_version": {
                    "readOnly": true, 
                    "type": "string"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "encryption_status": {
            "title": "Cluster encryption status", 
            "type": "object", 
            "properties": {
                "protected": {
                    "type": "boolean", 
                    "description": "Flag to indicate if the cluster has password protection for\nencrption\n"
                }, 
                "disks": {
                    "items": {
                        "$ref": "#/definitions/disk_encryption_status"
                    }, 
                    "type": "array", 
                    "description": "List of disk encryption status"
                }, 
                "ready_for_encryption": {
                    "type": "boolean", 
                    "description": "Indicates if the current cluster configuration is sufficient to\nturn on password protection for encryption\n"
                }
            }, 
            "description": "Cluster encryption status"
        }, 
        "entity": {
            "title": "Directory service Search response", 
            "type": "object", 
            "properties": {
                "type": {
                    "type": "string", 
                    "description": "user or group in the directory service"
                }, 
                "attribute_set": {
                    "items": {
                        "$ref": "#/definitions/attribute"
                    }, 
                    "type": "array"
                }, 
                "name": {
                    "type": "string", 
                    "description": "canonical name of the entity", 
                    "maxLength": 140
                }
            }, 
            "description": "Directory service Search response"
        }, 
        "entity_task_status": {
            "title": "Most recent task status of an entity", 
            "required": [
                "uuid", 
                "name", 
                "kind", 
                "task_status", 
                "task_percentage"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "type": "string"
                }, 
                "task_status": {
                    "enum": [
                        "PENDING", 
                        "RUNNING", 
                        "COMPLETE"
                    ], 
                    "type": "string"
                }, 
                "task_percentage": {
                    "format": "int32", 
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Task completion percentage", 
                    "maximum": 100
                }, 
                "name": {
                    "type": "string", 
                    "description": "Entity name"
                }, 
                "uuid": {
                    "type": "string", 
                    "description": "Entity UUID"
                }
            }, 
            "description": "Most recent task status of an entity"
        }, 
        "event": {
            "title": "Event", 
            "type": "object", 
            "properties": {
                "entity_reference": {
                    "description": "The versioned reference to the entity pointing to the version after\nthe event.\n", 
                    "$ref": "#/definitions/reference"
                }, 
                "api_version": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/event_metadata"
                }
            }, 
            "description": "An event is an object that represents a change in state of an entity in\nthe system.\n"
        }, 
        "event_metadata": {
            "title": "Event Metadata", 
            "type": "object", 
            "properties": {
                "kind": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind of entity, i.e. \"event\"."
                }
            }, 
            "description": "Event Metadata"
        }, 
        "execute_workflows": {
            "title": "Workflows to be executed for this stage", 
            "type": "object", 
            "properties": {
                "workflows_list": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "List of workflows"
                }
            }, 
            "description": "Workflows to be executed for this stage"
        }, 
        "execution_plan": {
            "default": "SEQUENTIAL", 
            "enum": [
                "SEQUENTIAL", 
                "PARALLEL"
            ], 
            "type": "string", 
            "description": "Execution plan for multiple requests", 
            "title": "Execution plan for multiple requests"
        }, 
        "execution_status": {
            "title": "Progress of a task", 
            "type": "object", 
            "properties": {
                "status": {
                    "enum": [
                        "QUEUED", 
                        "RUNNING", 
                        "COMPLETED", 
                        "FAILED", 
                        "ABORTED"
                    ], 
                    "type": "string", 
                    "description": "Status of this task"
                }, 
                "description": {
                    "type": "string", 
                    "description": "Description of task"
                }, 
                "entity_type": {
                    "type": "string", 
                    "description": "Type of entity on which task is performed"
                }, 
                "start_time": {
                    "type": "string", 
                    "description": "Time when this task got started"
                }, 
                "entity": {
                    "type": "object", 
                    "description": "State of entity after task is performed"
                }, 
                "end_time": {
                    "type": "string", 
                    "description": "Time when this task got ended"
                }, 
                "entity_uuid": {
                    "type": "string", 
                    "description": "Uuid of the entity on which task is performed"
                }, 
                "message": {
                    "type": "string", 
                    "description": "User readable output/error if any"
                }, 
                "estimate": {
                    "type": "integer", 
                    "description": "Estimated number of seconds for completion of this task", 
                    "format": "int64"
                }
            }, 
            "description": "Progress of a task"
        }, 
        "extension": {
            "title": "Extension manifest information", 
            "required": [
                "name", 
                "description", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Extension name", 
                    "maxLength": 140
                }, 
                "resources": {
                    "$ref": "#/definitions/extension_resources"
                }, 
                "description": {
                    "type": "string", 
                    "description": "Extension description", 
                    "maxLength": 1000
                }
            }, 
            "description": "Extension manifest information"
        }, 
        "extension_container_option": {
            "title": "Key Value Pair", 
            "required": [
                "key", 
                "value"
            ], 
            "type": "object", 
            "properties": {
                "key": {
                    "type": "string", 
                    "description": "key string"
                }, 
                "value": {
                    "type": "string", 
                    "description": "value string"
                }
            }, 
            "description": "Key Value Pair for container option"
        }, 
        "extension_container_options": {
            "title": "Extension container options", 
            "type": "object", 
            "properties": {
                "restart_policy": {
                    "type": "string", 
                    "description": "Container restart policy"
                }, 
                "environments": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "description": "List of environment variables."
                }, 
                "memory_mb": {
                    "type": "integer", 
                    "description": "Memory in MBs", 
                    "format": "int32"
                }, 
                "command": {
                    "type": "string", 
                    "description": "Command to be executed for the container"
                }, 
                "volume_list": {
                    "items": {
                        "$ref": "#/definitions/extension_container_volume"
                    }, 
                    "type": "array", 
                    "description": "List of volume to be mounted inside container"
                }, 
                "provider_name": {
                    "enum": [
                        "DOCKER"
                    ], 
                    "type": "string", 
                    "description": "Name of container provider"
                }, 
                "port_mapping_reference_list": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "description": "List of port mappings"
                }, 
                "cpu_shares": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "Number of cpus", 
                    "format": "int32"
                }
            }, 
            "description": "Extension container options"
        }, 
        "extension_container_volume": {
            "title": "Container Volume Entity", 
            "type": "object", 
            "properties": {
                "size_mb": {
                    "type": "integer", 
                    "description": "Size of file system for volume", 
                    "format": "int32"
                }, 
                "file_system_type": {
                    "type": "string", 
                    "description": "File system to be used for volume"
                }, 
                "mount_path": {
                    "type": "string", 
                    "description": "Mount path of the volume relative to container"
                }
            }, 
            "description": "Container Volume Entity"
        }, 
        "extension_def_status": {
            "title": "Extension status definition", 
            "required": [
                "name", 
                "description", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Extension name", 
                    "maxLength": 140
                }, 
                "resources": {
                    "$ref": "#/definitions/extension_resources"
                }, 
                "description": {
                    "type": "string", 
                    "description": "Extension description", 
                    "maxLength": 1000
                }
            }, 
            "description": "Extension status definition"
        }, 
        "extension_intent_input": {
            "title": "extension Intent Entity", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "metadata": {
                    "$ref": "#/definitions/extension_metadata"
                }, 
                "spec": {
                    "$ref": "#/definitions/extension"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "options": {
                    "$ref": "#/definitions/options"
                }
            }, 
            "description": "An intentful representation of a extension"
        }, 
        "extension_intent_resource": {
            "title": "extension Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/extension_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/extension"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/extension_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a extension"
        }, 
        "extension_intent_response": {
            "title": "extension Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/extension_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/extension"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/extension_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a extension"
        }, 
        "extension_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/extension_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/extension_list_metadata"
                }
            }, 
            "description": "Response object for intentful operation of extensions"
        }, 
        "extension_list_metadata": {
            "title": "Metadata for extension list", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "extension", 
                    "readOnly": true, 
                    "enum": [
                        "extension"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found for the kind"
                }, 
                "sort_column": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "extension_metadata": {
            "title": "extension metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "type": "string", 
                    "description": "Time when extension was last updated"
                }, 
                "kind": {
                    "default": "extension", 
                    "readOnly": true, 
                    "enum": [
                        "extension"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "extension uuid"
                }, 
                "creation_time": {
                    "type": "string", 
                    "description": "Time when extension was created"
                }, 
                "account_reference": {
                    "$ref": "#/definitions/account_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the extension"
                }, 
                "parent_reference": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "If present, spec was copied from the referenced entity. Could have\nbeen a live entity, backup, snapshot or template entity. This field\nis special as it is the only field in metadata that is modifiable by\nthe user in case of template-based upgrades and in-place reverts.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "entity_version": {
                    "type": "integer", 
                    "description": "Monotonically increasing number"
                }, 
                "name": {
                    "type": "string", 
                    "description": "extension name", 
                    "maxLength": 140
                }
            }, 
            "description": "The extension kind metadata"
        }, 
        "extension_reference": {
            "title": "Reference to a extension", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "extension", 
                    "readOnly": true, 
                    "enum": [
                        "extension"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "name": {
                    "type": "string", 
                    "maxLength": 140
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string"
                }
            }, 
            "description": "The reference to a extension"
        }, 
        "extension_resources": {
            "title": "Extension resources", 
            "required": [
                "available_extension_ref", 
                "state"
            ], 
            "type": "object", 
            "properties": {
                "container_host": {
                    "type": "string", 
                    "description": "Container host address"
                }, 
                "container_state": {
                    "enum": [
                        "QUEUED", 
                        "IMAGE_DOWNLOADED", 
                        "CREATED", 
                        "RUNNING", 
                        "STOPPED", 
                        "KILLED", 
                        "REMOVED", 
                        "DELETED", 
                        "PAUSED"
                    ], 
                    "type": "string", 
                    "description": "State of extension container"
                }, 
                "state": {
                    "enum": [
                        "INSTALLING", 
                        "RUNNING", 
                        "STOPPED", 
                        "UNINSTALLED"
                    ], 
                    "type": "string", 
                    "description": "State of extension"
                }, 
                "available_extension_ref": {
                    "type": "object", 
                    "$ref": "#/definitions/available_extension_resources"
                }
            }, 
            "description": "Extension resources"
        }, 
        "extension_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "status": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "Only value possible is \"failure\"."
                }, 
                "kind": {
                    "default": "extension", 
                    "readOnly": true, 
                    "enum": [
                        "extension"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "details": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "readOnly": true, 
                    "type": "object", 
                    "description": "Custom key-value details relevant to the status."
                }, 
                "message": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "A sentence explaining the reason for the status."
                }, 
                "reason": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "One snake_case word."
                }, 
                "api_version": {
                    "readOnly": true, 
                    "type": "string"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "extension_store_credential_response": {
            "title": "Extension store details get response", 
            "required": [
                "uuid", 
                "username", 
                "password", 
                "url"
            ], 
            "type": "object", 
            "properties": {
                "username": {
                    "type": "string", 
                    "description": "User name of the docker registry"
                }, 
                "url": {
                    "type": "string", 
                    "description": "URL of the docker registry"
                }, 
                "password": {
                    "type": "string", 
                    "description": "Password of the user for the docker registry"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "UUID for docker registry credentials store"
                }
            }, 
            "description": "Get extension store details"
        }, 
        "extension_store_list_metadata": {
            "title": "Metadata for extension_store list", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "extension_store", 
                    "readOnly": true, 
                    "enum": [
                        "extension_store"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found for the kind"
                }, 
                "sort_column": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "extension_store_metadata": {
            "title": "extension_store metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "type": "string", 
                    "description": "Time when extension_store was last updated"
                }, 
                "kind": {
                    "default": "extension_store", 
                    "readOnly": true, 
                    "enum": [
                        "extension_store"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "extension_store uuid"
                }, 
                "creation_time": {
                    "type": "string", 
                    "description": "Time when extension_store was created"
                }, 
                "account_reference": {
                    "$ref": "#/definitions/account_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the extension_store"
                }, 
                "parent_reference": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "If present, spec was copied from the referenced entity. Could have\nbeen a live entity, backup, snapshot or template entity. This field\nis special as it is the only field in metadata that is modifiable by\nthe user in case of template-based upgrades and in-place reverts.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "entity_version": {
                    "type": "integer", 
                    "description": "Monotonically increasing number"
                }, 
                "name": {
                    "type": "string", 
                    "description": "extension_store name", 
                    "maxLength": 140
                }
            }, 
            "description": "The extension_store kind metadata"
        }, 
        "extension_store_reference": {
            "title": "Reference to a extension_store", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "extension_store", 
                    "readOnly": true, 
                    "enum": [
                        "extension_store"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "name": {
                    "type": "string", 
                    "maxLength": 140
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string"
                }
            }, 
            "description": "The reference to a extension_store"
        }, 
        "extension_store_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "status": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "Only value possible is \"failure\"."
                }, 
                "kind": {
                    "default": "extension_store", 
                    "readOnly": true, 
                    "enum": [
                        "extension_store"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "details": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "readOnly": true, 
                    "type": "object", 
                    "description": "Custom key-value details relevant to the status."
                }, 
                "message": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "A sentence explaining the reason for the status."
                }, 
                "reason": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "One snake_case word."
                }, 
                "api_version": {
                    "readOnly": true, 
                    "type": "string"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "generator": {
            "type": "string", 
            "description": "TODO", 
            "title": "Generator"
        }, 
        "groups_aggregation_function": {
            "enum": [
                "SUM", 
                "AVG", 
                "MIN", 
                "MAX", 
                "LAST", 
                "COUNT", 
                "BUCKETS"
            ], 
            "type": "string", 
            "description": "Downsampling function to take time series data and resolve to one value for aggregation purposes", 
            "title": "Entities Request Aggregation Function"
        }, 
        "groups_attribute_type": {
            "enum": [
                "CONTINUOUS", 
                "DISCRETE"
            ], 
            "type": "string", 
            "description": "The type of an attribute being used for grouping - may be continuous or discrete", 
            "title": "Attribute Type"
        }, 
        "groups_bucket_summary_map": {
            "additionalProperties": {
                "type": "integer", 
                "format": "int64"
            }, 
            "type": "object", 
            "description": "Group Bucket Summaty Map", 
            "title": "Group Buckets Summary Map"
        }, 
        "groups_entity": {
            "title": "Entity", 
            "type": "object", 
            "properties": {
                "entity_id": {
                    "type": "string"
                }, 
                "data": {
                    "items": {
                        "$ref": "#/definitions/groups_field_data"
                    }, 
                    "type": "array"
                }
            }, 
            "description": "An Individual Entity"
        }, 
        "groups_field_data": {
            "title": "Group Summary Data", 
            "type": "object", 
            "properties": {
                "buckets": {
                    "$ref": "#/definitions/groups_bucket_summary_map"
                }, 
                "values": {
                    "items": {
                        "$ref": "#/definitions/groups_timevalue_pair"
                    }, 
                    "type": "array"
                }, 
                "name": {
                    "type": "string", 
                    "maxLength": 140
                }
            }, 
            "description": "Group Summary Data"
        }, 
        "groups_get_entities_request": {
            "title": "Get Entities Request", 
            "required": [
                "entity_type"
            ], 
            "type": "object", 
            "properties": {
                "number_of_intervals_for_latest_data": {
                    "type": "integer", 
                    "description": "When retrieving latest values, how far back to look as a multiple of the downsampling interval for the metric", 
                    "format": "int32"
                }, 
                "filter_criteria": {
                    "type": "string", 
                    "description": "FIQL criteria that will be used to filter the returned data"
                }, 
                "group_sort_attribute": {
                    "type": "string", 
                    "description": "The name of the attribute that will be used to sort groups"
                }, 
                "group_attributes": {
                    "items": {
                        "$ref": "#/definitions/groups_requested_attribute"
                    }, 
                    "type": "array"
                }, 
                "number_of_buckets": {
                    "type": "integer", 
                    "description": "For grouping, how many groups to return", 
                    "format": "int32"
                }, 
                "entity_ids": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "A set of entities that the request will be scoped to"
                }, 
                "group_count": {
                    "type": "integer", 
                    "description": "The maximum number of groups to return in the result", 
                    "format": "int64"
                }, 
                "group_member_attributes": {
                    "items": {
                        "$ref": "#/definitions/groups_requested_attribute"
                    }, 
                    "type": "array"
                }, 
                "group_member_sort_attribute": {
                    "type": "string", 
                    "description": "The name of the attribute that will be used to sort group members"
                }, 
                "bucket_boundary": {
                    "type": "integer", 
                    "description": "For grouping, the boundary to snap to when grouping", 
                    "format": "int32"
                }, 
                "group_offset": {
                    "type": "integer", 
                    "description": "The offset into the total set of groups to return", 
                    "format": "int64"
                }, 
                "interval_end_ms": {
                    "default": 0, 
                    "type": "integer", 
                    "description": "For a time-series query, the end of the interval since the epoch in ms. Default is latest value only.", 
                    "format": "int64"
                }, 
                "downsampling_interval": {
                    "type": "integer", 
                    "description": "Dwonsampling interval to apply to query if override is desired", 
                    "format": "int32"
                }, 
                "interval_start_ms": {
                    "default": 0, 
                    "type": "integer", 
                    "description": "For a time-series query, the start of the interval since the epoch in ms. Default is latest value only.", 
                    "format": "int64"
                }, 
                "entity_type": {
                    "type": "string", 
                    "description": "The entity type that will be requested"
                }, 
                "grouping_attribute_type": {
                    "$ref": "#/definitions/groups_attribute_type"
                }, 
                "group_member_offset": {
                    "type": "integer", 
                    "description": "The offset into the total member set to return per group", 
                    "format": "int64"
                }, 
                "group_member_count": {
                    "type": "integer", 
                    "description": "The maximum number of members to return per group", 
                    "format": "int64"
                }, 
                "grouping_attribute": {
                    "type": "string", 
                    "description": "Attribute that will be used to perform a group-by if needed"
                }, 
                "group_member_sort_downsampling_function": {
                    "$ref": "#/definitions/groups_sort_downsampling_function"
                }, 
                "group_member_sort_order": {
                    "$ref": "#/definitions/groups_sort_order"
                }, 
                "query_name": {
                    "type": "string", 
                    "description": "A custom name to use for tagging the query when debugging"
                }, 
                "group_sort_order": {
                    "$ref": "#/definitions/groups_sort_order"
                }, 
                "group_sort_downsample_function": {
                    "$ref": "#/definitions/groups_sort_downsampling_function"
                }
            }, 
            "description": "Get Entities Request"
        }, 
        "groups_get_entities_response": {
            "title": "Get Entities Response", 
            "type": "object", 
            "properties": {
                "filtered_entity_count": {
                    "type": "integer", 
                    "format": "int64"
                }, 
                "group_results": {
                    "items": {
                        "$ref": "#/definitions/groups_group_result"
                    }, 
                    "type": "array"
                }, 
                "total_group_count": {
                    "type": "integer", 
                    "format": "int64"
                }, 
                "total_entity_count": {
                    "type": "integer", 
                    "format": "int64"
                }, 
                "entity_type": {
                    "type": "string"
                }
            }, 
            "description": "Get Entities Response"
        }, 
        "groups_group_result": {
            "title": "Group Result", 
            "type": "object", 
            "properties": {
                "entity_results": {
                    "items": {
                        "$ref": "#/definitions/groups_entity"
                    }, 
                    "type": "array"
                }, 
                "group_by_column_value": {
                    "type": "string"
                }, 
                "total_entity_count": {
                    "type": "integer", 
                    "format": "int64"
                }, 
                "group_summaries": {
                    "$ref": "#/definitions/groups_group_summary_map"
                }
            }, 
            "description": "Group Result"
        }, 
        "groups_group_summary_map": {
            "additionalProperties": {
                "$ref": "#/definitions/groups_field_data"
            }, 
            "type": "object", 
            "description": "Group Summary Info Map", 
            "title": "Group Summary Map"
        }, 
        "groups_requested_attribute": {
            "title": "Entities Request Attribute", 
            "required": [
                "attribute"
            ], 
            "type": "object", 
            "properties": {
                "attribute": {
                    "type": "string"
                }, 
                "operation": {
                    "$ref": "#/definitions/groups_aggregation_function"
                }
            }, 
            "description": "An attribute that has been requested to be returned in the response"
        }, 
        "groups_sort_downsampling_function": {
            "enum": [
                "MAX", 
                "MIN", 
                "FIRST", 
                "LAST", 
                "LATEST"
            ], 
            "type": "string", 
            "description": "Downsampling function to take time series data and resolve to one value for sorting purposes", 
            "title": "Entities Request Downsampling Function"
        }, 
        "groups_sort_order": {
            "enum": [
                "ASCENDING", 
                "DESCENDING"
            ], 
            "type": "string", 
            "description": "Sort order for entities and entity groups", 
            "title": "Entities Request Sort Order"
        }, 
        "groups_timevalue_pair": {
            "title": "Time-Value Pair", 
            "type": "object", 
            "properties": {
                "values": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array"
                }, 
                "time": {
                    "type": "integer", 
                    "format": "int64"
                }
            }, 
            "description": "Time-Value Pair Data"
        }, 
        "host": {
            "title": "Host Input definition", 
            "required": [
                "name"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Host Name", 
                    "maxLength": 140
                }, 
                "resources": {
                    "type": "object", 
                    "description": "Cluster resources", 
                    "properties": {
                        "hostConfig": {
                            "$ref": "#/definitions/host_config"
                        }
                    }
                }
            }, 
            "description": "Host Definition"
        }, 
        "host_config": {
            "title": "Configurable properties of Host", 
            "required": [
                "controller_vm_ip", 
                "hypervisor_ip", 
                "ipmi_address"
            ], 
            "type": "object", 
            "properties": {
                "controller_vm_ip": {
                    "type": "string", 
                    "description": "Controller VM IP"
                }, 
                "hypervisor_ip": {
                    "type": "string", 
                    "description": "Hypervisor IP"
                }, 
                "ipmi_address": {
                    "type": "string", 
                    "description": "IPMI IP address"
                }, 
                "mask": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "subnet mask"
                }, 
                "subnet": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "subnet"
                }
            }, 
            "description": "Host basic configuration"
        }, 
        "host_def_status": {
            "title": "Host Status", 
            "required": [
                "resources", 
                "name"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Host Name", 
                    "maxLength": 140
                }, 
                "resources": {
                    "title": "Host Resources", 
                    "required": [
                        "host_config", 
                        "host_info"
                    ], 
                    "type": "object", 
                    "properties": {
                        "host_info": {
                            "$ref": "#/definitions/host_info"
                        }, 
                        "host_nics_list": {
                            "items": {
                                "$ref": "#/definitions/host_nic"
                            }, 
                            "type": "array", 
                            "description": "Host Nics"
                        }, 
                        "host_config": {
                            "$ref": "#/definitions/host_config"
                        }, 
                        "oplog_usage": {
                            "$ref": "#/definitions/oplog_usage"
                        }
                    }, 
                    "description": "Host resources"
                }
            }, 
            "description": "Host Status definition"
        }, 
        "host_hardware_info": {
            "title": "Host hardware info", 
            "type": "object", 
            "properties": {
                "cpu_capacity": {
                    "type": "integer", 
                    "description": "Host CPU capacity", 
                    "format": "int64"
                }, 
                "num_cpu_sockets": {
                    "type": "integer", 
                    "description": "Number of CPU sockets"
                }, 
                "num_cpu_cores": {
                    "type": "integer", 
                    "description": "Number of CPU cores on Host"
                }, 
                "cpu_model": {
                    "type": "string", 
                    "description": "Host CPU model"
                }, 
                "memory_capacity": {
                    "type": "string", 
                    "description": "Host memory capacity in bytes"
                }
            }, 
            "description": "Host CPU configuration information"
        }, 
        "host_info": {
            "title": "Read only information of host", 
            "type": "object", 
            "properties": {
                "num_vms": {
                    "type": "integer", 
                    "description": "Num of VMs running on this Host"
                }, 
                "hypervisor_full_name": {
                    "type": "string", 
                    "description": "Full name of hypervisor running on Host"
                }, 
                "host_hardware_info": {
                    "$ref": "#/definitions/host_hardware_info"
                }, 
                "host_serial_info": {
                    "$ref": "#/definitions/host_serial_info"
                }, 
                "monitor_status": {
                    "items": {
                        "enum": [
                            "MONITORED", 
                            "NOT_MONITORED"
                        ], 
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Host monitoring status"
                }
            }, 
            "description": "Host readonly information"
        }, 
        "host_intent_input": {
            "title": "host Intent Entity", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "metadata": {
                    "$ref": "#/definitions/host_metadata"
                }, 
                "spec": {
                    "$ref": "#/definitions/host"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "options": {
                    "$ref": "#/definitions/options"
                }
            }, 
            "description": "An intentful representation of a host"
        }, 
        "host_intent_resource": {
            "title": "host Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/host_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/host"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/host_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a host"
        }, 
        "host_intent_response": {
            "title": "host Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/host_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/host"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/host_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a host"
        }, 
        "host_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/host_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/host_list_metadata"
                }
            }, 
            "description": "Response object for intentful operation of hosts"
        }, 
        "host_list_metadata": {
            "title": "Metadata for host list", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "host", 
                    "readOnly": true, 
                    "enum": [
                        "host"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found for the kind"
                }, 
                "sort_column": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "host_metadata": {
            "title": "host metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "type": "string", 
                    "description": "Time when host was last updated"
                }, 
                "kind": {
                    "default": "host", 
                    "readOnly": true, 
                    "enum": [
                        "host"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "host uuid"
                }, 
                "creation_time": {
                    "type": "string", 
                    "description": "Time when host was created"
                }, 
                "account_reference": {
                    "$ref": "#/definitions/account_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the host"
                }, 
                "parent_reference": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "If present, spec was copied from the referenced entity. Could have\nbeen a live entity, backup, snapshot or template entity. This field\nis special as it is the only field in metadata that is modifiable by\nthe user in case of template-based upgrades and in-place reverts.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "entity_version": {
                    "type": "integer", 
                    "description": "Monotonically increasing number"
                }, 
                "name": {
                    "type": "string", 
                    "description": "host name", 
                    "maxLength": 140
                }
            }, 
            "description": "The host kind metadata"
        }, 
        "host_nic": {
            "title": "Host Nic", 
            "required": [
                "name"
            ], 
            "type": "object", 
            "properties": {
                "tx_pkt_errors": {
                    "type": "integer", 
                    "description": "TX PKT Errors", 
                    "format": "int64"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the host nic"
                }, 
                "rx_pkts": {
                    "type": "integer", 
                    "description": "RX PKTS", 
                    "format": "int64"
                }, 
                "rx_pkt_errors": {
                    "type": "integer", 
                    "description": "RX PKT Errors", 
                    "format": "int64"
                }, 
                "dropped_tx_pkts": {
                    "type": "integer", 
                    "description": "Dropped TX PKTS", 
                    "format": "int64"
                }, 
                "dropped_rx_pkts": {
                    "type": "integer", 
                    "description": "Dropped RX PKTS", 
                    "format": "int64"
                }, 
                "speed_kbps": {
                    "type": "integer", 
                    "description": "Speed in KBPS"
                }, 
                "mac_address": {
                    "type": "string", 
                    "description": "Mac address"
                }, 
                "tx_pkts": {
                    "type": "integer", 
                    "description": "TX PKTS", 
                    "format": "int64"
                }
            }, 
            "description": "Host Nic"
        }, 
        "host_reference": {
            "title": "Reference to a host", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "host", 
                    "readOnly": true, 
                    "enum": [
                        "host"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "name": {
                    "type": "string", 
                    "maxLength": 140
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string"
                }
            }, 
            "description": "The reference to a host"
        }, 
        "host_serial_info": {
            "title": "Host serial numbers", 
            "type": "object", 
            "properties": {
                "node_serial": {
                    "type": "string", 
                    "description": "Node serial number"
                }, 
                "block_serial": {
                    "type": "string", 
                    "description": "Rackable unit serial number"
                }, 
                "block_model": {
                    "type": "string", 
                    "description": "Rackable unit model name"
                }
            }, 
            "description": "Host serial information"
        }, 
        "host_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "status": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "Only value possible is \"failure\"."
                }, 
                "kind": {
                    "default": "host", 
                    "readOnly": true, 
                    "enum": [
                        "host"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "details": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "readOnly": true, 
                    "type": "object", 
                    "description": "Custom key-value details relevant to the status."
                }, 
                "message": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "A sentence explaining the reason for the status."
                }, 
                "reason": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "One snake_case word."
                }, 
                "api_version": {
                    "readOnly": true, 
                    "type": "string"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "http_proxy_whitelist": {
            "title": "Http Proxy Whiltelist", 
            "required": [
                "target", 
                "target_type"
            ], 
            "type": "object", 
            "properties": {
                "target": {
                    "type": "string"
                }, 
                "target_type": {
                    "enum": [
                        "IPV4_ADDRESS", 
                        "IPV4_NETWORK_MASK", 
                        "DOMAIN_NAME_SUFFIX", 
                        "HOST_NAME"
                    ], 
                    "type": "string"
                }
            }, 
            "description": "Http proxy whiltelist"
        }, 
        "hypervisor_server": {
            "title": "Hypervisor Server", 
            "required": [
                "name"
            ], 
            "type": "object", 
            "properties": {
                "version": {
                    "type": "string"
                }, 
                "type": {
                    "enum": [
                        "VMWARE", 
                        "XEN", 
                        "HYPERV", 
                        "KVM", 
                        "AMAZON_WEB_SERVICES", 
                        "VCENTER", 
                        "ACROPOLIS", 
                        "SCVMM", 
                        "NULL"
                    ], 
                    "type": "string"
                }, 
                "name": {
                    "type": "string"
                }
            }, 
            "description": "Hypervisor server information"
        }, 
        "idempotence_identifiers_input": {
            "title": "Idemopotence object", 
            "required": [
                "client_identifier", 
                "count"
            ], 
            "type": "object", 
            "properties": {
                "client_identifier": {
                    "type": "string", 
                    "description": "Client identifier string"
                }, 
                "count": {
                    "default": 1, 
                    "type": "integer", 
                    "description": "Number of idempotence identifier uuid"
                }
            }, 
            "description": "Resources for the idempotence identifier kind"
        }, 
        "idempotence_identifiers_list_metadata": {
            "title": "Metadata for idempotence_identifiers list", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "idempotence_identifiers", 
                    "readOnly": true, 
                    "enum": [
                        "idempotence_identifiers"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found for the kind"
                }, 
                "sort_column": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "idempotence_identifiers_metadata": {
            "title": "idempotence_identifiers metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "type": "string", 
                    "description": "Time when idempotence_identifiers was last updated"
                }, 
                "kind": {
                    "default": "idempotence_identifiers", 
                    "readOnly": true, 
                    "enum": [
                        "idempotence_identifiers"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "idempotence_identifiers uuid"
                }, 
                "creation_time": {
                    "type": "string", 
                    "description": "Time when idempotence_identifiers was created"
                }, 
                "account_reference": {
                    "$ref": "#/definitions/account_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the idempotence_identifiers"
                }, 
                "parent_reference": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "If present, spec was copied from the referenced entity. Could have\nbeen a live entity, backup, snapshot or template entity. This field\nis special as it is the only field in metadata that is modifiable by\nthe user in case of template-based upgrades and in-place reverts.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "entity_version": {
                    "type": "integer", 
                    "description": "Monotonically increasing number"
                }, 
                "name": {
                    "type": "string", 
                    "description": "idempotence_identifiers name", 
                    "maxLength": 140
                }
            }, 
            "description": "The idempotence_identifiers kind metadata"
        }, 
        "idempotence_identifiers_reference": {
            "title": "Reference to a idempotence_identifiers", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "idempotence_identifiers", 
                    "readOnly": true, 
                    "enum": [
                        "idempotence_identifiers"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "name": {
                    "type": "string", 
                    "maxLength": 140
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string"
                }
            }, 
            "description": "The reference to a idempotence_identifiers"
        }, 
        "idempotence_identifiers_response": {
            "title": "Idemopotence identifier status definition", 
            "required": [
                "client_identifier", 
                "count", 
                "uuid_list"
            ], 
            "type": "object", 
            "properties": {
                "client_identifier": {
                    "type": "string", 
                    "description": "Client identifier string"
                }, 
                "count": {
                    "default": 1, 
                    "type": "integer", 
                    "description": "Number of idempotence identifier uuid"
                }, 
                "uuid_list": {
                    "items": {
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "type": "string", 
                        "description": "UUID to identify the relationship"
                    }, 
                    "type": "array"
                }
            }, 
            "description": "Idemopotence identifier status definition"
        }, 
        "idempotence_identifiers_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "status": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "Only value possible is \"failure\"."
                }, 
                "kind": {
                    "default": "idempotence_identifiers", 
                    "readOnly": true, 
                    "enum": [
                        "idempotence_identifiers"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "details": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "readOnly": true, 
                    "type": "object", 
                    "description": "Custom key-value details relevant to the status."
                }, 
                "message": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "A sentence explaining the reason for the status."
                }, 
                "reason": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "One snake_case word."
                }, 
                "api_version": {
                    "readOnly": true, 
                    "type": "string"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "image": {
            "title": "Image", 
            "required": [
                "metadata", 
                "api_version"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/image_resources_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/image_spec"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/image_metadata"
                }
            }, 
            "description": "Image entity"
        }, 
        "image_list": {
            "title": "Image entity list", 
            "required": [
                "metadata", 
                "api_version", 
                "entities"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/image"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/image_list_metadata"
                }
            }, 
            "description": "Image entity list"
        }, 
        "image_list_metadata": {
            "title": "Metadata for image list", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "image", 
                    "readOnly": true, 
                    "enum": [
                        "image"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found for the kind"
                }, 
                "sort_column": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "image_metadata": {
            "title": "image metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "type": "string", 
                    "description": "Time when image was last updated"
                }, 
                "kind": {
                    "default": "image", 
                    "readOnly": true, 
                    "enum": [
                        "image"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "image uuid"
                }, 
                "creation_time": {
                    "type": "string", 
                    "description": "Time when image was created"
                }, 
                "account_reference": {
                    "$ref": "#/definitions/account_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the image"
                }, 
                "parent_reference": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "If present, spec was copied from the referenced entity. Could have\nbeen a live entity, backup, snapshot or template entity. This field\nis special as it is the only field in metadata that is modifiable by\nthe user in case of template-based upgrades and in-place reverts.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "entity_version": {
                    "type": "integer", 
                    "description": "Monotonically increasing number"
                }, 
                "name": {
                    "type": "string", 
                    "description": "image name", 
                    "maxLength": 140
                }
            }, 
            "description": "The image kind metadata"
        }, 
        "image_reference": {
            "title": "Reference to a image", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "image", 
                    "readOnly": true, 
                    "enum": [
                        "image"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "name": {
                    "type": "string", 
                    "maxLength": 140
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string"
                }
            }, 
            "description": "The reference to a image"
        }, 
        "image_resources": {
            "title": "Image object", 
            "required": [
                "name"
            ], 
            "type": "object", 
            "properties": {
                "image_state": {
                    "readOnly": true, 
                    "$ref": "#/definitions/image_state"
                }, 
                "logical_timestamp": {
                    "type": "integer", 
                    "format": "long"
                }, 
                "image_type": {
                    "$ref": "#/definitions/image_type"
                }, 
                "checksum": {
                    "description": "Checksum of the image. Should only be set when being used to validate an image when setting the source of an image, otherwise this is generated by image service.", 
                    "$ref": "#/definitions/checksum"
                }, 
                "product_version": {
                    "type": "string"
                }, 
                "name": {
                    "type": "string", 
                    "maxLength": 140
                }, 
                "image_uri": {
                    "type": "string", 
                    "description": "Image URI. This field is only used when creating/updating an image or fetching image details. Note that when fetching image details this will be a reference to an ADSF disk"
                }, 
                "size_bytes": {
                    "readOnly": true, 
                    "type": "integer", 
                    "format": "long"
                }, 
                "product_name": {
                    "type": "string"
                }, 
                "description": {
                    "type": "string", 
                    "maxLength": 1000
                }
            }, 
            "description": "Image object"
        }, 
        "image_resources_status": {
            "title": "Image object status", 
            "type": "object", 
            "properties": {
                "state": {
                    "type": "string", 
                    "description": "The state of the image"
                }, 
                "resources": {
                    "$ref": "#/definitions/image_resources"
                }, 
                "task_reference": {
                    "description": "The UUID of the task tracking the resource. This is only specified when the image is in a pending state.", 
                    "$ref": "#/definitions/reference"
                }
            }, 
            "description": "Image object status"
        }, 
        "image_spec": {
            "title": "Image spec", 
            "properties": {
                "resources": {
                    "$ref": "#/definitions/image_resources"
                }
            }, 
            "description": "Image spec"
        }, 
        "image_state": {
            "enum": [
                "COMPLETE", 
                "INCOMPLETE"
            ], 
            "type": "string", 
            "description": "Current state of the image", 
            "title": "Image state"
        }, 
        "image_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "status": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "Only value possible is \"failure\"."
                }, 
                "kind": {
                    "default": "image", 
                    "readOnly": true, 
                    "enum": [
                        "image"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "details": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "readOnly": true, 
                    "type": "object", 
                    "description": "Custom key-value details relevant to the status."
                }, 
                "message": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "A sentence explaining the reason for the status."
                }, 
                "reason": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "One snake_case word."
                }, 
                "api_version": {
                    "readOnly": true, 
                    "type": "string"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "image_type": {
            "enum": [
                "DISK_IMAGE", 
                "ISO_IMAGE"
            ], 
            "type": "string", 
            "description": "The type of image", 
            "title": "Image type"
        }, 
        "image_update_request": {
            "title": "Image update request", 
            "required": [
                "api_version", 
                "spec"
            ], 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/image"
                }, 
                "api_version": {
                    "type": "string"
                }
            }, 
            "description": "Request to update an image"
        }, 
        "internal_common_metadata": {
            "title": "Common Metadata", 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The date and time when the object was last updated.", 
                    "format": "date-time"
                }, 
                "kind": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The entitys kind"
                }, 
                "uuid": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The UUID of the entity.", 
                    "format": "UUID"
                }, 
                "rel": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The relative url that produced this result."
                }, 
                "deletion_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The date and time when the object was deleted. This field\nis only updated by the system as a side-effect of a delete operation.\nPolicies indicating \"expiration_time\" of objects should be\nexpressed in the \"spec\" section so that they can be updated by the\nuser.\n", 
                    "format": "date-time"
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The date and time when the object was created.", 
                    "format": "date-time"
                }, 
                "entity_version": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "Monotonically increasing version of the \"spec\"."
                }
            }, 
            "description": "The common set of metadata attributes for all entity kinds."
        }, 
        "ip_config": {
            "title": "IP config", 
            "type": "object", 
            "properties": {
                "pool": {
                    "items": {
                        "$ref": "#/definitions/ip_pool"
                    }, 
                    "type": "array"
                }, 
                "prefix_length": {
                    "type": "string"
                }, 
                "default_gateway": {
                    "type": "string"
                }, 
                "network_address": {
                    "type": "string"
                }, 
                "dhcp_options": {
                    "$ref": "#/definitions/dhcp_options"
                }, 
                "dhcp_server_address": {
                    "type": "string"
                }
            }, 
            "description": "IP config"
        }, 
        "ip_pool": {
            "title": "IP pool", 
            "type": "object", 
            "properties": {
                "range": {
                    "type": "string"
                }
            }, 
            "description": "IP pool"
        }, 
        "job": {
            "title": "Job Definition", 
            "required": [
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Job Name", 
                    "maxLength": 140
                }, 
                "resources": {
                    "type": "object", 
                    "description": "Job resources", 
                    "properties": {
                        "operation_type": {
                            "enum": [
                                "VALIDATE", 
                                "TEST", 
                                "PLANNED_FAILOVER", 
                                "UNPLANNED_FAILOVER", 
                                "PREPARE_FAILBACK"
                            ], 
                            "type": "string", 
                            "description": "Type of operation performed by this job"
                        }, 
                        "job_action": {
                            "enum": [
                                "PAUSE", 
                                "RESUME", 
                                "CLEANUP", 
                                "ABORT"
                            ], 
                            "type": "string", 
                            "description": "Action to be taken on job"
                        }, 
                        "workflow_uuid": {
                            "type": "string", 
                            "description": "Uuid of the workflow this job belongs to"
                        }, 
                        "workflow_state": {
                            "description": "State of workflow when job is executed", 
                            "$ref": "#/definitions/workflow"
                        }
                    }
                }
            }, 
            "description": "Job Definition"
        }, 
        "job_def_status": {
            "title": "Job Definition", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Job Name", 
                    "maxLength": 140
                }, 
                "resources": {
                    "type": "object", 
                    "description": "Job resources", 
                    "properties": {
                        "workflow_state": {
                            "description": "State of workflow when job execution is started", 
                            "$ref": "#/definitions/workflow"
                        }, 
                        "stages": {
                            "items": {
                                "$ref": "#/definitions/stage_progress"
                            }, 
                            "type": "array", 
                            "description": "Status of stages of execution for this job"
                        }, 
                        "workflow_uuid": {
                            "type": "string", 
                            "description": "Uuid of the workflow this job belongs to"
                        }, 
                        "execution_status": {
                            "$ref": "#/definitions/execution_status"
                        }
                    }
                }
            }, 
            "description": "Job Definition"
        }, 
        "job_execution_arg": {
            "title": "Parameters for execution of the job", 
            "type": "object", 
            "properties": {
                "reference_time": {
                    "type": "integer", 
                    "description": "Time with respect to which job has to be executed", 
                    "format": "int64"
                }, 
                "job_execution_type": {
                    "enum": [
                        "TEST", 
                        "PLANNED_FAIL_OVER", 
                        "UNPLANNED_FAIL_OVER", 
                        "SYNCNOW", 
                        "VALIDATE"
                    ], 
                    "type": "string", 
                    "description": "Execution type for recovery plan"
                }
            }, 
            "description": "Parameters for execution of the job"
        }, 
        "job_info": {
            "title": "Information about a job associated workflow", 
            "required": [
                "job_uuid"
            ], 
            "type": "object", 
            "properties": {
                "job_uuid": {
                    "type": "string", 
                    "description": "UUID of a job associated with this workflow."
                }
            }, 
            "description": "Information about a job associated workflow"
        }, 
        "job_intent_input": {
            "title": "job Intent Entity", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "metadata": {
                    "$ref": "#/definitions/job_metadata"
                }, 
                "spec": {
                    "$ref": "#/definitions/job"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "options": {
                    "$ref": "#/definitions/options"
                }
            }, 
            "description": "An intentful representation of a job"
        }, 
        "job_intent_resource": {
            "title": "job Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/job_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/job"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/job_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a job"
        }, 
        "job_intent_response": {
            "title": "job Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/job_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/job"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/job_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a job"
        }, 
        "job_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/job_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/job_list_metadata"
                }
            }, 
            "description": "Response object for intentful operation of jobs"
        }, 
        "job_list_metadata": {
            "title": "Metadata for job list", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "job", 
                    "readOnly": true, 
                    "enum": [
                        "job"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found for the kind"
                }, 
                "sort_column": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "job_metadata": {
            "title": "job metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "type": "string", 
                    "description": "Time when job was last updated"
                }, 
                "kind": {
                    "default": "job", 
                    "readOnly": true, 
                    "enum": [
                        "job"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "job uuid"
                }, 
                "creation_time": {
                    "type": "string", 
                    "description": "Time when job was created"
                }, 
                "account_reference": {
                    "$ref": "#/definitions/account_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the job"
                }, 
                "parent_reference": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "If present, spec was copied from the referenced entity. Could have\nbeen a live entity, backup, snapshot or template entity. This field\nis special as it is the only field in metadata that is modifiable by\nthe user in case of template-based upgrades and in-place reverts.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "entity_version": {
                    "type": "integer", 
                    "description": "Monotonically increasing number"
                }, 
                "name": {
                    "type": "string", 
                    "description": "job name", 
                    "maxLength": 140
                }
            }, 
            "description": "The job kind metadata"
        }, 
        "job_reference": {
            "title": "Reference to a job", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "job", 
                    "readOnly": true, 
                    "enum": [
                        "job"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "name": {
                    "type": "string", 
                    "maxLength": 140
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string"
                }
            }, 
            "description": "The reference to a job"
        }, 
        "job_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "status": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "Only value possible is \"failure\"."
                }, 
                "kind": {
                    "default": "job", 
                    "readOnly": true, 
                    "enum": [
                        "job"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "details": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "readOnly": true, 
                    "type": "object", 
                    "description": "Custom key-value details relevant to the status."
                }, 
                "message": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "A sentence explaining the reason for the status."
                }, 
                "reason": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "One snake_case word."
                }, 
                "api_version": {
                    "readOnly": true, 
                    "type": "string"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "key_management_server": {
            "title": "Key Management Server", 
            "type": "object", 
            "properties": {
                "active": {
                    "type": "boolean", 
                    "description": "Indicates if the key management server is being used"
                }, 
                "ip_config_list": {
                    "items": {
                        "$ref": "#/definitions/server_ip_config"
                    }, 
                    "type": "array", 
                    "description": "List of ip configuration for the key management server. Key management\nserver can be a cluster (with multiple nodes) of its own for\nfault-tolerance. Ip configuration indicates ip address (or host name)\nand corresponding port number\n"
                }, 
                "uuid": {
                    "type": "string", 
                    "description": "Key management server uuid"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Key management server name"
                }
            }, 
            "description": "Cluster key management server"
        }, 
        "multicluster_config_spec": {
            "title": "Specification for multicluster configuration request", 
            "required": [
                "execution_plan", 
                "spec_list"
            ], 
            "type": "object", 
            "properties": {
                "execution_plan": {
                    "$ref": "#/definitions/execution_plan"
                }, 
                "spec_list": {
                    "items": {
                        "$ref": "#/definitions/cluster_intent_input"
                    }, 
                    "type": "array"
                }
            }, 
            "description": "Specification for multicluster configuration request"
        }, 
        "multicluster_config_status": {
            "title": "Status for multicluster config request", 
            "required": [
                "execution_plan", 
                "status_list"
            ], 
            "type": "object", 
            "properties": {
                "execution_plan": {
                    "$ref": "#/definitions/execution_plan"
                }, 
                "status_list": {
                    "items": {
                        "$ref": "#/definitions/entity_task_status"
                    }, 
                    "type": "array"
                }
            }, 
            "description": "Status for multicluster config request"
        }, 
        "network": {
            "title": "Create network request", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/network_resources"
                }, 
                "spec": {
                    "$ref": "#/definitions/network_resources"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/network_metadata"
                }
            }, 
            "description": "Request to make a network"
        }, 
        "network_list": {
            "title": "Network entity list", 
            "required": [
                "metadata", 
                "api_version", 
                "entities"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/network_resources"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/network_list_metadata"
                }
            }, 
            "description": "Network entity list"
        }, 
        "network_list_metadata": {
            "title": "Metadata for network list", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "network", 
                    "readOnly": true, 
                    "enum": [
                        "network"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found for the kind"
                }, 
                "sort_column": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "network_metadata": {
            "title": "network metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "type": "string", 
                    "description": "Time when network was last updated"
                }, 
                "kind": {
                    "default": "network", 
                    "readOnly": true, 
                    "enum": [
                        "network"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "network uuid"
                }, 
                "creation_time": {
                    "type": "string", 
                    "description": "Time when network was created"
                }, 
                "account_reference": {
                    "$ref": "#/definitions/account_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the network"
                }, 
                "parent_reference": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "If present, spec was copied from the referenced entity. Could have\nbeen a live entity, backup, snapshot or template entity. This field\nis special as it is the only field in metadata that is modifiable by\nthe user in case of template-based upgrades and in-place reverts.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "entity_version": {
                    "type": "integer", 
                    "description": "Monotonically increasing number"
                }, 
                "name": {
                    "type": "string", 
                    "description": "network name", 
                    "maxLength": 140
                }
            }, 
            "description": "The network kind metadata"
        }, 
        "network_reference": {
            "title": "Reference to a network", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "network", 
                    "readOnly": true, 
                    "enum": [
                        "network"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "name": {
                    "type": "string", 
                    "maxLength": 140
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string"
                }
            }, 
            "description": "The reference to a network"
        }, 
        "network_resources": {
            "title": "Network creation/modification spec", 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Network name"
                }, 
                "resources": {
                    "type": "object", 
                    "properties": {
                        "packet_processor_chain_reference": {
                            "$ref": "#/definitions/packet_processor_chain_reference"
                        }, 
                        "vxlan_id": {
                            "type": "integer", 
                            "format": "int32"
                        }, 
                        "vswitch_name": {
                            "type": "string"
                        }, 
                        "ip_config": {
                            "$ref": "#/definitions/ip_config"
                        }, 
                        "uuid": {
                            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                            "type": "string"
                        }, 
                        "vlan_id": {
                            "type": "integer", 
                            "format": "int32"
                        }, 
                        "logical_timestamp": {
                            "type": "integer", 
                            "format": "int64"
                        }
                    }, 
                    "title": "Network resource"
                }, 
                "description": {
                    "type": "string", 
                    "description": "A description for the network"
                }
            }, 
            "description": "Network creation/modification spec"
        }, 
        "network_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "status": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "Only value possible is \"failure\"."
                }, 
                "kind": {
                    "default": "network", 
                    "readOnly": true, 
                    "enum": [
                        "network"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "details": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "readOnly": true, 
                    "type": "object", 
                    "description": "Custom key-value details relevant to the status."
                }, 
                "message": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "A sentence explaining the reason for the status."
                }, 
                "reason": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "One snake_case word."
                }, 
                "api_version": {
                    "readOnly": true, 
                    "type": "string"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "node_uuid_list": {
            "title": "List of node UUID", 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array"
                }
            }, 
            "description": "List of node UUID. If empty, all cluster nodes will be assumed."
        }, 
        "node_version": {
            "title": "Node Version", 
            "type": "object", 
            "properties": {
                "nos_version": {
                    "type": "string"
                }, 
                "nos_full_version": {
                    "type": "string"
                }, 
                "ncc_version": {
                    "type": "string", 
                    "description": "Current NCC version for the cluster. Each of the nodes in the cluster\nshould be at this NCC version or upgrading to this version\n"
                }
            }, 
            "description": "Cluster service node version"
        }, 
        "notifier": {
            "title": "Notifier", 
            "type": "object", 
            "properties": {
                "api_version": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/internal_common_metadata"
                }
            }, 
            "description": "A notifier entity that can be used to monitor progress with respect to a\nset of requests issued to a system.\n"
        }, 
        "oauth_client_input": {
            "title": "Oauth client", 
            "required": [
                "client_name", 
                "client_description", 
                "redirect_uris", 
                "default_scopes"
            ], 
            "type": "object", 
            "properties": {
                "client_name": {
                    "type": "string", 
                    "description": "client name of the Oauth Client", 
                    "maxLength": 140
                }, 
                "redirect_uris": {
                    "items": {
                        "type": "string", 
                        "description": "entry for redirect uris"
                    }, 
                    "type": "array"
                }, 
                "client_description": {
                    "type": "string", 
                    "description": "client description of the Oauth Client", 
                    "maxLength": 1000
                }, 
                "default_scopes": {
                    "items": {
                        "type": "string", 
                        "description": "entry for default scopes"
                    }, 
                    "type": "array"
                }
            }, 
            "description": "Oauth client information"
        }, 
        "oauth_client_list": {
            "title": "Oauth Client list", 
            "required": [
                "metadata", 
                "entities"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/oauth_client_response"
                    }, 
                    "type": "array"
                }, 
                "metadata": {
                    "$ref": "#/definitions/oauth_client_list_metadata"
                }
            }, 
            "description": "Oauth Client list"
        }, 
        "oauth_client_list_metadata": {
            "title": "Metadata for oauth_client list", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "oauth_client", 
                    "readOnly": true, 
                    "enum": [
                        "oauth_client"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found for the kind"
                }, 
                "sort_column": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "oauth_client_metadata": {
            "title": "oauth_client metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "type": "string", 
                    "description": "Time when oauth_client was last updated"
                }, 
                "kind": {
                    "default": "oauth_client", 
                    "readOnly": true, 
                    "enum": [
                        "oauth_client"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "oauth_client uuid"
                }, 
                "creation_time": {
                    "type": "string", 
                    "description": "Time when oauth_client was created"
                }, 
                "account_reference": {
                    "$ref": "#/definitions/account_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the oauth_client"
                }, 
                "parent_reference": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "If present, spec was copied from the referenced entity. Could have\nbeen a live entity, backup, snapshot or template entity. This field\nis special as it is the only field in metadata that is modifiable by\nthe user in case of template-based upgrades and in-place reverts.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "entity_version": {
                    "type": "integer", 
                    "description": "Monotonically increasing number"
                }, 
                "name": {
                    "type": "string", 
                    "description": "oauth_client name", 
                    "maxLength": 140
                }
            }, 
            "description": "The oauth_client kind metadata"
        }, 
        "oauth_client_reference": {
            "title": "Reference to a oauth_client", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "oauth_client", 
                    "readOnly": true, 
                    "enum": [
                        "oauth_client"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "name": {
                    "type": "string", 
                    "maxLength": 140
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string"
                }
            }, 
            "description": "The reference to a oauth_client"
        }, 
        "oauth_client_response": {
            "title": "Oauth Client response", 
            "required": [
                "client_id", 
                "client_secret", 
                "client_name", 
                "client_description", 
                "redirect_uris", 
                "default_scopes"
            ], 
            "type": "object", 
            "properties": {
                "redirect_uris": {
                    "items": {
                        "type": "string", 
                        "description": "entry for redirect uris"
                    }, 
                    "type": "array"
                }, 
                "client_id": {
                    "type": "string", 
                    "description": "client id of the Oauth Client"
                }, 
                "client_secret": {
                    "type": "string", 
                    "description": "client secret of the Oauth Client"
                }, 
                "client_name": {
                    "type": "string", 
                    "description": "client name of the Oauth Client", 
                    "maxLength": 140
                }, 
                "client_description": {
                    "type": "string", 
                    "description": "client description of the Oauth Client", 
                    "maxLength": 1000
                }, 
                "default_scopes": {
                    "items": {
                        "type": "string", 
                        "description": "entry for default scopes"
                    }, 
                    "type": "array"
                }
            }, 
            "description": "Oauth client information"
        }, 
        "oauth_client_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "status": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "Only value possible is \"failure\"."
                }, 
                "kind": {
                    "default": "oauth_client", 
                    "readOnly": true, 
                    "enum": [
                        "oauth_client"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "details": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "readOnly": true, 
                    "type": "object", 
                    "description": "Custom key-value details relevant to the status."
                }, 
                "message": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "A sentence explaining the reason for the status."
                }, 
                "reason": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "One snake_case word."
                }, 
                "api_version": {
                    "readOnly": true, 
                    "type": "string"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "oauth_generate_token_request": {
            "title": "Oauth token generate request", 
            "required": [
                "client_name", 
                "client_description", 
                "scopes"
            ], 
            "type": "object", 
            "properties": {
                "scopes": {
                    "items": {
                        "type": "string", 
                        "description": "entry for default scopes"
                    }, 
                    "type": "array"
                }, 
                "client_name": {
                    "type": "string", 
                    "description": "client name of the Oauth Client", 
                    "maxLength": 140
                }, 
                "client_description": {
                    "type": "string", 
                    "description": "client description of the Oauth Client", 
                    "maxLength": 1000
                }, 
                "expires_in": {
                    "type": "integer", 
                    "description": "Token expiration time in seconds", 
                    "format": "int64"
                }
            }, 
            "description": "Oauth token generate request"
        }, 
        "oauth_generate_token_response": {
            "title": "Oauth token generate response", 
            "required": [
                "client_id", 
                "client_secret", 
                "oauth_token"
            ], 
            "type": "object", 
            "properties": {
                "client_secret": {
                    "type": "string", 
                    "description": "client secret of the Oauth Client"
                }, 
                "oauth_token": {
                    "$ref": "#/definitions/oauth_token"
                }, 
                "client_id": {
                    "type": "string", 
                    "description": "client id of the Oauth Client"
                }
            }, 
            "description": "Oauth token generate response"
        }, 
        "oauth_list_metadata": {
            "title": "Metadata for oauth list", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "oauth", 
                    "readOnly": true, 
                    "enum": [
                        "oauth"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found for the kind"
                }, 
                "sort_column": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "oauth_metadata": {
            "title": "oauth metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "type": "string", 
                    "description": "Time when oauth was last updated"
                }, 
                "kind": {
                    "default": "oauth", 
                    "readOnly": true, 
                    "enum": [
                        "oauth"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "oauth uuid"
                }, 
                "creation_time": {
                    "type": "string", 
                    "description": "Time when oauth was created"
                }, 
                "account_reference": {
                    "$ref": "#/definitions/account_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the oauth"
                }, 
                "parent_reference": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "If present, spec was copied from the referenced entity. Could have\nbeen a live entity, backup, snapshot or template entity. This field\nis special as it is the only field in metadata that is modifiable by\nthe user in case of template-based upgrades and in-place reverts.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "entity_version": {
                    "type": "integer", 
                    "description": "Monotonically increasing number"
                }, 
                "name": {
                    "type": "string", 
                    "description": "oauth name", 
                    "maxLength": 140
                }
            }, 
            "description": "The oauth kind metadata"
        }, 
        "oauth_reference": {
            "title": "Reference to a oauth", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "oauth", 
                    "readOnly": true, 
                    "enum": [
                        "oauth"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "name": {
                    "type": "string", 
                    "maxLength": 140
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string"
                }
            }, 
            "description": "The reference to a oauth"
        }, 
        "oauth_register_token_request": {
            "title": "Oauth register token request", 
            "required": [
                "register_host", 
                "register_host_token"
            ], 
            "type": "object", 
            "properties": {
                "register_host": {
                    "$ref": "#/definitions/remote_host"
                }, 
                "register_host_token": {
                    "$ref": "#/definitions/oauth_generate_token_response"
                }, 
                "expires_in": {
                    "type": "integer", 
                    "description": "Expiration time in seconds for the generated token. Default is\nnever expires\n", 
                    "format": "int64"
                }, 
                "scopes": {
                    "items": {
                        "type": "string", 
                        "description": "entry for default scopes"
                    }, 
                    "type": "array", 
                    "description": "Scopes for the generated token"
                }
            }, 
            "description": "Request to register the token of the remote host and require the access\ntoken from the local server\n"
        }, 
        "oauth_register_token_response": {
            "title": "Oauth register token response", 
            "required": [
                "host", 
                "host_token"
            ], 
            "type": "object", 
            "properties": {
                "host": {
                    "$ref": "#/definitions/remote_host"
                }, 
                "host_token": {
                    "$ref": "#/definitions/oauth_generate_token_response"
                }
            }, 
            "description": "Upon register token succeeds, return e host details and its access\ntoken to create security channel\n"
        }, 
        "oauth_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "status": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "Only value possible is \"failure\"."
                }, 
                "kind": {
                    "default": "oauth", 
                    "readOnly": true, 
                    "enum": [
                        "oauth"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "details": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "readOnly": true, 
                    "type": "object", 
                    "description": "Custom key-value details relevant to the status."
                }, 
                "message": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "A sentence explaining the reason for the status."
                }, 
                "reason": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "One snake_case word."
                }, 
                "api_version": {
                    "readOnly": true, 
                    "type": "string"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "oauth_token": {
            "title": "Oauth token", 
            "required": [
                "access_token", 
                "token_type", 
                "expires_in", 
                "refresh_token", 
                "scopes"
            ], 
            "type": "object", 
            "properties": {
                "access_token": {
                    "type": "string", 
                    "description": "access_token to be used for accessing gateway"
                }, 
                "token_type": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "Only value possible is \"bearer\"."
                }, 
                "expires_in": {
                    "type": "integer", 
                    "description": "Token expiration time in seconds", 
                    "format": "int64"
                }, 
                "refresh_token": {
                    "type": "string", 
                    "description": "refresh_token which can used to get new token"
                }, 
                "scopes": {
                    "items": {
                        "type": "string", 
                        "description": "scope which the token grants"
                    }, 
                    "type": "array"
                }
            }, 
            "description": "Oauth token information"
        }, 
        "oplog_usage": {
            "title": "Host oplog disk usage stats", 
            "type": "object", 
            "properties": {
                "oplog_disk_pct": {
                    "type": "number", 
                    "description": "Oplog disk size used in percentage", 
                    "format": "float"
                }, 
                "oplog_disk_size": {
                    "type": "integer", 
                    "description": "Size of oplog disk in bytes", 
                    "format": "int64"
                }
            }, 
            "description": "oplog disk usage"
        }, 
        "options": {
            "additionalProperties": {
                "type": "object"
            }, 
            "type": "object", 
            "description": "Behavioral options that need to be passed and are not a part of the spec\ngo here\n", 
            "title": "Additional Options"
        }, 
        "packet_processor_chain": {
            "title": "packet processor chain Input Definition", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Packet processor chain name", 
                    "maxLength": 140
                }, 
                "resources": {
                    "$ref": "#/definitions/packet_processor_chain_resource"
                }
            }, 
            "description": "packet processor chain Input Definition"
        }, 
        "packet_processor_chain_def_status": {
            "title": "Packet Processor Chain Status Definition", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Packet processor chain name", 
                    "maxLength": 140
                }, 
                "resources": {
                    "$ref": "#/definitions/packet_processor_chain_resource"
                }
            }, 
            "description": "Packet Processor Chain Status Definition"
        }, 
        "packet_processor_chain_intent_input": {
            "title": "packet_processor_chain Intent Entity", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "metadata": {
                    "$ref": "#/definitions/packet_processor_chain_metadata"
                }, 
                "spec": {
                    "$ref": "#/definitions/packet_processor_chain"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "options": {
                    "$ref": "#/definitions/options"
                }
            }, 
            "description": "An intentful representation of a packet_processor_chain"
        }, 
        "packet_processor_chain_intent_resource": {
            "title": "packet_processor_chain Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/packet_processor_chain_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/packet_processor_chain"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/packet_processor_chain_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a packet_processor_chain"
        }, 
        "packet_processor_chain_intent_response": {
            "title": "packet_processor_chain Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/packet_processor_chain_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/packet_processor_chain"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/packet_processor_chain_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a packet_processor_chain"
        }, 
        "packet_processor_chain_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/packet_processor_chain_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/packet_processor_chain_list_metadata"
                }
            }, 
            "description": "Response object for intentful operation of packet_processor_chains"
        }, 
        "packet_processor_chain_list_metadata": {
            "title": "Metadata for packet_processor_chain list", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "packet_processor_chain", 
                    "readOnly": true, 
                    "enum": [
                        "packet_processor_chain"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found for the kind"
                }, 
                "sort_column": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "packet_processor_chain_metadata": {
            "title": "packet_processor_chain metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "type": "string", 
                    "description": "Time when packet_processor_chain was last updated"
                }, 
                "kind": {
                    "default": "packet_processor_chain", 
                    "readOnly": true, 
                    "enum": [
                        "packet_processor_chain"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "packet_processor_chain uuid"
                }, 
                "creation_time": {
                    "type": "string", 
                    "description": "Time when packet_processor_chain was created"
                }, 
                "account_reference": {
                    "$ref": "#/definitions/account_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the packet_processor_chain"
                }, 
                "parent_reference": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "If present, spec was copied from the referenced entity. Could have\nbeen a live entity, backup, snapshot or template entity. This field\nis special as it is the only field in metadata that is modifiable by\nthe user in case of template-based upgrades and in-place reverts.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "entity_version": {
                    "type": "integer", 
                    "description": "Monotonically increasing number"
                }, 
                "name": {
                    "type": "string", 
                    "description": "packet_processor_chain name", 
                    "maxLength": 140
                }
            }, 
            "description": "The packet_processor_chain kind metadata"
        }, 
        "packet_processor_chain_reference": {
            "title": "Reference to a packet_processor_chain", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "packet_processor_chain", 
                    "readOnly": true, 
                    "enum": [
                        "packet_processor_chain"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "name": {
                    "type": "string", 
                    "maxLength": 140
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string"
                }
            }, 
            "description": "The reference to a packet_processor_chain"
        }, 
        "packet_processor_chain_resource": {
            "title": "packet processor chain resource definition", 
            "type": "object", 
            "properties": {
                "processor_list": {
                    "items": {
                        "$ref": "#/definitions/packet_processor_resource"
                    }, 
                    "type": "array", 
                    "description": "Referenced packet processors in the chain"
                }
            }, 
            "description": "packet processor chain resource definition"
        }, 
        "packet_processor_chain_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "status": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "Only value possible is \"failure\"."
                }, 
                "kind": {
                    "default": "packet_processor_chain", 
                    "readOnly": true, 
                    "enum": [
                        "packet_processor_chain"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "details": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "readOnly": true, 
                    "type": "object", 
                    "description": "Custom key-value details relevant to the status."
                }, 
                "message": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "A sentence explaining the reason for the status."
                }, 
                "reason": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "One snake_case word."
                }, 
                "api_version": {
                    "readOnly": true, 
                    "type": "string"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "packet_processor_list_metadata": {
            "title": "Metadata for packet_processor list", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "packet_processor", 
                    "readOnly": true, 
                    "enum": [
                        "packet_processor"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found for the kind"
                }, 
                "sort_column": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "packet_processor_metadata": {
            "title": "packet_processor metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "type": "string", 
                    "description": "Time when packet_processor was last updated"
                }, 
                "kind": {
                    "default": "packet_processor", 
                    "readOnly": true, 
                    "enum": [
                        "packet_processor"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "packet_processor uuid"
                }, 
                "creation_time": {
                    "type": "string", 
                    "description": "Time when packet_processor was created"
                }, 
                "account_reference": {
                    "$ref": "#/definitions/account_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the packet_processor"
                }, 
                "parent_reference": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "If present, spec was copied from the referenced entity. Could have\nbeen a live entity, backup, snapshot or template entity. This field\nis special as it is the only field in metadata that is modifiable by\nthe user in case of template-based upgrades and in-place reverts.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "entity_version": {
                    "type": "integer", 
                    "description": "Monotonically increasing number"
                }, 
                "name": {
                    "type": "string", 
                    "description": "packet_processor name", 
                    "maxLength": 140
                }
            }, 
            "description": "The packet_processor kind metadata"
        }, 
        "packet_processor_port": {
            "title": "packet processor port definitions", 
            "required": [
                "port_type"
            ], 
            "type": "object", 
            "properties": {
                "port_type": {
                    "enum": [
                        "LOCAL_PACKET_PROCESSING_NIC"
                    ], 
                    "type": "string", 
                    "description": "The type of the processor port"
                }, 
                "local_port_fields": {
                    "required": [
                        "vm_base_name", 
                        "vm_interface_name"
                    ], 
                    "type": "object", 
                    "description": "Revelent fields when port_type is LOCAL_PACKET_PROCESSING_NIC", 
                    "properties": {
                        "vm_base_name": {
                            "type": "string", 
                            "description": "The base name of a local type port."
                        }, 
                        "vm_interface_name": {
                            "type": "string", 
                            "description": "The interface name of a local type port."
                        }
                    }
                }
            }, 
            "description": "packet processor port definitions"
        }, 
        "packet_processor_reference": {
            "title": "Reference to a packet_processor", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "packet_processor", 
                    "readOnly": true, 
                    "enum": [
                        "packet_processor"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "name": {
                    "type": "string", 
                    "maxLength": 140
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string"
                }
            }, 
            "description": "The reference to a packet_processor"
        }, 
        "packet_processor_resource": {
            "title": "packet processor resource definition", 
            "required": [
                "processor_type"
            ], 
            "type": "object", 
            "properties": {
                "tap_ports": {
                    "required": [
                        "port"
                    ], 
                    "type": "object", 
                    "description": "Ports used for tap processors", 
                    "properties": {
                        "port": {
                            "$ref": "#/definitions/packet_processor_port"
                        }
                    }
                }, 
                "processor_type": {
                    "enum": [
                        "INLINE", 
                        "TAP"
                    ], 
                    "type": "string", 
                    "description": "The type of the packet processor"
                }, 
                "inline_ports": {
                    "required": [
                        "ingressing_port", 
                        "egressing_port"
                    ], 
                    "type": "object", 
                    "description": "Ports used for inline processors", 
                    "properties": {
                        "ingressing_port": {
                            "$ref": "#/definitions/packet_processor_port"
                        }, 
                        "egressing_port": {
                            "$ref": "#/definitions/packet_processor_port"
                        }
                    }
                }
            }, 
            "description": "packet processor resource definition"
        }, 
        "packet_processor_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "status": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "Only value possible is \"failure\"."
                }, 
                "kind": {
                    "default": "packet_processor", 
                    "readOnly": true, 
                    "enum": [
                        "packet_processor"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "details": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "readOnly": true, 
                    "type": "object", 
                    "description": "Custom key-value details relevant to the status."
                }, 
                "message": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "A sentence explaining the reason for the status."
                }, 
                "reason": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "One snake_case word."
                }, 
                "api_version": {
                    "readOnly": true, 
                    "type": "string"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "pemkey_spec": {
            "title": "SSL key", 
            "required": [
                "type", 
                "key", 
                "cert"
            ], 
            "type": "object", 
            "properties": {
                "ca_chain": {
                    "type": "string", 
                    "format": "byte"
                }, 
                "type": {
                    "$ref": "#/definitions/ssl_key_type"
                }, 
                "cert": {
                    "type": "string", 
                    "format": "byte"
                }, 
                "key": {
                    "type": "string", 
                    "format": "byte"
                }, 
                "name": {
                    "type": "string"
                }
            }, 
            "description": "SSL key"
        }, 
        "permission": {
            "title": "Permission entity", 
            "required": [
                "metadata", 
                "api_version"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/permission_resources_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/permission_resources_wrapper"
                }, 
                "api_version": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/permission_metadata"
                }
            }, 
            "description": "Permission entity"
        }, 
        "permission_list": {
            "title": "Permission entity list", 
            "required": [
                "metadata", 
                "api_version"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/permission"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/permission_list_metadata"
                }
            }, 
            "description": "Permission entity list"
        }, 
        "permission_list_metadata": {
            "title": "Metadata for permission list", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "permission", 
                    "readOnly": true, 
                    "enum": [
                        "permission"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found for the kind"
                }, 
                "sort_column": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "permission_metadata": {
            "title": "permission metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "type": "string", 
                    "description": "Time when permission was last updated"
                }, 
                "kind": {
                    "default": "permission", 
                    "readOnly": true, 
                    "enum": [
                        "permission"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "permission uuid"
                }, 
                "creation_time": {
                    "type": "string", 
                    "description": "Time when permission was created"
                }, 
                "account_reference": {
                    "$ref": "#/definitions/account_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the permission"
                }, 
                "parent_reference": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "If present, spec was copied from the referenced entity. Could have\nbeen a live entity, backup, snapshot or template entity. This field\nis special as it is the only field in metadata that is modifiable by\nthe user in case of template-based upgrades and in-place reverts.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "entity_version": {
                    "type": "integer", 
                    "description": "Monotonically increasing number"
                }, 
                "name": {
                    "type": "string", 
                    "description": "permission name", 
                    "maxLength": 140
                }
            }, 
            "description": "The permission kind metadata"
        }, 
        "permission_reference": {
            "title": "Reference to a permission", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "permission", 
                    "readOnly": true, 
                    "enum": [
                        "permission"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "name": {
                    "type": "string", 
                    "maxLength": 140
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string"
                }
            }, 
            "description": "The reference to a permission"
        }, 
        "permission_resources": {
            "title": "Permission entity resources", 
            "required": [
                "target_action", 
                "target_kind"
            ], 
            "type": "object", 
            "properties": {
                "target_action": {
                    "type": "string", 
                    "description": "Permission name"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "Permission uuid"
                }, 
                "target_kind": {
                    "type": "string", 
                    "description": "The kind to which this permission is applied"
                }
            }, 
            "description": "Permission entity resources"
        }, 
        "permission_resources_status": {
            "title": "Permission entity status", 
            "type": "object", 
            "properties": {
                "reason": {
                    "type": "string", 
                    "description": "If state is kError, a machine_readable snake cased string"
                }, 
                "message": {
                    "type": "string", 
                    "description": "If state is kError, a message describing the error"
                }, 
                "state": {
                    "type": "string", 
                    "description": "The state of the permission resource"
                }, 
                "resources": {
                    "$ref": "#/definitions/permission_resources"
                }, 
                "description": {
                    "type": "string", 
                    "description": "Human readable description of the permission", 
                    "maxLength": 1000
                }
            }, 
            "description": "Permission entity status"
        }, 
        "permission_resources_wrapper": {
            "title": "Permission resource wrapper", 
            "required": [
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "description": {
                    "type": "string", 
                    "description": "Human readable description of the permission", 
                    "maxLength": 1000
                }, 
                "resources": {
                    "$ref": "#/definitions/permission_resources"
                }
            }, 
            "description": "Permission resource wrapper"
        }, 
        "permission_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "status": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "Only value possible is \"failure\"."
                }, 
                "kind": {
                    "default": "permission", 
                    "readOnly": true, 
                    "enum": [
                        "permission"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "details": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "readOnly": true, 
                    "type": "object", 
                    "description": "Custom key-value details relevant to the status."
                }, 
                "message": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "A sentence explaining the reason for the status."
                }, 
                "reason": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "One snake_case word."
                }, 
                "api_version": {
                    "readOnly": true, 
                    "type": "string"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "policies": {
            "items": {
                "type": "object", 
                "properties": {
                    "policy": {
                        "type": "object", 
                        "description": "Policy object which will be interpreted by the provider"
                    }, 
                    "type": {
                        "type": "string", 
                        "description": "The policy type"
                    }
                }
            }, 
            "type": "array", 
            "description": "Settings that modify the behavior of the entity. They will be interpreted\nby built in or the third party providers\n", 
            "title": "Policies"
        }, 
        "policy": {
            "title": "Create policy request", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/policy_resources"
                }, 
                "spec": {
                    "$ref": "#/definitions/policy_resources"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/policy_metadata"
                }
            }, 
            "description": "Request to make a policy item"
        }, 
        "policy_category_endpoint": {
            "title": "Category endpoint", 
            "properties": {
                "category_list": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array"
                }
            }, 
            "description": "Endpoint for category"
        }, 
        "policy_endpoint": {
            "title": "Policy endpoint", 
            "type": "object", 
            "properties": {
                "network_endpoint": {
                    "$ref": "#/definitions/policy_network_endpoint"
                }, 
                "category_endpoint": {
                    "$ref": "#/definitions/policy_category_endpoint"
                }
            }, 
            "description": "Endpoint definition for a policy"
        }, 
        "policy_endpoint_ip_subnet": {
            "title": "IP subnet", 
            "properties": {
                "ip_address": {
                    "type": "string"
                }, 
                "prefix_length": {
                    "type": "integer"
                }
            }, 
            "description": "IP subnet"
        }, 
        "policy_endpoint_port_range": {
            "title": "Port range", 
            "properties": {
                "end_port": {
                    "type": "integer"
                }, 
                "start_port": {
                    "type": "integer"
                }
            }, 
            "description": "Port range"
        }, 
        "policy_list": {
            "title": "Policy entity list", 
            "required": [
                "metadata", 
                "entities"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/policy"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/policy_list_metadata"
                }
            }, 
            "description": "Policy item entity list"
        }, 
        "policy_list_metadata": {
            "title": "Metadata for policy list", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "policy", 
                    "readOnly": true, 
                    "enum": [
                        "policy"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found for the kind"
                }, 
                "sort_column": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "policy_metadata": {
            "title": "policy metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "type": "string", 
                    "description": "Time when policy was last updated"
                }, 
                "kind": {
                    "default": "policy", 
                    "readOnly": true, 
                    "enum": [
                        "policy"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "policy uuid"
                }, 
                "creation_time": {
                    "type": "string", 
                    "description": "Time when policy was created"
                }, 
                "account_reference": {
                    "$ref": "#/definitions/account_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the policy"
                }, 
                "parent_reference": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "If present, spec was copied from the referenced entity. Could have\nbeen a live entity, backup, snapshot or template entity. This field\nis special as it is the only field in metadata that is modifiable by\nthe user in case of template-based upgrades and in-place reverts.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "entity_version": {
                    "type": "integer", 
                    "description": "Monotonically increasing number"
                }, 
                "name": {
                    "type": "string", 
                    "description": "policy name", 
                    "maxLength": 140
                }
            }, 
            "description": "The policy kind metadata"
        }, 
        "policy_network_endpoint": {
            "title": "Network endpoint", 
            "properties": {
                "ip_subnet": {
                    "$ref": "#/definitions/policy_endpoint_ip_subnet"
                }, 
                "port_range": {
                    "$ref": "#/definitions/policy_endpoint_port_range"
                }, 
                "mac_address": {
                    "type": "string"
                }
            }, 
            "description": "Endpoint for network"
        }, 
        "policy_reference": {
            "title": "Reference to a policy", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "policy", 
                    "readOnly": true, 
                    "enum": [
                        "policy"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "name": {
                    "type": "string", 
                    "maxLength": 140
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string"
                }
            }, 
            "description": "The reference to a policy"
        }, 
        "policy_resources": {
            "title": "Policy creation/modification spec", 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Policy name", 
                    "maxLength": 140
                }, 
                "resources": {
                    "required": [
                        "endpoint_type"
                    ], 
                    "type": "string", 
                    "properties": {
                        "protocol": {
                            "enum": [
                                "TCP", 
                                "UDP", 
                                "ICMP", 
                                "NONE"
                            ], 
                            "type": "string"
                        }, 
                        "uuid": {
                            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                            "type": "string"
                        }, 
                        "source_endpoint": {
                            "$ref": "#/definitions/policy_endpoint"
                        }, 
                        "destination_endpoint": {
                            "$ref": "#/definitions/policy_endpoint"
                        }, 
                        "endpoint_type": {
                            "enum": [
                                "CATEGORY", 
                                "NETWORK", 
                                "ANY"
                            ], 
                            "type": "string"
                        }, 
                        "action": {
                            "enum": [
                                "ALLOW", 
                                "DROP"
                            ], 
                            "type": "string"
                        }, 
                        "vlan_id": {
                            "type": "integer", 
                            "format": "int32"
                        }, 
                        "vxlan_id": {
                            "type": "integer", 
                            "format": "int64"
                        }
                    }, 
                    "title": "Policy Resources"
                }, 
                "description": {
                    "type": "string", 
                    "description": "Human readable description of the policy", 
                    "maxLength": 1000
                }
            }, 
            "description": "Policy creation/modification spec"
        }, 
        "policy_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "status": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "Only value possible is \"failure\"."
                }, 
                "kind": {
                    "default": "policy", 
                    "readOnly": true, 
                    "enum": [
                        "policy"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "details": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "readOnly": true, 
                    "type": "object", 
                    "description": "Custom key-value details relevant to the status."
                }, 
                "message": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "A sentence explaining the reason for the status."
                }, 
                "reason": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "One snake_case word."
                }, 
                "api_version": {
                    "readOnly": true, 
                    "type": "string"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "portal_software": {
            "title": "Software information", 
            "type": "object", 
            "properties": {
                "release_note_url": {
                    "type": "string", 
                    "description": "URL to point to the support portal release note of this software.\nCurrently only set and used for NOS releases\n"
                }, 
                "release_date": {
                    "type": "integer", 
                    "description": "Release date of this software. Number of seconds since epoch\n", 
                    "format": "int64"
                }, 
                "md5sum": {
                    "type": "string", 
                    "description": "MD5 checksum of the software file"
                }, 
                "compatible_version_list": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "List of software versions that this version can be upgraded from\n"
                }, 
                "version": {
                    "type": "string", 
                    "description": "Software version string"
                }, 
                "size_in_mib": {
                    "type": "integer", 
                    "description": "Total size of the software file in mebibytes", 
                    "format": "int64"
                }, 
                "type": {
                    "$ref": "#/definitions/software_type"
                }, 
                "compatible_pe_versions": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "List of Prism Element compatible versions"
                }
            }, 
            "description": "Software information from Nutanix Portal"
        }, 
        "portal_software_list": {
            "title": "List of softwares", 
            "required": [
                "metadata", 
                "entities"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/portal_software"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/software_list_metadata"
                }
            }, 
            "description": "Available softwares on Nutanix portal"
        }, 
        "profile_mapping": {
            "title": "Profile mapping for the recovery plan", 
            "type": "object", 
            "properties": {
                "test_profile": {
                    "type": "string", 
                    "description": "Name of profile to be used on recovery plan test"
                }, 
                "target_profile": {
                    "type": "string", 
                    "description": "Name of profile at recovery site"
                }, 
                "source_profile": {
                    "type": "string", 
                    "description": "Name of profile at protected site"
                }
            }, 
            "description": "Profile mapping for the recovery plan"
        }, 
        "project": {
            "title": "Project Entity", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/project_resources_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/project_resources_spec"
                }, 
                "api_version": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/project_metadata"
                }
            }, 
            "description": "Project Entity"
        }, 
        "project_list": {
            "title": "Project list", 
            "required": [
                "metadata", 
                "entities"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/project"
                    }, 
                    "type": "array"
                }, 
                "metadata": {
                    "$ref": "#/definitions/project_list_metadata"
                }
            }, 
            "description": "Project list"
        }, 
        "project_list_metadata": {
            "title": "Metadata for project list", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "project", 
                    "readOnly": true, 
                    "enum": [
                        "project"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found for the kind"
                }, 
                "sort_column": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "project_metadata": {
            "title": "project metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "type": "string", 
                    "description": "Time when project was last updated"
                }, 
                "kind": {
                    "default": "project", 
                    "readOnly": true, 
                    "enum": [
                        "project"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "project uuid"
                }, 
                "creation_time": {
                    "type": "string", 
                    "description": "Time when project was created"
                }, 
                "account_reference": {
                    "$ref": "#/definitions/account_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the project"
                }, 
                "parent_reference": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "If present, spec was copied from the referenced entity. Could have\nbeen a live entity, backup, snapshot or template entity. This field\nis special as it is the only field in metadata that is modifiable by\nthe user in case of template-based upgrades and in-place reverts.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "entity_version": {
                    "type": "integer", 
                    "description": "Monotonically increasing number"
                }, 
                "name": {
                    "type": "string", 
                    "description": "project name", 
                    "maxLength": 140
                }
            }, 
            "description": "The project kind metadata"
        }, 
        "project_reference": {
            "title": "Reference to a project", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "project", 
                    "readOnly": true, 
                    "enum": [
                        "project"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "name": {
                    "type": "string", 
                    "maxLength": 140
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string"
                }
            }, 
            "description": "The reference to a project"
        }, 
        "project_resources_spec": {
            "title": "Project Resource Spec", 
            "required": [
                "name"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Project name", 
                    "maxLength": 140
                }, 
                "resources": {
                    "required": [
                        "role_reference"
                    ], 
                    "type": "object", 
                    "properties": {
                        "resource_domain": {
                            "description": "Optional resource limits defined for the project", 
                            "$ref": "#/definitions/resource_domain_spec"
                        }, 
                        "default_network_reference": {
                            "description": "Optional default network if one is specified", 
                            "$ref": "#/definitions/network_reference"
                        }, 
                        "network_reference_list": {
                            "items": {
                                "$ref": "#/definitions/network_reference"
                            }, 
                            "type": "array", 
                            "description": "List of networks for the project"
                        }, 
                        "role_reference": {
                            "description": "The role assigned to project users", 
                            "$ref": "#/definitions/role_reference"
                        }, 
                        "user_reference_list": {
                            "items": {
                                "$ref": "#/definitions/user_reference"
                            }, 
                            "type": "array", 
                            "description": "List of users in the project"
                        }, 
                        "user_group_list": {
                            "items": {
                                "type": "string"
                            }, 
                            "type": "array", 
                            "description": "List of directory service group's distinguished name"
                        }
                    }, 
                    "title": "Project Resources"
                }, 
                "description": {
                    "type": "string", 
                    "description": "Project description", 
                    "maxLength": 1000
                }
            }, 
            "description": "A Project kind"
        }, 
        "project_resources_status": {
            "title": "Project Resource Status", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Project name", 
                    "maxLength": 140
                }, 
                "resources": {
                    "type": "object", 
                    "properties": {
                        "resource_domain": {
                            "description": "Optional resource limits defined for the project", 
                            "$ref": "#/definitions/resource_domain_details"
                        }, 
                        "role_reference": {
                            "description": "The role assigned to project users", 
                            "$ref": "#/definitions/role_reference"
                        }, 
                        "default_network_reference": {
                            "description": "Optional default network if one is specified", 
                            "$ref": "#/definitions/network_reference"
                        }, 
                        "network_reference_list": {
                            "items": {
                                "$ref": "#/definitions/network_reference"
                            }, 
                            "type": "array", 
                            "description": "List of networks for the project"
                        }, 
                        "user_reference_list": {
                            "items": {
                                "$ref": "#/definitions/user_reference"
                            }, 
                            "type": "array", 
                            "description": "List of users in the project including all the users from the users group if provided"
                        }
                    }, 
                    "title": "Project Resources"
                }, 
                "description": {
                    "type": "string", 
                    "description": "Project description", 
                    "maxLength": 1000
                }
            }, 
            "description": "A Project kind"
        }, 
        "project_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "status": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "Only value possible is \"failure\"."
                }, 
                "kind": {
                    "default": "project", 
                    "readOnly": true, 
                    "enum": [
                        "project"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "details": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "readOnly": true, 
                    "type": "object", 
                    "description": "Custom key-value details relevant to the status."
                }, 
                "message": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "A sentence explaining the reason for the status."
                }, 
                "reason": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "One snake_case word."
                }, 
                "api_version": {
                    "readOnly": true, 
                    "type": "string"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "providers": {
            "additionalProperties": {
                "type": "object"
            }, 
            "type": "object", 
            "description": "Providers should be supplied as \"<scope>:<provider>\" style keys. Values\nwill be interpreted by the provider if supplied\n", 
            "title": "Providers"
        }, 
        "public_key": {
            "title": "Public Key", 
            "required": [
                "name", 
                "key"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "maxLength": 140
                }, 
                "key": {
                    "type": "string"
                }
            }, 
            "description": "Public Key"
        }, 
        "recovery_plan_arg": {
            "title": "Arguments for recovery plan", 
            "type": "object", 
            "properties": {
                "network_info": {
                    "description": "Network information to be used for recovery plan", 
                    "$ref": "#/definitions/recovery_plan_network_info"
                }, 
                "recovery_site_info": {
                    "description": "Information about recovery site for recovery plan", 
                    "$ref": "#/definitions/recovery_plan_site_info"
                }, 
                "protected_site_info": {
                    "description": "Information about protected site for recovery plan", 
                    "$ref": "#/definitions/recovery_plan_site_info"
                }, 
                "profile_info": {
                    "description": "Profile information to be used for recovery plan", 
                    "$ref": "#/definitions/recovery_plan_profile_info"
                }
            }, 
            "description": "Arguments for recovery plan"
        }, 
        "recovery_plan_entity_config_update_info": {
            "title": "Expected config of entity after recovery w.r.t. current config", 
            "type": "object", 
            "properties": {
                "memory_ratio": {
                    "type": "string", 
                    "description": "Ratio of current vs expected memory on recovery site"
                }, 
                "power_state": {
                    "enum": [
                        "POWERED_ON", 
                        "POWERED_OFF", 
                        "PAUSED", 
                        "SUSPENDED", 
                        "RESETTING"
                    ], 
                    "type": "string", 
                    "description": "Power state of the VM"
                }, 
                "cpu_ratio": {
                    "type": "string", 
                    "description": "Ratio of current vs expected cpu on recovery site"
                }
            }, 
            "description": "Expected entity config states after recovery"
        }, 
        "recovery_plan_entity_info": {
            "title": "Information about entity to be recovered", 
            "type": "object", 
            "properties": {
                "target_cluster_uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "Uuid of the cluster where entity has to be recovered"
                }, 
                "entity_config_update_info": {
                    "description": "Expected state of entity after recovery", 
                    "$ref": "#/definitions/recovery_plan_entity_config_update_info"
                }, 
                "source_cluster_uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "Uuid of the cluster where entity is present"
                }, 
                "entity_name": {
                    "type": "string", 
                    "description": "Name of entity", 
                    "maxLength": 140
                }, 
                "entity_type": {
                    "type": "string", 
                    "description": "Type of entity"
                }, 
                "entity_uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "Uuid of entity"
                }
            }, 
            "description": "Information about entity to be recovered"
        }, 
        "recovery_plan_entity_list": {
            "title": "List of entities", 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/recovery_plan_entity_info"
                    }, 
                    "type": "array", 
                    "description": "Details of entities for recovery plan"
                }
            }, 
            "description": "List of entities to work on for a stage"
        }, 
        "recovery_plan_l2_network_mapping": {
            "title": "Network mapping for recovery plan workflow", 
            "type": "object", 
            "properties": {
                "source_network": {
                    "type": "string", 
                    "description": "Name of network on protected site"
                }, 
                "destination_network": {
                    "type": "string", 
                    "description": "Name of network on recovery site"
                }, 
                "test_network": {
                    "type": "string", 
                    "description": "Name of network on recovery site to be used while performing test"
                }
            }, 
            "description": "Network mapping for recovery plan workflow"
        }, 
        "recovery_plan_l3_network_mapping": {
            "title": "L3 mapping to be used for configuring L3 network of VM after recovery", 
            "type": "object", 
            "properties": {
                "source_l3_network_start_address": {
                    "type": "string", 
                    "description": "Start address for source L3 network"
                }, 
                "test_l3_network_start_address": {
                    "type": "string", 
                    "description": "Start address for target L3 network for recovery plan test"
                }, 
                "source_l3_network_end_address": {
                    "type": "string", 
                    "description": "Last address for source L3 network"
                }, 
                "target_l3_network_start_address": {
                    "type": "string", 
                    "description": "Start address for target L3 network"
                }
            }, 
            "description": "L3 mapping to be used for configuring L3 network of VM after recovery"
        }, 
        "recovery_plan_network_info": {
            "title": "Network info for recovery plan workflow", 
            "type": "object", 
            "properties": {
                "network_mapping": {
                    "items": {
                        "$ref": "#/definitions/recovery_plan_l2_network_mapping"
                    }, 
                    "type": "array", 
                    "description": "Network mapping for recovery plan"
                }, 
                "static_ip_assignment": {
                    "items": {
                        "$ref": "#/definitions/recovery_plan_l3_network_mapping"
                    }, 
                    "type": "array", 
                    "description": "L3 network mapping for recovery plan"
                }
            }, 
            "description": "Network info for recovery plan workflow"
        }, 
        "recovery_plan_profile_info": {
            "title": "Description of profile information for recovery plan", 
            "type": "object", 
            "properties": {
                "default_profile": {
                    "type": "string", 
                    "description": "Default profile to be used on recovery site"
                }, 
                "profile_mapping": {
                    "items": {
                        "$ref": "#/definitions/profile_mapping"
                    }, 
                    "type": "array"
                }
            }, 
            "description": "Profile information for recovery plan"
        }, 
        "recovery_plan_site_info": {
            "title": "Description of sites involved in recovery plan", 
            "type": "object", 
            "properties": {
                "management_identifier": {
                    "type": "string", 
                    "description": "Identifier of management plane"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Recovery site information", 
                    "maxLength": 140
                }, 
                "management_entity_type": {
                    "type": "string", 
                    "description": "Type of management entity. It can be another PC or Xi."
                }
            }, 
            "description": "Information about sites involved in recovery plan"
        }, 
        "reference": {
            "title": "Reference", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string"
                }
            }, 
            "description": "Reference to a kind"
        }, 
        "region": {
            "title": "Region", 
            "required": [
                "offset", 
                "length", 
                "type"
            ], 
            "type": "object", 
            "properties": {
                "length": {
                    "type": "integer", 
                    "description": "The length of the region in bytes.", 
                    "format": "int64"
                }, 
                "type": {
                    "enum": [
                        "ZEROED", 
                        "REGULAR"
                    ], 
                    "type": "string", 
                    "description": "The type of the region."
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "The byte offset indicating the start of the region.", 
                    "format": "int64"
                }
            }, 
            "description": "A region is a contiguous set of offsets.\n"
        }, 
        "remote_connection_spec": {
            "title": "Remote connection spec", 
            "required": [
                "access_config", 
                "credentials"
            ], 
            "type": "object", 
            "properties": {
                "credentials": {
                    "$ref": "#/definitions/credentials"
                }, 
                "access_config": {
                    "$ref": "#/definitions/server_access_config"
                }
            }, 
            "description": "Remote connection spec"
        }, 
        "remote_host": {
            "title": "Remote host", 
            "required": [
                "uuid", 
                "access_config"
            ], 
            "type": "object", 
            "properties": {
                "cluster_type": {
                    "$ref": "#/definitions/cluster_type"
                }, 
                "access_config": {
                    "$ref": "#/definitions/server_access_config"
                }, 
                "uuid": {
                    "type": "string", 
                    "description": "Host unique identifier"
                }
            }, 
            "description": "Remote host"
        }, 
        "resource_charge_list_metadata": {
            "title": "Metadata for resource_charge list", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "resource_charge", 
                    "readOnly": true, 
                    "enum": [
                        "resource_charge"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found for the kind"
                }, 
                "sort_column": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "resource_charge_metadata": {
            "title": "resource_charge metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "type": "string", 
                    "description": "Time when resource_charge was last updated"
                }, 
                "kind": {
                    "default": "resource_charge", 
                    "readOnly": true, 
                    "enum": [
                        "resource_charge"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "resource_charge uuid"
                }, 
                "creation_time": {
                    "type": "string", 
                    "description": "Time when resource_charge was created"
                }, 
                "account_reference": {
                    "$ref": "#/definitions/account_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the resource_charge"
                }, 
                "parent_reference": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "If present, spec was copied from the referenced entity. Could have\nbeen a live entity, backup, snapshot or template entity. This field\nis special as it is the only field in metadata that is modifiable by\nthe user in case of template-based upgrades and in-place reverts.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "entity_version": {
                    "type": "integer", 
                    "description": "Monotonically increasing number"
                }, 
                "name": {
                    "type": "string", 
                    "description": "resource_charge name", 
                    "maxLength": 140
                }
            }, 
            "description": "The resource_charge kind metadata"
        }, 
        "resource_charge_reference": {
            "title": "Reference to a resource_charge", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "resource_charge", 
                    "readOnly": true, 
                    "enum": [
                        "resource_charge"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "name": {
                    "type": "string", 
                    "maxLength": 140
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string"
                }
            }, 
            "description": "The reference to a resource_charge"
        }, 
        "resource_charge_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "status": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "Only value possible is \"failure\"."
                }, 
                "kind": {
                    "default": "resource_charge", 
                    "readOnly": true, 
                    "enum": [
                        "resource_charge"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "details": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "readOnly": true, 
                    "type": "object", 
                    "description": "Custom key-value details relevant to the status."
                }, 
                "message": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "A sentence explaining the reason for the status."
                }, 
                "reason": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "One snake_case word."
                }, 
                "api_version": {
                    "readOnly": true, 
                    "type": "string"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "resource_domain": {
            "title": "Resource Utilization Domain", 
            "required": [
                "metadata", 
                "spec", 
                "status"
            ], 
            "properties": {
                "status": {
                    "description": "what is", 
                    "$ref": "#/definitions/resource_domain_details"
                }, 
                "spec": {
                    "description": "what should be", 
                    "$ref": "#/definitions/resource_domain_spec"
                }, 
                "metadata": {
                    "$ref": "#/definitions/resource_domain_metadata"
                }
            }, 
            "description": "a resource domain that tracks utilization and limits"
        }, 
        "resource_domain_create_request": {
            "title": "Resource Domain Create Request", 
            "required": [
                "metadata", 
                "spec"
            ], 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/resource_domain_spec"
                }, 
                "metadata": {
                    "$ref": "#/definitions/resource_domain_metadata"
                }
            }, 
            "description": "Request to create a resource domain"
        }, 
        "resource_domain_create_response": {
            "title": "Resource domain create response", 
            "properties": {
                "uuid": {
                    "type": "string"
                }
            }, 
            "description": "The response for the resource domain create request"
        }, 
        "resource_domain_details": {
            "title": "Resource Domain Status", 
            "required": [
                "rollup_domain_reference_list", 
                "resources"
            ], 
            "properties": {
                "rollup_domain_reference_list": {
                    "items": {
                        "$ref": "#/definitions/resource_domain_reference"
                    }, 
                    "type": "array", 
                    "description": "the uuids of the domains charges should be rolled up to"
                }, 
                "resources": {
                    "items": {
                        "$ref": "#/definitions/resource_utilization_status"
                    }, 
                    "type": "array", 
                    "description": "the utilization/limit for resource types"
                }
            }, 
            "description": "the intentful specification and status for resource domains"
        }, 
        "resource_domain_list_metadata": {
            "title": "Metadata for resource_domain list", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "resource_domain", 
                    "readOnly": true, 
                    "enum": [
                        "resource_domain"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found for the kind"
                }, 
                "sort_column": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "resource_domain_metadata": {
            "title": "resource_domain metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "type": "string", 
                    "description": "Time when resource_domain was last updated"
                }, 
                "kind": {
                    "default": "resource_domain", 
                    "readOnly": true, 
                    "enum": [
                        "resource_domain"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "resource_domain uuid"
                }, 
                "creation_time": {
                    "type": "string", 
                    "description": "Time when resource_domain was created"
                }, 
                "account_reference": {
                    "$ref": "#/definitions/account_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the resource_domain"
                }, 
                "parent_reference": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "If present, spec was copied from the referenced entity. Could have\nbeen a live entity, backup, snapshot or template entity. This field\nis special as it is the only field in metadata that is modifiable by\nthe user in case of template-based upgrades and in-place reverts.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "entity_version": {
                    "type": "integer", 
                    "description": "Monotonically increasing number"
                }, 
                "name": {
                    "type": "string", 
                    "description": "resource_domain name", 
                    "maxLength": 140
                }
            }, 
            "description": "The resource_domain kind metadata"
        }, 
        "resource_domain_reference": {
            "title": "Reference to a resource_domain", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "resource_domain", 
                    "readOnly": true, 
                    "enum": [
                        "resource_domain"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "name": {
                    "type": "string", 
                    "maxLength": 140
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string"
                }
            }, 
            "description": "The reference to a resource_domain"
        }, 
        "resource_domain_spec": {
            "title": "Resource Domain Spec", 
            "required": [
                "rollup_domain_reference_list", 
                "resources"
            ], 
            "properties": {
                "rollup_domain_reference_list": {
                    "items": {
                        "$ref": "#/definitions/resource_domain_reference"
                    }, 
                    "type": "array", 
                    "description": "the uuids of the domains charges should be rolled up to"
                }, 
                "resources": {
                    "items": {
                        "$ref": "#/definitions/resource_utilization_spec"
                    }, 
                    "type": "array", 
                    "description": "the utilization/limit for resource types"
                }
            }, 
            "description": "the intentful specification and status for resource domains"
        }, 
        "resource_domain_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "status": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "Only value possible is \"failure\"."
                }, 
                "kind": {
                    "default": "resource_domain", 
                    "readOnly": true, 
                    "enum": [
                        "resource_domain"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "details": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "readOnly": true, 
                    "type": "object", 
                    "description": "Custom key-value details relevant to the status."
                }, 
                "message": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "A sentence explaining the reason for the status."
                }, 
                "reason": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "One snake_case word."
                }, 
                "api_version": {
                    "readOnly": true, 
                    "type": "string"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "resource_utilization_spec": {
            "title": "Resource Utilization Specification", 
            "required": [
                "resource_type", 
                "limit"
            ], 
            "properties": {
                "limit": {
                    "type": "integer", 
                    "description": "The resource consumption limit"
                }, 
                "resource_type": {
                    "enum": [
                        "STORAGE", 
                        "MEMORY", 
                        "VCPUS", 
                        "VMS"
                    ], 
                    "type": "string", 
                    "description": "The type of resource (i.e. storage, cpus)"
                }
            }, 
            "description": "specify the limits and units for a resource type"
        }, 
        "resource_utilization_status": {
            "title": "Resource Utilization Status", 
            "required": [
                "resource_type", 
                "units", 
                "value"
            ], 
            "properties": {
                "units": {
                    "type": "string", 
                    "description": "The units of the resource type"
                }, 
                "limit": {
                    "type": "integer", 
                    "description": "The resource consumption limit (optional for unlimited)"
                }, 
                "resource_type": {
                    "type": "string", 
                    "description": "The type of resource (i.e. storage, cpus)"
                }, 
                "value": {
                    "type": "integer", 
                    "description": "The amount of resource consumed"
                }
            }, 
            "description": "stores resource utilization and limits for a domain"
        }, 
        "role": {
            "title": "Role entity", 
            "required": [
                "metadata", 
                "api_version"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/role_resources_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/role_resources_wrapper"
                }, 
                "api_version": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/role_metadata"
                }
            }, 
            "description": "The role entity"
        }, 
        "role_list": {
            "title": "Role entity list", 
            "required": [
                "metadata", 
                "api_version"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/role"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/role_list_metadata"
                }
            }, 
            "description": "Role entity list"
        }, 
        "role_list_metadata": {
            "title": "Metadata for role list", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "role", 
                    "readOnly": true, 
                    "enum": [
                        "role"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found for the kind"
                }, 
                "sort_column": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "role_metadata": {
            "title": "role metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "type": "string", 
                    "description": "Time when role was last updated"
                }, 
                "kind": {
                    "default": "role", 
                    "readOnly": true, 
                    "enum": [
                        "role"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "role uuid"
                }, 
                "creation_time": {
                    "type": "string", 
                    "description": "Time when role was created"
                }, 
                "account_reference": {
                    "$ref": "#/definitions/account_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the role"
                }, 
                "parent_reference": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "If present, spec was copied from the referenced entity. Could have\nbeen a live entity, backup, snapshot or template entity. This field\nis special as it is the only field in metadata that is modifiable by\nthe user in case of template-based upgrades and in-place reverts.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "entity_version": {
                    "type": "integer", 
                    "description": "Monotonically increasing number"
                }, 
                "name": {
                    "type": "string", 
                    "description": "role name", 
                    "maxLength": 140
                }
            }, 
            "description": "The role kind metadata"
        }, 
        "role_reference": {
            "title": "Reference to a role", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "role", 
                    "readOnly": true, 
                    "enum": [
                        "role"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "name": {
                    "type": "string", 
                    "maxLength": 140
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string"
                }
            }, 
            "description": "The reference to a role"
        }, 
        "role_resources_input": {
            "title": "Role object", 
            "required": [
                "permission_reference_list"
            ], 
            "type": "object", 
            "properties": {
                "permission_reference_list": {
                    "items": {
                        "$ref": "#/definitions/permission_reference"
                    }, 
                    "type": "array", 
                    "description": "List of permission references"
                }
            }, 
            "description": "The input resources for the role"
        }, 
        "role_resources_response": {
            "title": "Role object", 
            "required": [
                "permission_list"
            ], 
            "type": "object", 
            "properties": {
                "permission_list": {
                    "items": {
                        "$ref": "#/definitions/permission_resources"
                    }, 
                    "type": "array", 
                    "description": "List of permission resources objects"
                }
            }, 
            "description": "The resources for the role"
        }, 
        "role_resources_status": {
            "title": "Role entity status", 
            "required": [
                "resources", 
                "name"
            ], 
            "type": "object", 
            "properties": {
                "state": {
                    "type": "string", 
                    "description": "The state of the role resource"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Role name", 
                    "maxLength": 140
                }, 
                "message": {
                    "type": "string", 
                    "description": "If state is kError, a message describing the error"
                }, 
                "reason": {
                    "type": "string", 
                    "description": "If state is kError, a machine_readable snake cased string"
                }, 
                "resources": {
                    "$ref": "#/definitions/role_resources_response"
                }, 
                "description": {
                    "type": "string", 
                    "description": "Human readable description of the role", 
                    "maxLength": 1000
                }
            }, 
            "description": "Role entity status"
        }, 
        "role_resources_wrapper": {
            "title": "Role resources wrapper", 
            "required": [
                "resources", 
                "name"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Role name", 
                    "maxLength": 140
                }, 
                "resources": {
                    "$ref": "#/definitions/role_resources_input"
                }, 
                "description": {
                    "type": "string", 
                    "description": "Human readable description of the role", 
                    "maxLength": 1000
                }
            }, 
            "description": "Role resources wrapper"
        }, 
        "role_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "status": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "Only value possible is \"failure\"."
                }, 
                "kind": {
                    "default": "role", 
                    "readOnly": true, 
                    "enum": [
                        "role"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "details": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "readOnly": true, 
                    "type": "object", 
                    "description": "Custom key-value details relevant to the status."
                }, 
                "message": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "A sentence explaining the reason for the status."
                }, 
                "reason": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "One snake_case word."
                }, 
                "api_version": {
                    "readOnly": true, 
                    "type": "string"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "schedule": {
            "title": "Snapshot schedule", 
            "required": [
                "interval_type", 
                "interval_multiple"
            ], 
            "type": "object", 
            "properties": {
                "is_suspended": {
                    "type": "boolean", 
                    "description": "Whether the snapshot schedule is suspended"
                }, 
                "interval_multiple": {
                    "type": "integer", 
                    "description": "Multiple of interval_type", 
                    "format": "int32"
                }, 
                "duration_secs": {
                    "type": "integer", 
                    "description": "Duration of the event. If set, an event of duration duration_usecs\nwill repeat as per the recurrence defined in interval_type\n", 
                    "format": "int64"
                }, 
                "end_time": {
                    "type": "integer", 
                    "description": "End time of the snapshot schedule", 
                    "format": "int64"
                }, 
                "interval_type": {
                    "enum": [
                        "MINUTELY", 
                        "HOURLY", 
                        "DAILY", 
                        "WEEKLY", 
                        "MONTHLY", 
                        "YEARLY"
                    ], 
                    "type": "string", 
                    "description": "Type of schedule interval"
                }
            }, 
            "description": "Defines the snapshot schedule"
        }, 
        "server_access_config": {
            "title": "Remote access config of a server", 
            "required": [
                "name"
            ], 
            "type": "object", 
            "properties": {
                "fqdn": {
                    "type": "string", 
                    "description": "Host fully qualified domain name"
                }, 
                "ip_address": {
                    "type": "string"
                }, 
                "port": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "name": {
                    "type": "string", 
                    "description": "User friendly name of the server", 
                    "maxLength": 140
                }
            }, 
            "description": "Remote access config of a server"
        }, 
        "server_ip_config": {
            "title": "IP config of a server", 
            "required": [
                "ip_address"
            ], 
            "type": "object", 
            "properties": {
                "ip_address": {
                    "type": "string"
                }, 
                "name": {
                    "type": "string", 
                    "maxLength": 140
                }, 
                "port": {
                    "type": "integer", 
                    "format": "int32"
                }
            }, 
            "description": "IP config of a server"
        }, 
        "smtp_server": {
            "title": "SMTP server", 
            "required": [
                "email_address", 
                "server"
            ], 
            "type": "object", 
            "properties": {
                "email_address": {
                    "type": "string"
                }, 
                "type": {
                    "default": "PLAIN", 
                    "enum": [
                        "PLAIN", 
                        "STARTTLS", 
                        "SSL"
                    ], 
                    "type": "string"
                }, 
                "server": {
                    "$ref": "#/definitions/cluster_network_entity"
                }
            }, 
            "description": "SMTP Server"
        }, 
        "snapshot_policy": {
            "title": "Snapshot policy", 
            "required": [
                "snapshot_schedules"
            ], 
            "type": "object", 
            "properties": {
                "snapshot_schedules": {
                    "items": {
                        "properties": {
                            "snapshot_type": {
                                "enum": [
                                    "CRASH_CONSISTENT", 
                                    "APPLICATION_CONSISTENT"
                                ], 
                                "type": "string", 
                                "description": "Crash consistent or Application Consistent snapshot"
                            }, 
                            "local_retention_quantity": {
                                "type": "integer", 
                                "description": "The following describes the local snapshot retention quantity\ncorresponding to the schedule.\n", 
                                "format": "int32"
                            }, 
                            "replication_targets": {
                                "items": {
                                    "properties": {
                                        "remote_retention_quantity": {
                                            "type": "integer", 
                                            "description": "The following describes the snapshot retention quantity\nfor a given replication target.\n", 
                                            "format": "int32"
                                        }, 
                                        "cluster_reference": {
                                            "description": "Uuid of cluster to which we will be replicating\n", 
                                            "$ref": "#/definitions/cluster_reference"
                                        }, 
                                        "availability_zone_reference": {
                                            "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                                            "type": "string", 
                                            "description": "Availability zone uuid"
                                        }
                                    }
                                }, 
                                "type": "array", 
                                "description": "List of replication targets"
                            }, 
                            "schedule": {
                                "$ref": "#/definitions/schedule"
                            }
                        }
                    }, 
                    "type": "array", 
                    "description": "List of snapshot schedules"
                }
            }, 
            "description": "Describes how and where to backup the kind"
        }, 
        "software_list_metadata": {
            "title": "Metadata for software list", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "software", 
                    "readOnly": true, 
                    "enum": [
                        "software"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found for the kind"
                }, 
                "sort_column": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "software_metadata": {
            "title": "software metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "type": "string", 
                    "description": "Time when software was last updated"
                }, 
                "kind": {
                    "default": "software", 
                    "readOnly": true, 
                    "enum": [
                        "software"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "software uuid"
                }, 
                "creation_time": {
                    "type": "string", 
                    "description": "Time when software was created"
                }, 
                "account_reference": {
                    "$ref": "#/definitions/account_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the software"
                }, 
                "parent_reference": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "If present, spec was copied from the referenced entity. Could have\nbeen a live entity, backup, snapshot or template entity. This field\nis special as it is the only field in metadata that is modifiable by\nthe user in case of template-based upgrades and in-place reverts.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "entity_version": {
                    "type": "integer", 
                    "description": "Monotonically increasing number"
                }, 
                "name": {
                    "type": "string", 
                    "description": "software name", 
                    "maxLength": 140
                }
            }, 
            "description": "The software kind metadata"
        }, 
        "software_reference": {
            "title": "Reference to a software", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "software", 
                    "readOnly": true, 
                    "enum": [
                        "software"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "name": {
                    "type": "string", 
                    "maxLength": 140
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string"
                }
            }, 
            "description": "The reference to a software"
        }, 
        "software_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "status": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "Only value possible is \"failure\"."
                }, 
                "kind": {
                    "default": "software", 
                    "readOnly": true, 
                    "enum": [
                        "software"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "details": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "readOnly": true, 
                    "type": "object", 
                    "description": "Custom key-value details relevant to the status."
                }, 
                "message": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "A sentence explaining the reason for the status."
                }, 
                "reason": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "One snake_case word."
                }, 
                "api_version": {
                    "readOnly": true, 
                    "type": "string"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "software_type": {
            "title": "Software type", 
            "properties": {
                "type": {
                    "enum": [
                        "NOS"
                    ], 
                    "type": "string"
                }
            }, 
            "description": "Software type"
        }, 
        "sort_order": {
            "enum": [
                "ASCENDING", 
                "DESCENDING"
            ], 
            "type": "string", 
            "description": "The sort order in which results are returned", 
            "title": "Sort order"
        }, 
        "ssl_key": {
            "title": "SSL certificate", 
            "required": [
                "key_type"
            ], 
            "type": "object", 
            "properties": {
                "key_type": {
                    "$ref": "#/definitions/ssl_key_type"
                }, 
                "key_name": {
                    "type": "string"
                }, 
                "signing_info": {
                    "$ref": "#/definitions/certification_signing_info"
                }, 
                "expire_datetime": {
                    "type": "string", 
                    "description": "Data when the key expires"
                }
            }, 
            "description": "SSL certificate"
        }, 
        "ssl_key_type": {
            "enum": [
                "RSA_2048", 
                "ECDSA_256", 
                "ECDSA_384"
            ], 
            "type": "string", 
            "description": "SSL key type", 
            "title": "SSL key type"
        }, 
        "stage_progress": {
            "title": "Progress of a stage of a workflow", 
            "required": [
                "execution_status"
            ], 
            "type": "object", 
            "properties": {
                "tasks": {
                    "items": {
                        "$ref": "#/definitions/step_progress"
                    }, 
                    "type": "array", 
                    "description": "Tasks to be done for this Stage"
                }, 
                "execution_status": {
                    "$ref": "#/definitions/execution_status"
                }
            }, 
            "description": "Progress of a stage of a workflow"
        }, 
        "status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "status": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "Only value possible is \"failure\"."
                }, 
                "kind": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The entitys kind. i.e. \"status\"."
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "details": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "readOnly": true, 
                    "type": "object", 
                    "description": "Custom key-value details relevant to the status."
                }, 
                "message": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "A sentence explaining the reason for the status."
                }, 
                "reason": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "One snake_case word."
                }, 
                "api_version": {
                    "readOnly": true, 
                    "type": "string"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "step_progress": {
            "title": "Progress of a step of a stage", 
            "type": "object", 
            "properties": {
                "tasks": {
                    "items": {
                        "$ref": "#/definitions/execution_status"
                    }, 
                    "type": "array", 
                    "description": "Tasks to be done for this Step"
                }, 
                "description": {
                    "type": "string", 
                    "description": "Description of purpose of step captured from stage"
                }
            }, 
            "description": "Progress of a step of a stage"
        }, 
        "timed_reference": {
            "title": "Timed Reference", 
            "type": "object", 
            "properties": {
                "expiration_time": {
                    "type": "string", 
                    "description": "The time after which the reference is not to be considered valid.\n", 
                    "format": "date-time"
                }, 
                "reference": {
                    "$ref": "#/definitions/reference"
                }
            }, 
            "description": "A reference that is invalid after the given expiration time."
        }, 
        "user": {
            "title": "User entity", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/user_resources"
                }, 
                "api_version": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/user_metadata"
                }
            }, 
            "description": "User entity"
        }, 
        "user_list_metadata": {
            "title": "Metadata for user list", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "user", 
                    "readOnly": true, 
                    "enum": [
                        "user"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found for the kind"
                }, 
                "sort_column": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "user_metadata": {
            "title": "user metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "type": "string", 
                    "description": "Time when user was last updated"
                }, 
                "kind": {
                    "default": "user", 
                    "readOnly": true, 
                    "enum": [
                        "user"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "user uuid"
                }, 
                "creation_time": {
                    "type": "string", 
                    "description": "Time when user was created"
                }, 
                "account_reference": {
                    "$ref": "#/definitions/account_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the user"
                }, 
                "parent_reference": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "If present, spec was copied from the referenced entity. Could have\nbeen a live entity, backup, snapshot or template entity. This field\nis special as it is the only field in metadata that is modifiable by\nthe user in case of template-based upgrades and in-place reverts.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "entity_version": {
                    "type": "integer", 
                    "description": "Monotonically increasing number"
                }, 
                "name": {
                    "type": "string", 
                    "description": "user name", 
                    "maxLength": 140
                }
            }, 
            "description": "The user kind metadata"
        }, 
        "user_reference": {
            "title": "Reference to a user", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "user", 
                    "readOnly": true, 
                    "enum": [
                        "user"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "name": {
                    "type": "string", 
                    "maxLength": 140
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string"
                }
            }, 
            "description": "The reference to a user"
        }, 
        "user_resources": {
            "title": "User resource", 
            "required": [
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "User's UserPrincipalName from the directory service", 
                    "maxLength": 140
                }, 
                "resources": {
                    "type": "object", 
                    "properties": {
                        "resource_domain": {
                            "$ref": "#/definitions/resource_domain_details"
                        }, 
                        "roles_list": {
                            "items": {
                                "$ref": "#/definitions/role_resources_status"
                            }, 
                            "type": "array"
                        }, 
                        "display_name": {
                            "readOnly": true, 
                            "type": "string", 
                            "description": "User's display name(common name) from the directory service"
                        }, 
                        "projects_list": {
                            "items": {
                                "$ref": "#/definitions/project_resources_status"
                            }, 
                            "type": "array", 
                            "description": "List of project the user is in."
                        }, 
                        "user_principal_name": {
                            "type": "string", 
                            "description": "UserPrincipalName of the user in the directory service"
                        }, 
                        "public_key_list": {
                            "items": {
                                "$ref": "#/definitions/public_key"
                            }, 
                            "type": "array", 
                            "description": "Public keys assigned to the user"
                        }
                    }, 
                    "title": "user resource"
                }
            }, 
            "description": "A user kind"
        }, 
        "user_resources_spec": {
            "title": "User resource spec", 
            "required": [
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "User's UserPrincipalName from the directory service", 
                    "maxLength": 140
                }, 
                "resources": {
                    "type": "object", 
                    "properties": {
                        "public_key_list": {
                            "items": {
                                "$ref": "#/definitions/public_key"
                            }, 
                            "type": "array", 
                            "description": "Public keys assigned to the user"
                        }
                    }, 
                    "title": "user resource"
                }
            }, 
            "description": "User resource spec"
        }, 
        "user_spec": {
            "title": "User spec", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/user_resources_spec"
                }, 
                "api_version": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/user_metadata"
                }
            }, 
            "description": "User spec"
        }, 
        "user_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "status": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "Only value possible is \"failure\"."
                }, 
                "kind": {
                    "default": "user", 
                    "readOnly": true, 
                    "enum": [
                        "user"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "details": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "readOnly": true, 
                    "type": "object", 
                    "description": "Custom key-value details relevant to the status."
                }, 
                "message": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "A sentence explaining the reason for the status."
                }, 
                "reason": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "One snake_case word."
                }, 
                "api_version": {
                    "readOnly": true, 
                    "type": "string"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "versions": {
            "title": "Versions", 
            "required": [
                "major_version", 
                "minor_version"
            ], 
            "type": "object", 
            "properties": {
                "major_version": {
                    "type": "string", 
                    "description": "The major number of the API", 
                    "format": "integer"
                }, 
                "minor_version": {
                    "type": "string", 
                    "description": "The minor number of the API", 
                    "format": "integer"
                }
            }, 
            "description": "Supported API Versions"
        }, 
        "virtual_disk": {
            "title": "Virtual Disk (VM Disk)", 
            "type": "object", 
            "properties": {
                "disk_size_mb": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "Size for the disk in MB.", 
                    "format": "int32"
                }, 
                "data_source_reference": {
                    "$ref": "#/definitions/reference"
                }, 
                "device_properties": {
                    "type": "object", 
                    "properties": {
                        "disk_address": {
                            "$ref": "#/definitions/disk_address"
                        }, 
                        "device_type": {
                            "default": "DISK", 
                            "enum": [
                                "DISK", 
                                "CDROM"
                            ], 
                            "type": "string"
                        }
                    }
                }, 
                "uuid": {
                    "readOnly": true, 
                    "type": "string"
                }
            }, 
            "description": "Virtual Disk (VM Disk)"
        }, 
        "virtual_disk_list_metadata": {
            "title": "Metadata for virtual_disk list", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "virtual_disk", 
                    "readOnly": true, 
                    "enum": [
                        "virtual_disk"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found for the kind"
                }, 
                "sort_column": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "virtual_disk_metadata": {
            "title": "virtual_disk metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "type": "string", 
                    "description": "Time when virtual_disk was last updated"
                }, 
                "kind": {
                    "default": "virtual_disk", 
                    "readOnly": true, 
                    "enum": [
                        "virtual_disk"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "virtual_disk uuid"
                }, 
                "creation_time": {
                    "type": "string", 
                    "description": "Time when virtual_disk was created"
                }, 
                "account_reference": {
                    "$ref": "#/definitions/account_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the virtual_disk"
                }, 
                "parent_reference": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "If present, spec was copied from the referenced entity. Could have\nbeen a live entity, backup, snapshot or template entity. This field\nis special as it is the only field in metadata that is modifiable by\nthe user in case of template-based upgrades and in-place reverts.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "entity_version": {
                    "type": "integer", 
                    "description": "Monotonically increasing number"
                }, 
                "name": {
                    "type": "string", 
                    "description": "virtual_disk name", 
                    "maxLength": 140
                }
            }, 
            "description": "The virtual_disk kind metadata"
        }, 
        "virtual_disk_reference": {
            "title": "Reference to a virtual_disk", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "virtual_disk", 
                    "readOnly": true, 
                    "enum": [
                        "virtual_disk"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "name": {
                    "type": "string", 
                    "maxLength": 140
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string"
                }
            }, 
            "description": "The reference to a virtual_disk"
        }, 
        "virtual_disk_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "status": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "Only value possible is \"failure\"."
                }, 
                "kind": {
                    "default": "virtual_disk", 
                    "readOnly": true, 
                    "enum": [
                        "virtual_disk"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "details": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "readOnly": true, 
                    "type": "object", 
                    "description": "Custom key-value details relevant to the status."
                }, 
                "message": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "A sentence explaining the reason for the status."
                }, 
                "reason": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "One snake_case word."
                }, 
                "api_version": {
                    "readOnly": true, 
                    "type": "string"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "virtual_nic": {
            "title": "Virtual NIC", 
            "type": "object", 
            "properties": {
                "network_reference": {
                    "$ref": "#/definitions/reference"
                }, 
                "packet_processing_nic_name": {
                    "type": "string", 
                    "description": "A user-defined name for this NIC.", 
                    "maxLength": 140
                }, 
                "packet_processor_chain_reference": {
                    "$ref": "#/definitions/packet_processor_chain_reference"
                }, 
                "mac_address": {
                    "type": "string", 
                    "description": "The MAC address for the adapter"
                }, 
                "nic_type": {
                    "enum": [
                        "NORMAL_NIC", 
                        "PACKET_PROCESSING_NIC"
                    ], 
                    "type": "string", 
                    "description": "The type of this NIC. Defaults to NORMAL_NIC"
                }
            }, 
            "description": "Virtual NIC"
        }, 
        "virtual_nic_list_metadata": {
            "title": "Metadata for virtual_nic list", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "virtual_nic", 
                    "readOnly": true, 
                    "enum": [
                        "virtual_nic"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found for the kind"
                }, 
                "sort_column": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "virtual_nic_metadata": {
            "title": "virtual_nic metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "type": "string", 
                    "description": "Time when virtual_nic was last updated"
                }, 
                "kind": {
                    "default": "virtual_nic", 
                    "readOnly": true, 
                    "enum": [
                        "virtual_nic"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "virtual_nic uuid"
                }, 
                "creation_time": {
                    "type": "string", 
                    "description": "Time when virtual_nic was created"
                }, 
                "account_reference": {
                    "$ref": "#/definitions/account_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the virtual_nic"
                }, 
                "parent_reference": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "If present, spec was copied from the referenced entity. Could have\nbeen a live entity, backup, snapshot or template entity. This field\nis special as it is the only field in metadata that is modifiable by\nthe user in case of template-based upgrades and in-place reverts.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "entity_version": {
                    "type": "integer", 
                    "description": "Monotonically increasing number"
                }, 
                "name": {
                    "type": "string", 
                    "description": "virtual_nic name", 
                    "maxLength": 140
                }
            }, 
            "description": "The virtual_nic kind metadata"
        }, 
        "virtual_nic_reference": {
            "title": "Reference to a virtual_nic", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "virtual_nic", 
                    "readOnly": true, 
                    "enum": [
                        "virtual_nic"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "name": {
                    "type": "string", 
                    "maxLength": 140
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string"
                }
            }, 
            "description": "The reference to a virtual_nic"
        }, 
        "virtual_nic_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "status": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "Only value possible is \"failure\"."
                }, 
                "kind": {
                    "default": "virtual_nic", 
                    "readOnly": true, 
                    "enum": [
                        "virtual_nic"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "details": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "readOnly": true, 
                    "type": "object", 
                    "description": "Custom key-value details relevant to the status."
                }, 
                "message": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "A sentence explaining the reason for the status."
                }, 
                "reason": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "One snake_case word."
                }, 
                "api_version": {
                    "readOnly": true, 
                    "type": "string"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "vm": {
            "title": "VM", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "VM Name", 
                    "maxLength": 140
                }, 
                "policies": {
                    "$ref": "#/definitions/policies"
                }, 
                "providers": {
                    "$ref": "#/definitions/providers"
                }, 
                "backup_policy": {
                    "type": "object", 
                    "description": "Describes how and where to backup the VM", 
                    "properties": {
                        "consistency_group_identifier": {
                            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                            "type": "string", 
                            "description": "Consistency group to which this VM belongs to."
                        }, 
                        "snapshot_policy": {
                            "$ref": "#/definitions/snapshot_policy"
                        }
                    }
                }, 
                "cluster_reference": {
                    "description": "Reference to the cluster where this VM exists or needs to be migrated\nto. This is to support migration of a VM from one cluster to another\ncluster.\n", 
                    "$ref": "#/definitions/cluster_reference"
                }, 
                "resources": {
                    "type": "object", 
                    "properties": {
                        "system_vm_base_name": {
                            "type": "string", 
                            "description": "The base VM name if this is a system VM."
                        }, 
                        "num_cores_per_vcpu": {
                            "minimum": 1, 
                            "type": "integer", 
                            "description": "Number of cores per Vcpu", 
                            "format": "int32"
                        }, 
                        "virtual_nic_list": {
                            "items": {
                                "$ref": "#/definitions/virtual_nic"
                            }, 
                            "type": "array", 
                            "description": "Virtual NICs attached to the VM"
                        }, 
                        "memory_size_mb": {
                            "minimum": 1, 
                            "type": "integer", 
                            "description": "Memory size in MB", 
                            "format": "int32"
                        }, 
                        "virtual_disk_reference_list": {
                            "items": {
                                "$ref": "#/definitions/virtual_disk_reference"
                            }, 
                            "type": "array", 
                            "description": "Referenced virtual disks attached to the VM"
                        }, 
                        "power_state": {
                            "enum": [
                                "POWERED_ON", 
                                "POWERED_OFF", 
                                "PAUSED", 
                                "RESETTING"
                            ], 
                            "type": "string", 
                            "description": "The current or desired power state of the VM"
                        }, 
                        "num_vcpus": {
                            "minimum": 1, 
                            "type": "integer", 
                            "description": "Number of Vcpus", 
                            "format": "int32"
                        }, 
                        "virtual_disk_list": {
                            "items": {
                                "$ref": "#/definitions/virtual_disk"
                            }, 
                            "type": "array", 
                            "description": "Virtual Disks attached to the VM"
                        }, 
                        "clone_reference": {
                            "description": "Reference to an entity that the VM should be cloned from.", 
                            "$ref": "#/definitions/reference"
                        }
                    }, 
                    "title": "VM Resources"
                }, 
                "description": {
                    "type": "string", 
                    "description": "A description or user annotation for the VM", 
                    "maxLength": 1000
                }
            }, 
            "description": "VM Input Definition"
        }, 
        "vm_backup": {
            "title": "vm backup input definitions", 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Name of the backup entity", 
                    "maxLength": 140
                }, 
                "policies": {
                    "readOnly": true, 
                    "type": "object", 
                    "description": "Latest read only copy of the entity policies"
                }, 
                "synchronous_copy_enabled": {
                    "type": "boolean", 
                    "description": "Backup is a synchronous replica"
                }
            }, 
            "description": "The input object that defines a vm backup"
        }, 
        "vm_backup_def_status": {
            "title": "vm backup output definitions", 
            "type": "object", 
            "properties": {
                "policies": {
                    "readOnly": true, 
                    "type": "object", 
                    "description": "Latest read only copy of the entity policies"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the backup entity", 
                    "maxLength": 140
                }, 
                "snapshot_reference_list": {
                    "items": {
                        "$ref": "#/definitions/vm_snapshot_reference"
                    }, 
                    "type": "array", 
                    "description": "List of snapshots"
                }, 
                "synchronous_copy_enabled": {
                    "type": "boolean", 
                    "description": "Backup is a synchronous replica"
                }
            }, 
            "description": "The output object that defines a vm backup"
        }, 
        "vm_backup_def_status_reference": {
            "title": "Reference to a vm_backup_def_status", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "vm_backup_def_status", 
                    "readOnly": true, 
                    "enum": [
                        "vm_backup_def_status"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "name": {
                    "type": "string", 
                    "maxLength": 140
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string"
                }
            }, 
            "description": "The reference to a vm_backup_def_status"
        }, 
        "vm_backup_intent_input": {
            "title": "vm Backup Intent Entity", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vm_backup"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/vm_backup_metadata"
                }
            }, 
            "description": "An intentful representation of a vm backup"
        }, 
        "vm_backup_intent_resource": {
            "title": "vm_backup Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/vm_backup_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/vm_backup"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/vm_backup_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a vm_backup"
        }, 
        "vm_backup_intent_response": {
            "title": "vm Backup Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/vm_backup_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/vm_backup"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/vm_backup_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a vm backup"
        }, 
        "vm_backup_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/vm_backup_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/vm_backup_list_metadata"
                }
            }, 
            "description": "Response object for intentful operation of vm_backups"
        }, 
        "vm_backup_list_metadata": {
            "title": "Metadata for vm backup list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "vm_backup", 
                    "readOnly": true, 
                    "enum": [
                        "vm_backup"
                    ], 
                    "type": "string", 
                    "description": "The kind backup name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "sort_column": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "vm_backup_metadata": {
            "title": "vm backup metadata", 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "type": "string", 
                    "description": "Time when vm backup was last updated"
                }, 
                "kind": {
                    "default": "vm_backup", 
                    "readOnly": true, 
                    "enum": [
                        "vm_backup"
                    ], 
                    "type": "string", 
                    "description": "The kind backup name"
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "vm backup uuid"
                }, 
                "parent_reference": {
                    "$ref": "#/definitions/vm_reference"
                }, 
                "creation_time": {
                    "type": "string", 
                    "description": "Time when vm backup was created"
                }, 
                "entity_version": {
                    "type": "integer", 
                    "description": "Monotonically increasing number"
                }, 
                "name": {
                    "type": "string", 
                    "description": "vm backup name", 
                    "maxLength": 140
                }
            }, 
            "description": "The vm backup kind metadata"
        }, 
        "vm_backup_profile": {
            "title": "Create VM backup profile request", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/vm_backup_profile_resources"
                }, 
                "spec": {
                    "$ref": "#/definitions/vm_backup_profile_resources"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/vm_backup_profile_metadata"
                }
            }, 
            "description": "Request to make a VM backup profile"
        }, 
        "vm_backup_profile_list": {
            "title": "VM backup profile entity list", 
            "required": [
                "metadata", 
                "api_version", 
                "entities"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/vm_backup_profile_resources"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/vm_backup_profile_list_metadata"
                }
            }, 
            "description": "VM backup profile entity list"
        }, 
        "vm_backup_profile_list_metadata": {
            "title": "Metadata for vm_backup_profile list", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "vm_backup_profile", 
                    "readOnly": true, 
                    "enum": [
                        "vm_backup_profile"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found for the kind"
                }, 
                "sort_column": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "vm_backup_profile_metadata": {
            "title": "vm_backup_profile metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "type": "string", 
                    "description": "Time when vm_backup_profile was last updated"
                }, 
                "kind": {
                    "default": "vm_backup_profile", 
                    "readOnly": true, 
                    "enum": [
                        "vm_backup_profile"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "vm_backup_profile uuid"
                }, 
                "creation_time": {
                    "type": "string", 
                    "description": "Time when vm_backup_profile was created"
                }, 
                "account_reference": {
                    "$ref": "#/definitions/account_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the vm_backup_profile"
                }, 
                "parent_reference": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "If present, spec was copied from the referenced entity. Could have\nbeen a live entity, backup, snapshot or template entity. This field\nis special as it is the only field in metadata that is modifiable by\nthe user in case of template-based upgrades and in-place reverts.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "entity_version": {
                    "type": "integer", 
                    "description": "Monotonically increasing number"
                }, 
                "name": {
                    "type": "string", 
                    "description": "vm_backup_profile name", 
                    "maxLength": 140
                }
            }, 
            "description": "The vm_backup_profile kind metadata"
        }, 
        "vm_backup_profile_reference": {
            "title": "Reference to a vm_backup_profile", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "vm_backup_profile", 
                    "readOnly": true, 
                    "enum": [
                        "vm_backup_profile"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "name": {
                    "type": "string", 
                    "maxLength": 140
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string"
                }
            }, 
            "description": "The reference to a vm_backup_profile"
        }, 
        "vm_backup_profile_resources": {
            "title": "VM backup profile creation/modification spec", 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "VM backup profile name"
                }, 
                "resources": {
                    "required": [
                        "name", 
                        "backup_policy"
                    ], 
                    "type": "object", 
                    "properties": {
                        "backup_policy": {
                            "type": "object", 
                            "description": "Describes how and where to backup the VM", 
                            "properties": {
                                "snapshot_policy": {
                                    "$ref": "#/definitions/snapshot_policy"
                                }
                            }
                        }
                    }, 
                    "title": "VM backup profile resource"
                }, 
                "description": {
                    "type": "string", 
                    "description": "A description for the VM backup profile"
                }
            }, 
            "description": "VM backup profile creation/modification spec"
        }, 
        "vm_backup_profile_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "status": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "Only value possible is \"failure\"."
                }, 
                "kind": {
                    "default": "vm_backup_profile", 
                    "readOnly": true, 
                    "enum": [
                        "vm_backup_profile"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "details": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "readOnly": true, 
                    "type": "object", 
                    "description": "Custom key-value details relevant to the status."
                }, 
                "message": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "A sentence explaining the reason for the status."
                }, 
                "reason": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "One snake_case word."
                }, 
                "api_version": {
                    "readOnly": true, 
                    "type": "string"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "vm_backup_reference": {
            "title": "Reference to a vm_backup", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "vm_backup", 
                    "readOnly": true, 
                    "enum": [
                        "vm_backup"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "name": {
                    "type": "string", 
                    "maxLength": 140
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string"
                }
            }, 
            "description": "The reference to a vm_backup"
        }, 
        "vm_backup_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "status": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "Only value possible is \"failure\"."
                }, 
                "kind": {
                    "default": "vm_backup", 
                    "readOnly": true, 
                    "enum": [
                        "vm_backup"
                    ], 
                    "type": "string", 
                    "description": "The kind backup name"
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "details": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "readOnly": true, 
                    "type": "object", 
                    "description": "Custom key-value details relevant to the status."
                }, 
                "message": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "A sentence explaining the reason for the status."
                }, 
                "reason": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "One snake_case word."
                }, 
                "api_version": {
                    "readOnly": true, 
                    "type": "string"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "vm_def_status": {
            "title": "VM Status Definition", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "VM Name", 
                    "maxLength": 140
                }, 
                "policies": {
                    "$ref": "#/definitions/policies"
                }, 
                "providers": {
                    "$ref": "#/definitions/providers"
                }, 
                "backup_policy": {
                    "type": "object", 
                    "description": "Describes how and where to backup the VM", 
                    "properties": {
                        "consistency_group_identifier": {
                            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                            "type": "string", 
                            "description": "Consistency group to which this VM belongs to."
                        }, 
                        "snapshot_policy": {
                            "$ref": "#/definitions/snapshot_policy"
                        }
                    }
                }, 
                "cluster_reference": {
                    "description": "Reference to the cluster where this VM exists or needs to be migrated\nto\n", 
                    "$ref": "#definitions/cluster_reference"
                }, 
                "resources": {
                    "type": "object", 
                    "properties": {
                        "host_reference": {
                            "$ref": "#/definitions/reference"
                        }, 
                        "num_cores_per_vcpu": {
                            "minimum": 1, 
                            "type": "integer", 
                            "description": "Number of cores per Vcpu", 
                            "format": "int32"
                        }, 
                        "hypervisor_type": {
                            "enum": [
                                "ESX", 
                                "HyperV", 
                                "AHV"
                            ], 
                            "type": "string", 
                            "description": "The hypervisor type for the hypervisor the VM is hosted on"
                        }, 
                        "virtual_nic_list": {
                            "items": {
                                "$ref": "#/definitions/virtual_nic"
                            }, 
                            "type": "array", 
                            "description": "Virtual NICs attached to the VM"
                        }, 
                        "memory_size_mb": {
                            "minimum": 1, 
                            "type": "integer", 
                            "description": "Memory size in MB", 
                            "format": "int32"
                        }, 
                        "virtual_disk_list": {
                            "items": {
                                "$ref": "#/definitions/virtual_disk"
                            }, 
                            "type": "array", 
                            "description": "Virtual Disks attached to the VM"
                        }, 
                        "power_state": {
                            "enum": [
                                "POWERED_ON", 
                                "POWERED_OFF", 
                                "PAUSED", 
                                "SUSPENDED", 
                                "RESETTING"
                            ], 
                            "type": "string", 
                            "description": "Desired power state of the VM"
                        }, 
                        "num_vcpus": {
                            "minimum": 1, 
                            "type": "integer", 
                            "description": "Number of Vcpus", 
                            "format": "int32"
                        }
                    }, 
                    "title": "VM Resources"
                }, 
                "description": {
                    "type": "string", 
                    "description": "A description or user annotation for the VM", 
                    "maxLength": 1000
                }
            }, 
            "description": "VM Status Definition"
        }, 
        "vm_intent_input": {
            "title": "vm Intent Entity", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "metadata": {
                    "$ref": "#/definitions/vm_metadata"
                }, 
                "spec": {
                    "$ref": "#/definitions/vm"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "options": {
                    "$ref": "#/definitions/options"
                }
            }, 
            "description": "An intentful representation of a vm"
        }, 
        "vm_intent_resource": {
            "title": "vm Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/vm_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/vm"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/vm_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a vm"
        }, 
        "vm_intent_response": {
            "title": "vm Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/vm_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/vm"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/vm_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a vm"
        }, 
        "vm_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/vm_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/vm_list_metadata"
                }
            }, 
            "description": "Response object for intentful operation of vms"
        }, 
        "vm_list_metadata": {
            "title": "Metadata for vm list", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "vm", 
                    "readOnly": true, 
                    "enum": [
                        "vm"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found for the kind"
                }, 
                "sort_column": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "vm_metadata": {
            "title": "vm metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "type": "string", 
                    "description": "Time when vm was last updated"
                }, 
                "kind": {
                    "default": "vm", 
                    "readOnly": true, 
                    "enum": [
                        "vm"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "vm uuid"
                }, 
                "creation_time": {
                    "type": "string", 
                    "description": "Time when vm was created"
                }, 
                "account_reference": {
                    "$ref": "#/definitions/account_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the vm"
                }, 
                "parent_reference": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "If present, spec was copied from the referenced entity. Could have\nbeen a live entity, backup, snapshot or template entity. This field\nis special as it is the only field in metadata that is modifiable by\nthe user in case of template-based upgrades and in-place reverts.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "entity_version": {
                    "type": "integer", 
                    "description": "Monotonically increasing number"
                }, 
                "name": {
                    "type": "string", 
                    "description": "vm name", 
                    "maxLength": 140
                }
            }, 
            "description": "The vm kind metadata"
        }, 
        "vm_profile": {
            "title": "Profile vm", 
            "type": "object", 
            "properties": {
                "spec": {
                    "type": "object", 
                    "properties": {
                        "name": {
                            "type": "string", 
                            "maxLength": 140
                        }, 
                        "policies": {
                            "items": {
                                "type": "object"
                            }, 
                            "type": "array"
                        }
                    }
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "type": "object", 
                    "properties": {
                        "kind": {
                            "default": "vm_profile", 
                            "readOnly": true, 
                            "enum": [
                                "vm_profile"
                            ], 
                            "type": "string"
                        }, 
                        "uuid": {
                            "type": "string"
                        }
                    }
                }
            }, 
            "description": "Profile for vm"
        }, 
        "vm_profile_reference": {
            "title": "Reference to a vm_profile", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "vm_profile", 
                    "readOnly": true, 
                    "enum": [
                        "vm_profile"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "name": {
                    "type": "string", 
                    "maxLength": 140
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string"
                }
            }, 
            "description": "The reference to a vm_profile"
        }, 
        "vm_reference": {
            "title": "Reference to a vm", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "vm", 
                    "readOnly": true, 
                    "enum": [
                        "vm"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "name": {
                    "type": "string", 
                    "maxLength": 140
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string"
                }
            }, 
            "description": "The reference to a vm"
        }, 
        "vm_snapshot": {
            "title": "vm snapshot input definitions", 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Name of the snapshot", 
                    "maxLength": 140
                }, 
                "entity_backup_reference": {
                    "$ref": "#/definitions/vm_backup_reference"
                }, 
                "snapshot_type": {
                    "enum": [
                        "CRASH_CONSISTENT", 
                        "APPLICATION_CONSISTENT"
                    ], 
                    "type": "string", 
                    "description": "Crash consistent or Application Consistent snapshot"
                }, 
                "location_agnostic_identifier": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "If a snapshot is replicated to a different clusters, then all the\ninstances of same snapshot will share this identifier.\n"
                }, 
                "resources": {
                    "type": "object", 
                    "properties": {
                        "entity_uuid": {
                            "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                            "type": "string", 
                            "description": "UUID of the base entity for which snapshot need to be taken\n"
                        }
                    }, 
                    "title": "Snapshot Resources"
                }, 
                "consistency_group_identifier": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "This field is same for all the entities (irrespective of kind) that\nwere snapshotted together.\n"
                }, 
                "cluster_reference": {
                    "description": "Reference to the cluster where this snapshot exists or needs to be\nreplicated to. This is to support the replication and retrieve of the\nsnapshot to a cluster.\n", 
                    "$ref": "#/definitions/cluster_reference"
                }, 
                "expiration_time_msecs": {
                    "type": "integer", 
                    "description": "The time when this snapshot expires and will be garbage collected.\nIf not set, then the snapshot never expires.\n"
                }
            }, 
            "description": "The input object that defines a vm snapshot"
        }, 
        "vm_snapshot_def_status": {
            "title": "vm snapshot output definitions", 
            "required": [
                "snapshot_file_list"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Name of the snapshot", 
                    "maxLength": 140
                }, 
                "entity_backup_reference": {
                    "$ref": "#/definitions/vm_backup_reference"
                }, 
                "location_agnostic_identifier": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "If a snapshot is replicated to a different clusters, then all the\ninstances of same snapshot will share this identifier.\n"
                }, 
                "snapshot_type": {
                    "enum": [
                        "CRASH_CONSISTENT", 
                        "APPLICATION_CONSISTENT"
                    ], 
                    "type": "string", 
                    "description": "Crash consistent or Application Consistent snapshot"
                }, 
                "data_snapshot_identifier": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "Handle of the data snapshot. Cerebro PD snapshot handle can be used\nhere as data snapshot uuid. If a CG contains multiple entities,\nthen all the entity snapshots will share the same data snapshot uuid.\n"
                }, 
                "snapshot_file_list": {
                    "items": {
                        "type": "object", 
                        "properties": {
                            "file_path": {
                                "type": "string", 
                                "description": "Pathname of the file that participated in the snapshot.\n"
                            }, 
                            "snapshot_file_path": {
                                "type": "string", 
                                "description": "Pathname of the snapshot of the file."
                            }
                        }
                    }, 
                    "type": "array", 
                    "description": "Describes the files that are included in the snapshot.\n"
                }, 
                "resources": {
                    "type": "object", 
                    "properties": {
                        "entity_uuid": {
                            "type": "string", 
                            "description": "UUID of the base entity for which snapshot need to be taken\n"
                        }
                    }, 
                    "title": "Snapshot Resources"
                }, 
                "consistency_group_identifier": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "This field is same for all the entities (irrespective of kind) that\nwere snapshotted together.\n"
                }, 
                "cluster_reference": {
                    "description": "Reference to the cluster where this snapshot exists or needs to be\nreplicated to. This is to support the replication and retrieve of the\nsnapshot to a cluster.\n", 
                    "$ref": "#/definitions/cluster_reference"
                }, 
                "expiration_time_msecs": {
                    "type": "integer", 
                    "description": "The time when this snapshot expires and will be garbage collected.\nIf not set, then the snapshot never expires.\n"
                }
            }, 
            "description": "The output object that defines a vm snapshot"
        }, 
        "vm_snapshot_def_status_reference": {
            "title": "Reference to a vm_snapshot_def_status", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "vm_snapshot_def_status", 
                    "readOnly": true, 
                    "enum": [
                        "vm_snapshot_def_status"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "name": {
                    "type": "string", 
                    "maxLength": 140
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string"
                }
            }, 
            "description": "The reference to a vm_snapshot_def_status"
        }, 
        "vm_snapshot_intent_input": {
            "title": "vm Snapshot Intent Entity", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vm_snapshot"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/vm_snapshot_metadata"
                }
            }, 
            "description": "An intentful representation of a vm snapshot"
        }, 
        "vm_snapshot_intent_resource": {
            "title": "vm_snapshot Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/vm_snapshot_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/vm_snapshot"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/vm_snapshot_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a vm_snapshot"
        }, 
        "vm_snapshot_intent_response": {
            "title": "vm Snapshot Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/vm_snapshot_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/vm_snapshot"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/vm_snapshot_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a vm snapshot"
        }, 
        "vm_snapshot_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/vm_snapshot_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/vm_snapshot_list_metadata"
                }
            }, 
            "description": "Response object for intentful operation of vm_snapshots"
        }, 
        "vm_snapshot_list_metadata": {
            "title": "Metadata for vm snapshot list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "vm_snapshot", 
                    "readOnly": true, 
                    "enum": [
                        "vm_snapshot"
                    ], 
                    "type": "string", 
                    "description": "The kind snapshot name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "sort_column": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "vm_snapshot_metadata": {
            "title": "vm snapshot metadata", 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "type": "string", 
                    "description": "Time when vm snapshot was last updated"
                }, 
                "kind": {
                    "default": "vm_snapshot", 
                    "readOnly": true, 
                    "enum": [
                        "vm_snapshot"
                    ], 
                    "type": "string", 
                    "description": "The kind snapshot name"
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "vm snapshot uuid"
                }, 
                "creation_time": {
                    "type": "string", 
                    "description": "Time when vm snapshot was created"
                }, 
                "account_reference": {
                    "$ref": "#/definitions/account_reference"
                }, 
                "parent_reference": {
                    "$ref": "#/definitions/vm_reference"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "entity_version": {
                    "type": "integer", 
                    "description": "Monotonically increasing number"
                }, 
                "name": {
                    "type": "string", 
                    "description": "vm snapshot name", 
                    "maxLength": 140
                }
            }, 
            "description": "The vm snapshot kind metadata"
        }, 
        "vm_snapshot_reference": {
            "title": "Reference to a vm_snapshot", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "vm_snapshot", 
                    "readOnly": true, 
                    "enum": [
                        "vm_snapshot"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "name": {
                    "type": "string", 
                    "maxLength": 140
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string"
                }
            }, 
            "description": "The reference to a vm_snapshot"
        }, 
        "vm_snapshot_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "status": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "Only value possible is \"failure\"."
                }, 
                "kind": {
                    "default": "vm_snapshot", 
                    "readOnly": true, 
                    "enum": [
                        "vm_snapshot"
                    ], 
                    "type": "string", 
                    "description": "The kind snapshot name"
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "details": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "readOnly": true, 
                    "type": "object", 
                    "description": "Custom key-value details relevant to the status."
                }, 
                "message": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "A sentence explaining the reason for the status."
                }, 
                "reason": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "One snake_case word."
                }, 
                "api_version": {
                    "readOnly": true, 
                    "type": "string"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "vm_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "status": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "Only value possible is \"failure\"."
                }, 
                "kind": {
                    "default": "vm", 
                    "readOnly": true, 
                    "enum": [
                        "vm"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "details": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "readOnly": true, 
                    "type": "object", 
                    "description": "Custom key-value details relevant to the status."
                }, 
                "message": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "A sentence explaining the reason for the status."
                }, 
                "reason": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "One snake_case word."
                }, 
                "api_version": {
                    "readOnly": true, 
                    "type": "string"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "vm_template": {
            "title": "Template vm", 
            "type": "object", 
            "properties": {
                "spec": {
                    "type": "object", 
                    "properties": {
                        "profile_reference_list": {
                            "items": {
                                "$ref": "#/definitions/vm_profile_reference"
                            }, 
                            "type": "array"
                        }, 
                        "vm}_spec": {
                            "$ref": "#/definitions/vm"
                        }, 
                        "name": {
                            "type": "string", 
                            "maxLength": 140
                        }
                    }
                }, 
                "metadata": {
                    "type": "object", 
                    "properties": {
                        "kind": {
                            "default": "vm_template", 
                            "readOnly": true, 
                            "enum": [
                                "vm_template"
                            ], 
                            "type": "string"
                        }, 
                        "uuid": {
                            "type": "string"
                        }
                    }
                }
            }, 
            "description": "Template for vm"
        }, 
        "vm_template_reference": {
            "title": "Reference to a vm_template", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "vm_template", 
                    "readOnly": true, 
                    "enum": [
                        "vm_template"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "name": {
                    "type": "string", 
                    "maxLength": 140
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string"
                }
            }, 
            "description": "The reference to a vm_template"
        }, 
        "vmdisk_spec_clone": {
            "title": "Vmdisk clone spec", 
            "type": "object", 
            "properties": {
                "min_size": {
                    "type": "integer", 
                    "format": "long"
                }, 
                "vmdisk_reference": {
                    "$ref": "#/definitions/reference"
                }, 
                "adsf_file_path": {
                    "type": "string"
                }
            }, 
            "description": "Spec for cloning an existing vmdisk"
        }, 
        "volume_disk_resource": {
            "title": "Volume disk configuration", 
            "type": "object", 
            "properties": {
                "size_mb": {
                    "type": "integer", 
                    "description": "Size of the disk in MiB", 
                    "format": "int64"
                }, 
                "index": {
                    "type": "integer", 
                    "description": "Volume group index of the disk"
                }, 
                "create_spec": {
                    "$ref": "#/definitions/create_resource"
                }, 
                "clone_spec": {
                    "$ref": "#/definitions/clone_resource"
                }
            }, 
            "description": "Volume disk configuration"
        }, 
        "volume_group": {
            "title": "Volume group object", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/volume_group_resource"
                }, 
                "spec": {
                    "type": "object", 
                    "properties": {
                        "resources": {
                            "$ref": "#/definitions/volume_group_resource"
                        }
                    }
                }, 
                "api_version": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/volume_group_metadata"
                }
            }, 
            "description": "Volume group object"
        }, 
        "volume_group_attach_resource": {
            "title": "Attached iSCSI initiators", 
            "type": "object", 
            "properties": {
                "vm_uuid": {
                    "type": "string", 
                    "description": "VM UUID attached to the volume group"
                }, 
                "iscsi_initiator_name": {
                    "type": "string", 
                    "description": "Name of the iSCSI initiator"
                }
            }, 
            "description": "Attached iSCSI initiators"
        }, 
        "volume_group_backup": {
            "title": "volume_group backup input definitions", 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Name of the backup entity", 
                    "maxLength": 140
                }, 
                "policies": {
                    "readOnly": true, 
                    "type": "object", 
                    "description": "Latest read only copy of the entity policies"
                }, 
                "synchronous_copy_enabled": {
                    "type": "boolean", 
                    "description": "Backup is a synchronous replica"
                }
            }, 
            "description": "The input object that defines a volume_group backup"
        }, 
        "volume_group_backup_def_status": {
            "title": "volume_group backup output definitions", 
            "type": "object", 
            "properties": {
                "policies": {
                    "readOnly": true, 
                    "type": "object", 
                    "description": "Latest read only copy of the entity policies"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the backup entity", 
                    "maxLength": 140
                }, 
                "snapshot_reference_list": {
                    "items": {
                        "$ref": "#/definitions/volume_group_snapshot_reference"
                    }, 
                    "type": "array", 
                    "description": "List of snapshots"
                }, 
                "synchronous_copy_enabled": {
                    "type": "boolean", 
                    "description": "Backup is a synchronous replica"
                }
            }, 
            "description": "The output object that defines a volume_group backup"
        }, 
        "volume_group_backup_def_status_reference": {
            "title": "Reference to a volume_group_backup_def_status", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "volume_group_backup_def_status", 
                    "readOnly": true, 
                    "enum": [
                        "volume_group_backup_def_status"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "name": {
                    "type": "string", 
                    "maxLength": 140
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string"
                }
            }, 
            "description": "The reference to a volume_group_backup_def_status"
        }, 
        "volume_group_backup_intent_input": {
            "title": "volume_group Backup Intent Entity", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/volume_group_backup"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/volume_group_backup_metadata"
                }
            }, 
            "description": "An intentful representation of a volume_group backup"
        }, 
        "volume_group_backup_intent_resource": {
            "title": "volume_group_backup Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/volume_group_backup_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/volume_group_backup"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/volume_group_backup_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a volume_group_backup"
        }, 
        "volume_group_backup_intent_response": {
            "title": "volume_group Backup Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/volume_group_backup_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/volume_group_backup"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/volume_group_backup_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a volume_group backup"
        }, 
        "volume_group_backup_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/volume_group_backup_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/volume_group_backup_list_metadata"
                }
            }, 
            "description": "Response object for intentful operation of volume_group_backups"
        }, 
        "volume_group_backup_list_metadata": {
            "title": "Metadata for volume_group backup list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "volume_group_backup", 
                    "readOnly": true, 
                    "enum": [
                        "volume_group_backup"
                    ], 
                    "type": "string", 
                    "description": "The kind backup name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "sort_column": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "volume_group_backup_metadata": {
            "title": "volume_group backup metadata", 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "type": "string", 
                    "description": "Time when volume_group backup was last updated"
                }, 
                "kind": {
                    "default": "volume_group_backup", 
                    "readOnly": true, 
                    "enum": [
                        "volume_group_backup"
                    ], 
                    "type": "string", 
                    "description": "The kind backup name"
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "volume_group backup uuid"
                }, 
                "parent_reference": {
                    "$ref": "#/definitions/volume_group_reference"
                }, 
                "creation_time": {
                    "type": "string", 
                    "description": "Time when volume_group backup was created"
                }, 
                "entity_version": {
                    "type": "integer", 
                    "description": "Monotonically increasing number"
                }, 
                "name": {
                    "type": "string", 
                    "description": "volume_group backup name", 
                    "maxLength": 140
                }
            }, 
            "description": "The volume_group backup kind metadata"
        }, 
        "volume_group_backup_reference": {
            "title": "Reference to a volume_group_backup", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "volume_group_backup", 
                    "readOnly": true, 
                    "enum": [
                        "volume_group_backup"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "name": {
                    "type": "string", 
                    "maxLength": 140
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string"
                }
            }, 
            "description": "The reference to a volume_group_backup"
        }, 
        "volume_group_backup_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "status": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "Only value possible is \"failure\"."
                }, 
                "kind": {
                    "default": "volume_group_backup", 
                    "readOnly": true, 
                    "enum": [
                        "volume_group_backup"
                    ], 
                    "type": "string", 
                    "description": "The kind backup name"
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "details": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "readOnly": true, 
                    "type": "object", 
                    "description": "Custom key-value details relevant to the status."
                }, 
                "message": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "A sentence explaining the reason for the status."
                }, 
                "reason": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "One snake_case word."
                }, 
                "api_version": {
                    "readOnly": true, 
                    "type": "string"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "volume_group_list": {
            "title": "List of volume group objects", 
            "required": [
                "metadata", 
                "entities"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/volume_group"
                    }, 
                    "type": "array"
                }, 
                "metadata": {
                    "$ref": "#/definitions/volume_group_list_metadata"
                }
            }, 
            "description": "List of volume group objects"
        }, 
        "volume_group_list_metadata": {
            "title": "Metadata for volume_group list", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "volume_group", 
                    "readOnly": true, 
                    "enum": [
                        "volume_group"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found for the kind"
                }, 
                "sort_column": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "volume_group_metadata": {
            "title": "volume_group metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "type": "string", 
                    "description": "Time when volume_group was last updated"
                }, 
                "kind": {
                    "default": "volume_group", 
                    "readOnly": true, 
                    "enum": [
                        "volume_group"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "volume_group uuid"
                }, 
                "creation_time": {
                    "type": "string", 
                    "description": "Time when volume_group was created"
                }, 
                "account_reference": {
                    "$ref": "#/definitions/account_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the volume_group"
                }, 
                "parent_reference": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "If present, spec was copied from the referenced entity. Could have\nbeen a live entity, backup, snapshot or template entity. This field\nis special as it is the only field in metadata that is modifiable by\nthe user in case of template-based upgrades and in-place reverts.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "entity_version": {
                    "type": "integer", 
                    "description": "Monotonically increasing number"
                }, 
                "name": {
                    "type": "string", 
                    "description": "volume_group name", 
                    "maxLength": 140
                }
            }, 
            "description": "The volume_group kind metadata"
        }, 
        "volume_group_profile": {
            "title": "Profile volume_group", 
            "type": "object", 
            "properties": {
                "spec": {
                    "type": "object", 
                    "properties": {
                        "name": {
                            "type": "string", 
                            "maxLength": 140
                        }, 
                        "policies": {
                            "items": {
                                "type": "object"
                            }, 
                            "type": "array"
                        }
                    }
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "type": "object", 
                    "properties": {
                        "kind": {
                            "default": "volume_group_profile", 
                            "readOnly": true, 
                            "enum": [
                                "volume_group_profile"
                            ], 
                            "type": "string"
                        }, 
                        "uuid": {
                            "type": "string"
                        }
                    }
                }
            }, 
            "description": "Profile for volume_group"
        }, 
        "volume_group_profile_reference": {
            "title": "Reference to a volume_group_profile", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "volume_group_profile", 
                    "readOnly": true, 
                    "enum": [
                        "volume_group_profile"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "name": {
                    "type": "string", 
                    "maxLength": 140
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string"
                }
            }, 
            "description": "The reference to a volume_group_profile"
        }, 
        "volume_group_reference": {
            "title": "Reference to a volume_group", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "volume_group", 
                    "readOnly": true, 
                    "enum": [
                        "volume_group"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "name": {
                    "type": "string", 
                    "maxLength": 140
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string"
                }
            }, 
            "description": "The reference to a volume_group"
        }, 
        "volume_group_resource": {
            "title": "Volume group configuration", 
            "type": "object", 
            "properties": {
                "iscsi_target_prefix": {
                    "type": "string", 
                    "description": "iSCSI target prefix-name"
                }, 
                "is_shared": {
                    "type": "boolean", 
                    "description": "Whether the volume group can be shared accross multiple iSCSI initiators\n"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Volume group name", 
                    "maxLength": 140
                }, 
                "disk_list": {
                    "items": {
                        "$ref": "#/definitions/volume_disk_resource"
                    }, 
                    "type": "array", 
                    "description": "Volume group disk specification"
                }, 
                "attachment_list": {
                    "items": {
                        "$ref": "#/definitions/volume_group_attach_resource"
                    }, 
                    "type": "array", 
                    "description": "VMs attached to volume group"
                }, 
                "iscsi_initiator_name_list": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "iSCSI qualified name list"
                }, 
                "description": {
                    "type": "string", 
                    "description": "Volume group description", 
                    "maxLength": 1000
                }
            }, 
            "description": "Volume group configuration"
        }, 
        "volume_group_snapshot": {
            "title": "volume_group snapshot input definitions", 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Name of the snapshot", 
                    "maxLength": 140
                }, 
                "entity_backup_reference": {
                    "$ref": "#/definitions/volume_group_backup_reference"
                }, 
                "snapshot_type": {
                    "enum": [
                        "CRASH_CONSISTENT", 
                        "APPLICATION_CONSISTENT"
                    ], 
                    "type": "string", 
                    "description": "Crash consistent or Application Consistent snapshot"
                }, 
                "location_agnostic_identifier": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "If a snapshot is replicated to a different clusters, then all the\ninstances of same snapshot will share this identifier.\n"
                }, 
                "resources": {
                    "type": "object", 
                    "properties": {
                        "entity_uuid": {
                            "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                            "type": "string", 
                            "description": "UUID of the base entity for which snapshot need to be taken\n"
                        }
                    }, 
                    "title": "Snapshot Resources"
                }, 
                "consistency_group_identifier": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "This field is same for all the entities (irrespective of kind) that\nwere snapshotted together.\n"
                }, 
                "cluster_reference": {
                    "description": "Reference to the cluster where this snapshot exists or needs to be\nreplicated to. This is to support the replication and retrieve of the\nsnapshot to a cluster.\n", 
                    "$ref": "#/definitions/cluster_reference"
                }, 
                "expiration_time_msecs": {
                    "type": "integer", 
                    "description": "The time when this snapshot expires and will be garbage collected.\nIf not set, then the snapshot never expires.\n"
                }
            }, 
            "description": "The input object that defines a volume_group snapshot"
        }, 
        "volume_group_snapshot_def_status": {
            "title": "volume_group snapshot output definitions", 
            "required": [
                "snapshot_file_list"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Name of the snapshot", 
                    "maxLength": 140
                }, 
                "entity_backup_reference": {
                    "$ref": "#/definitions/volume_group_backup_reference"
                }, 
                "location_agnostic_identifier": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "If a snapshot is replicated to a different clusters, then all the\ninstances of same snapshot will share this identifier.\n"
                }, 
                "snapshot_type": {
                    "enum": [
                        "CRASH_CONSISTENT", 
                        "APPLICATION_CONSISTENT"
                    ], 
                    "type": "string", 
                    "description": "Crash consistent or Application Consistent snapshot"
                }, 
                "data_snapshot_identifier": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "Handle of the data snapshot. Cerebro PD snapshot handle can be used\nhere as data snapshot uuid. If a CG contains multiple entities,\nthen all the entity snapshots will share the same data snapshot uuid.\n"
                }, 
                "snapshot_file_list": {
                    "items": {
                        "type": "object", 
                        "properties": {
                            "file_path": {
                                "type": "string", 
                                "description": "Pathname of the file that participated in the snapshot.\n"
                            }, 
                            "snapshot_file_path": {
                                "type": "string", 
                                "description": "Pathname of the snapshot of the file."
                            }
                        }
                    }, 
                    "type": "array", 
                    "description": "Describes the files that are included in the snapshot.\n"
                }, 
                "resources": {
                    "type": "object", 
                    "properties": {
                        "entity_uuid": {
                            "type": "string", 
                            "description": "UUID of the base entity for which snapshot need to be taken\n"
                        }
                    }, 
                    "title": "Snapshot Resources"
                }, 
                "consistency_group_identifier": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "This field is same for all the entities (irrespective of kind) that\nwere snapshotted together.\n"
                }, 
                "cluster_reference": {
                    "description": "Reference to the cluster where this snapshot exists or needs to be\nreplicated to. This is to support the replication and retrieve of the\nsnapshot to a cluster.\n", 
                    "$ref": "#/definitions/cluster_reference"
                }, 
                "expiration_time_msecs": {
                    "type": "integer", 
                    "description": "The time when this snapshot expires and will be garbage collected.\nIf not set, then the snapshot never expires.\n"
                }
            }, 
            "description": "The output object that defines a volume_group snapshot"
        }, 
        "volume_group_snapshot_def_status_reference": {
            "title": "Reference to a volume_group_snapshot_def_status", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "volume_group_snapshot_def_status", 
                    "readOnly": true, 
                    "enum": [
                        "volume_group_snapshot_def_status"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "name": {
                    "type": "string", 
                    "maxLength": 140
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string"
                }
            }, 
            "description": "The reference to a volume_group_snapshot_def_status"
        }, 
        "volume_group_snapshot_intent_input": {
            "title": "volume_group Snapshot Intent Entity", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/volume_group_snapshot"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/volume_group_snapshot_metadata"
                }
            }, 
            "description": "An intentful representation of a volume_group snapshot"
        }, 
        "volume_group_snapshot_intent_resource": {
            "title": "volume_group_snapshot Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/volume_group_snapshot_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/volume_group_snapshot"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/volume_group_snapshot_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a volume_group_snapshot"
        }, 
        "volume_group_snapshot_intent_response": {
            "title": "volume_group Snapshot Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/volume_group_snapshot_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/volume_group_snapshot"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/volume_group_snapshot_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a volume_group snapshot"
        }, 
        "volume_group_snapshot_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/volume_group_snapshot_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/volume_group_snapshot_list_metadata"
                }
            }, 
            "description": "Response object for intentful operation of volume_group_snapshots"
        }, 
        "volume_group_snapshot_list_metadata": {
            "title": "Metadata for volume_group snapshot list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "volume_group_snapshot", 
                    "readOnly": true, 
                    "enum": [
                        "volume_group_snapshot"
                    ], 
                    "type": "string", 
                    "description": "The kind snapshot name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "sort_column": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "volume_group_snapshot_metadata": {
            "title": "volume_group snapshot metadata", 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "type": "string", 
                    "description": "Time when volume_group snapshot was last updated"
                }, 
                "kind": {
                    "default": "volume_group_snapshot", 
                    "readOnly": true, 
                    "enum": [
                        "volume_group_snapshot"
                    ], 
                    "type": "string", 
                    "description": "The kind snapshot name"
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "volume_group snapshot uuid"
                }, 
                "creation_time": {
                    "type": "string", 
                    "description": "Time when volume_group snapshot was created"
                }, 
                "account_reference": {
                    "$ref": "#/definitions/account_reference"
                }, 
                "parent_reference": {
                    "$ref": "#/definitions/volume_group_reference"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "entity_version": {
                    "type": "integer", 
                    "description": "Monotonically increasing number"
                }, 
                "name": {
                    "type": "string", 
                    "description": "volume_group snapshot name", 
                    "maxLength": 140
                }
            }, 
            "description": "The volume_group snapshot kind metadata"
        }, 
        "volume_group_snapshot_reference": {
            "title": "Reference to a volume_group_snapshot", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "volume_group_snapshot", 
                    "readOnly": true, 
                    "enum": [
                        "volume_group_snapshot"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "name": {
                    "type": "string", 
                    "maxLength": 140
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string"
                }
            }, 
            "description": "The reference to a volume_group_snapshot"
        }, 
        "volume_group_snapshot_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "status": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "Only value possible is \"failure\"."
                }, 
                "kind": {
                    "default": "volume_group_snapshot", 
                    "readOnly": true, 
                    "enum": [
                        "volume_group_snapshot"
                    ], 
                    "type": "string", 
                    "description": "The kind snapshot name"
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "details": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "readOnly": true, 
                    "type": "object", 
                    "description": "Custom key-value details relevant to the status."
                }, 
                "message": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "A sentence explaining the reason for the status."
                }, 
                "reason": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "One snake_case word."
                }, 
                "api_version": {
                    "readOnly": true, 
                    "type": "string"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "volume_group_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "status": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "Only value possible is \"failure\"."
                }, 
                "kind": {
                    "default": "volume_group", 
                    "readOnly": true, 
                    "enum": [
                        "volume_group"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "details": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "readOnly": true, 
                    "type": "object", 
                    "description": "Custom key-value details relevant to the status."
                }, 
                "message": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "A sentence explaining the reason for the status."
                }, 
                "reason": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "One snake_case word."
                }, 
                "api_version": {
                    "readOnly": true, 
                    "type": "string"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "volume_group_template": {
            "title": "Template volume_group", 
            "type": "object", 
            "properties": {
                "spec": {
                    "type": "object", 
                    "properties": {
                        "profile_reference_list": {
                            "items": {
                                "$ref": "#/definitions/volume_group_profile_reference"
                            }, 
                            "type": "array"
                        }, 
                        "name": {
                            "type": "string", 
                            "maxLength": 140
                        }, 
                        "volume_group}_spec": {
                            "$ref": "#/definitions/volume_group"
                        }
                    }
                }, 
                "metadata": {
                    "type": "object", 
                    "properties": {
                        "kind": {
                            "default": "volume_group_template", 
                            "readOnly": true, 
                            "enum": [
                                "volume_group_template"
                            ], 
                            "type": "string"
                        }, 
                        "uuid": {
                            "type": "string"
                        }
                    }
                }
            }, 
            "description": "Template for volume_group"
        }, 
        "volume_group_template_reference": {
            "title": "Reference to a volume_group_template", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "volume_group_template", 
                    "readOnly": true, 
                    "enum": [
                        "volume_group_template"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "name": {
                    "type": "string", 
                    "maxLength": 140
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string"
                }
            }, 
            "description": "The reference to a volume_group_template"
        }, 
        "wait": {
            "title": "Time in seconds to wait for.", 
            "type": "object", 
            "properties": {
                "wait_time": {
                    "type": "integer", 
                    "description": "Amount of time in seconds to wait for", 
                    "format": "int64"
                }
            }, 
            "description": "Time in seconds to wait for."
        }, 
        "webhook": {
            "title": "Webhook input definition", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Webhook name", 
                    "maxLength": 140
                }, 
                "resources": {
                    "$ref": "#/definitions/webhook_resources"
                }, 
                "description": {
                    "type": "string", 
                    "description": "A description or user annotation for the Webhook", 
                    "maxLength": 1000
                }
            }, 
            "description": "Webhook input definition"
        }, 
        "webhook_def_status": {
            "title": "Webhook status definition", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Webhook name", 
                    "maxLength": 140
                }, 
                "resources": {
                    "$ref": "#/definitions/webhook_resources"
                }, 
                "description": {
                    "type": "string", 
                    "description": "A description or user annotation for the webhook", 
                    "maxLength": 1000
                }
            }, 
            "description": "Webhook status definition"
        }, 
        "webhook_event_type": {
            "enum": [
                "VM_ON", 
                "VM_OFF", 
                "VM_UPDATE", 
                "VM_MIGRATE", 
                "VNIC_PLUG", 
                "VNIC_UNPLUG"
            ], 
            "type": "string", 
            "description": "Webhook event type", 
            "title": "Webhook event type"
        }, 
        "webhook_intent_input": {
            "title": "webhook Intent Entity", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "metadata": {
                    "$ref": "#/definitions/webhook_metadata"
                }, 
                "spec": {
                    "$ref": "#/definitions/webhook"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "options": {
                    "$ref": "#/definitions/options"
                }
            }, 
            "description": "An intentful representation of a webhook"
        }, 
        "webhook_intent_resource": {
            "title": "webhook Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/webhook_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/webhook"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/webhook_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a webhook"
        }, 
        "webhook_intent_response": {
            "title": "webhook Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/webhook_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/webhook"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/webhook_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a webhook"
        }, 
        "webhook_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/webhook_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/webhook_list_metadata"
                }
            }, 
            "description": "Response object for intentful operation of webhooks"
        }, 
        "webhook_list_metadata": {
            "title": "Metadata for webhook list", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "webhook", 
                    "readOnly": true, 
                    "enum": [
                        "webhook"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found for the kind"
                }, 
                "sort_column": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "webhook_metadata": {
            "title": "webhook metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "type": "string", 
                    "description": "Time when webhook was last updated"
                }, 
                "kind": {
                    "default": "webhook", 
                    "readOnly": true, 
                    "enum": [
                        "webhook"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "webhook uuid"
                }, 
                "creation_time": {
                    "type": "string", 
                    "description": "Time when webhook was created"
                }, 
                "account_reference": {
                    "$ref": "#/definitions/account_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the webhook"
                }, 
                "parent_reference": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "If present, spec was copied from the referenced entity. Could have\nbeen a live entity, backup, snapshot or template entity. This field\nis special as it is the only field in metadata that is modifiable by\nthe user in case of template-based upgrades and in-place reverts.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "entity_version": {
                    "type": "integer", 
                    "description": "Monotonically increasing number"
                }, 
                "name": {
                    "type": "string", 
                    "description": "webhook name", 
                    "maxLength": 140
                }
            }, 
            "description": "The webhook kind metadata"
        }, 
        "webhook_post_data": {
            "title": "Data sent in the webhook", 
            "required": [
                "version", 
                "reference", 
                "event_type", 
                "data"
            ], 
            "type": "object", 
            "properties": {
                "version": {
                    "default": "1.0", 
                    "type": "string", 
                    "description": "The version of the webhook data"
                }, 
                "data": {
                    "readOnly": true, 
                    "type": "object", 
                    "description": "Custom key-value details relevant to the event"
                }, 
                "event_type": {
                    "description": "Event type", 
                    "$ref": "#/definitions/webhook_event_type"
                }, 
                "reference": {
                    "description": "The kind reference", 
                    "$ref": "#/definitions/reference"
                }
            }, 
            "description": "Data sent in the webhook"
        }, 
        "webhook_reference": {
            "title": "Reference to a webhook", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "webhook", 
                    "readOnly": true, 
                    "enum": [
                        "webhook"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "name": {
                    "type": "string", 
                    "maxLength": 140
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string"
                }
            }, 
            "description": "The reference to a webhook"
        }, 
        "webhook_resources": {
            "title": "Webhook resources", 
            "required": [
                "target_kind", 
                "url"
            ], 
            "type": "object", 
            "properties": {
                "url": {
                    "type": "string", 
                    "description": "Url for the webhook"
                }, 
                "events_filter_list": {
                    "items": {
                        "$ref": "#/definitions/webhook_event_type"
                    }, 
                    "type": "array", 
                    "description": "List of events subscribed to by the webhook"
                }, 
                "target_kind": {
                    "type": "string", 
                    "description": "Target kind for the webhook"
                }
            }, 
            "description": "Webhook resources"
        }, 
        "webhook_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "status": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "Only value possible is \"failure\"."
                }, 
                "kind": {
                    "default": "webhook", 
                    "readOnly": true, 
                    "enum": [
                        "webhook"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "details": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "readOnly": true, 
                    "type": "object", 
                    "description": "Custom key-value details relevant to the status."
                }, 
                "message": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "A sentence explaining the reason for the status."
                }, 
                "reason": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "One snake_case word."
                }, 
                "api_version": {
                    "readOnly": true, 
                    "type": "string"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "workflow": {
            "title": "Workflow Input Definition", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Workflow Name", 
                    "maxLength": 140
                }, 
                "resources": {
                    "type": "object", 
                    "description": "Workflow resources", 
                    "properties": {
                        "workflow_type": {
                            "enum": [
                                "RECOVERY_PLAN"
                            ], 
                            "type": "string", 
                            "description": "Type of workflow"
                        }, 
                        "workflow_stages": {
                            "items": {
                                "$ref": "#/definitions/workflow_stage"
                            }, 
                            "type": "array", 
                            "description": "Input for stages of workflow."
                        }, 
                        "global_params": {
                            "items": {
                                "$ref": "#/definitions/workflow_parameters"
                            }, 
                            "type": "array", 
                            "description": "Generic parameters for workflow"
                        }
                    }
                }, 
                "description": {
                    "type": "string", 
                    "description": "A description or user annotation for the Workflow", 
                    "maxLength": 1000
                }
            }, 
            "description": "Workflow Input Definition"
        }, 
        "workflow_def_status": {
            "title": "Workflow Status Definition", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Workflow Name", 
                    "maxLength": 140
                }, 
                "resources": {
                    "type": "object", 
                    "description": "Workflow resources", 
                    "properties": {
                        "jobs": {
                            "items": {
                                "$ref": "#/definitions/job_info"
                            }, 
                            "type": "array", 
                            "description": "Jobs associated with the workflow."
                        }, 
                        "workflow_state": {
                            "$ref": "#/definitions/workflow"
                        }
                    }
                }, 
                "description": {
                    "type": "string", 
                    "description": "A description or user annotation for the Workflow", 
                    "maxLength": 1000
                }
            }, 
            "description": "Current status of workflow"
        }, 
        "workflow_intent_input": {
            "title": "workflow Intent Entity", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "metadata": {
                    "$ref": "#/definitions/workflow_metadata"
                }, 
                "spec": {
                    "$ref": "#/definitions/workflow"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "options": {
                    "$ref": "#/definitions/options"
                }
            }, 
            "description": "An intentful representation of a workflow"
        }, 
        "workflow_intent_resource": {
            "title": "workflow Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/workflow_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/workflow"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/workflow_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a workflow"
        }, 
        "workflow_intent_response": {
            "title": "workflow Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/workflow_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/workflow"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/workflow_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a workflow"
        }, 
        "workflow_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/workflow_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/workflow_list_metadata"
                }
            }, 
            "description": "Response object for intentful operation of workflows"
        }, 
        "workflow_list_metadata": {
            "title": "Metadata for workflow list", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "workflow", 
                    "readOnly": true, 
                    "enum": [
                        "workflow"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found for the kind"
                }, 
                "sort_column": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "workflow_metadata": {
            "title": "workflow metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "type": "string", 
                    "description": "Time when workflow was last updated"
                }, 
                "kind": {
                    "default": "workflow", 
                    "readOnly": true, 
                    "enum": [
                        "workflow"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "workflow uuid"
                }, 
                "creation_time": {
                    "type": "string", 
                    "description": "Time when workflow was created"
                }, 
                "account_reference": {
                    "$ref": "#/definitions/account_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the workflow"
                }, 
                "parent_reference": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string", 
                    "description": "If present, spec was copied from the referenced entity. Could have\nbeen a live entity, backup, snapshot or template entity. This field\nis special as it is the only field in metadata that is modifiable by\nthe user in case of template-based upgrades and in-place reverts.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "entity_version": {
                    "type": "integer", 
                    "description": "Monotonically increasing number"
                }, 
                "name": {
                    "type": "string", 
                    "description": "workflow name", 
                    "maxLength": 140
                }
            }, 
            "description": "The workflow kind metadata"
        }, 
        "workflow_parameters": {
            "title": "Parameter for workflow", 
            "required": [
                "param_key"
            ], 
            "type": "object", 
            "properties": {
                "param_key": {
                    "enum": [
                        "RECOVERY_PLAN_ARG"
                    ], 
                    "type": "string", 
                    "description": "Type of parameter"
                }, 
                "param_value": {
                    "type": "object", 
                    "description": "Object representing the value of param"
                }
            }, 
            "description": "Input parameter for workflow"
        }, 
        "workflow_reference": {
            "title": "Reference to a workflow", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "workflow", 
                    "readOnly": true, 
                    "enum": [
                        "workflow"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "name": {
                    "type": "string", 
                    "maxLength": 140
                }, 
                "uuid": {
                    "pattern": "\\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\Z", 
                    "type": "string"
                }
            }, 
            "description": "The reference to a workflow"
        }, 
        "workflow_stage": {
            "title": "Single stage information for workflow", 
            "required": [
                "stage_key"
            ], 
            "type": "object", 
            "properties": {
                "stage_arg": {
                    "type": "object", 
                    "description": "Object representing the parameters for the stage."
                }, 
                "description": {
                    "type": "string", 
                    "description": "Description about purpose of stage"
                }, 
                "stage_key": {
                    "enum": [
                        "RECOVER_ENTITIES", 
                        "EXECUTE_WORKFLOWS", 
                        "WAIT"
                    ], 
                    "type": "string", 
                    "description": "The key for identifying the stage type."
                }
            }, 
            "description": "Information about a stage of a workflow"
        }, 
        "workflow_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "status": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "Only value possible is \"failure\"."
                }, 
                "kind": {
                    "default": "workflow", 
                    "readOnly": true, 
                    "enum": [
                        "workflow"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "details": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "readOnly": true, 
                    "type": "object", 
                    "description": "Custom key-value details relevant to the status."
                }, 
                "message": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "A sentence explaining the reason for the status."
                }, 
                "reason": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "One snake_case word."
                }, 
                "api_version": {
                    "readOnly": true, 
                    "type": "string"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }
    }, 
    "security": [
        {
            "basicAuth": []
        }
    ], 
    "swagger": "2.0"
}
