package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// MulticlusterConfigStatus Status for multicluster config request
//
// Status for multicluster config request
// swagger:model multicluster_config_status
type MulticlusterConfigStatus struct {

	// execution plan
	// Required: true
	ExecutionPlan ExecutionPlan `json:"execution_plan"`

	// status list
	// Required: true
	StatusList []*EntityTaskStatus `json:"status_list"`
}

// Validate validates this multicluster config status
func (m *MulticlusterConfigStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExecutionPlan(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatusList(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MulticlusterConfigStatus) validateExecutionPlan(formats strfmt.Registry) error {

	if err := m.ExecutionPlan.Validate(formats); err != nil {
		return err
	}

	return nil
}

func (m *MulticlusterConfigStatus) validateStatusList(formats strfmt.Registry) error {

	if err := validate.Required("status_list", "body", m.StatusList); err != nil {
		return err
	}

	for i := 0; i < len(m.StatusList); i++ {

		if swag.IsZero(m.StatusList[i]) { // not required
			continue
		}

		if m.StatusList[i] != nil {

			if err := m.StatusList[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}
