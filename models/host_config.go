package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// HostConfig Configurable properties of Host
//
// Host basic configuration
// swagger:model host_config
type HostConfig struct {

	// Controller VM IP
	// Required: true
	ControllerVMIP *string `json:"controller_vm_ip"`

	// Hypervisor IP
	// Required: true
	HypervisorIP *string `json:"hypervisor_ip"`

	// IPMI IP address
	// Required: true
	IPMIAddress *string `json:"ipmi_address"`

	// subnet mask
	// Read Only: true
	Mask string `json:"mask,omitempty"`

	// subnet
	// Read Only: true
	Subnet string `json:"subnet,omitempty"`
}

// Validate validates this host config
func (m *HostConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateControllerVMIP(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateHypervisorIP(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateIPMIAddress(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HostConfig) validateControllerVMIP(formats strfmt.Registry) error {

	if err := validate.Required("controller_vm_ip", "body", m.ControllerVMIP); err != nil {
		return err
	}

	return nil
}

func (m *HostConfig) validateHypervisorIP(formats strfmt.Registry) error {

	if err := validate.Required("hypervisor_ip", "body", m.HypervisorIP); err != nil {
		return err
	}

	return nil
}

func (m *HostConfig) validateIPMIAddress(formats strfmt.Registry) error {

	if err := validate.Required("ipmi_address", "body", m.IPMIAddress); err != nil {
		return err
	}

	return nil
}
