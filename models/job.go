package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// Job Job Definition
//
// Job Definition
// swagger:model job
type Job struct {

	// Job Name
	// Max Length: 140
	Name string `json:"name,omitempty"`

	// resources
	// Required: true
	Resources *JobResources `json:"resources"`
}

// Validate validates this job
func (m *Job) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateResources(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Job) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("name", "body", string(m.Name), 140); err != nil {
		return err
	}

	return nil
}

func (m *Job) validateResources(formats strfmt.Registry) error {

	if err := validate.Required("resources", "body", m.Resources); err != nil {
		return err
	}

	if m.Resources != nil {

		if err := m.Resources.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

// JobResources Job resources
// swagger:model JobResources
type JobResources struct {

	// Action to be taken on job
	JobAction string `json:"job_action,omitempty"`

	// Type of operation performed by this job
	OperationType string `json:"operation_type,omitempty"`

	// State of workflow when job is executed
	WorkflowState *Workflow `json:"workflow_state,omitempty"`

	// Uuid of the workflow this job belongs to
	WorkflowUUID string `json:"workflow_uuid,omitempty"`
}

// Validate validates this job resources
func (m *JobResources) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateJobAction(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOperationType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateWorkflowState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var jobResourcesTypeJobActionPropEnum []interface{}

const (
	jobResourcesJobActionPAUSE   string = "PAUSE"
	jobResourcesJobActionRESUME  string = "RESUME"
	jobResourcesJobActionCLEANUP string = "CLEANUP"
	jobResourcesJobActionABORT   string = "ABORT"
)

// prop value enum
func (m *JobResources) validateJobActionEnum(path, location string, value string) error {
	if jobResourcesTypeJobActionPropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["PAUSE","RESUME","CLEANUP","ABORT"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			jobResourcesTypeJobActionPropEnum = append(jobResourcesTypeJobActionPropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, jobResourcesTypeJobActionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *JobResources) validateJobAction(formats strfmt.Registry) error {

	if swag.IsZero(m.JobAction) { // not required
		return nil
	}

	// value enum
	if err := m.validateJobActionEnum("resources"+"."+"job_action", "body", m.JobAction); err != nil {
		return err
	}

	return nil
}

var jobResourcesTypeOperationTypePropEnum []interface{}

const (
	jobResourcesOperationTypeVALIDATE          string = "VALIDATE"
	jobResourcesOperationTypeTEST              string = "TEST"
	jobResourcesOperationTypePLANNEDFAILOVER   string = "PLANNED_FAILOVER"
	jobResourcesOperationTypeUNPLANNEDFAILOVER string = "UNPLANNED_FAILOVER"
	jobResourcesOperationTypePREPAREFAILBACK   string = "PREPARE_FAILBACK"
)

// prop value enum
func (m *JobResources) validateOperationTypeEnum(path, location string, value string) error {
	if jobResourcesTypeOperationTypePropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["VALIDATE","TEST","PLANNED_FAILOVER","UNPLANNED_FAILOVER","PREPARE_FAILBACK"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			jobResourcesTypeOperationTypePropEnum = append(jobResourcesTypeOperationTypePropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, jobResourcesTypeOperationTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *JobResources) validateOperationType(formats strfmt.Registry) error {

	if swag.IsZero(m.OperationType) { // not required
		return nil
	}

	// value enum
	if err := m.validateOperationTypeEnum("resources"+"."+"operation_type", "body", m.OperationType); err != nil {
		return err
	}

	return nil
}

func (m *JobResources) validateWorkflowState(formats strfmt.Registry) error {

	if swag.IsZero(m.WorkflowState) { // not required
		return nil
	}

	if m.WorkflowState != nil {

		if err := m.WorkflowState.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}
