package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// OauthRegisterTokenRequest Oauth register token request
//
// Request to register the token of the remote host and require the access
// token from the local server
//
// swagger:model oauth_register_token_request
type OauthRegisterTokenRequest struct {

	// Expiration time in seconds for the generated token. Default is
	// never expires
	//
	ExpiresIn int64 `json:"expires_in,omitempty"`

	// register host
	// Required: true
	RegisterHost *RemoteHost `json:"register_host"`

	// register host token
	// Required: true
	RegisterHostToken *OauthGenerateTokenResponse `json:"register_host_token"`

	// Scopes for the generated token
	Scopes []string `json:"scopes,omitempty"`
}

// Validate validates this oauth register token request
func (m *OauthRegisterTokenRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRegisterHost(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRegisterHostToken(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateScopes(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OauthRegisterTokenRequest) validateRegisterHost(formats strfmt.Registry) error {

	if err := validate.Required("register_host", "body", m.RegisterHost); err != nil {
		return err
	}

	if m.RegisterHost != nil {

		if err := m.RegisterHost.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *OauthRegisterTokenRequest) validateRegisterHostToken(formats strfmt.Registry) error {

	if err := validate.Required("register_host_token", "body", m.RegisterHostToken); err != nil {
		return err
	}

	if m.RegisterHostToken != nil {

		if err := m.RegisterHostToken.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *OauthRegisterTokenRequest) validateScopes(formats strfmt.Registry) error {

	if swag.IsZero(m.Scopes) { // not required
		return nil
	}

	return nil
}
