package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// GroupsAggregationFunction Entities Request Aggregation Function
//
// Downsampling function to take time series data and resolve to one value for aggregation purposes
// swagger:model groups_aggregation_function
type GroupsAggregationFunction string

const (
	GroupsAggregationFunctionSUM     GroupsAggregationFunction = "SUM"
	GroupsAggregationFunctionAVG     GroupsAggregationFunction = "AVG"
	GroupsAggregationFunctionMIN     GroupsAggregationFunction = "MIN"
	GroupsAggregationFunctionMAX     GroupsAggregationFunction = "MAX"
	GroupsAggregationFunctionLAST    GroupsAggregationFunction = "LAST"
	GroupsAggregationFunctionCOUNT   GroupsAggregationFunction = "COUNT"
	GroupsAggregationFunctionBUCKETS GroupsAggregationFunction = "BUCKETS"
)

// for schema
var groupsAggregationFunctionEnum []interface{}

func (m GroupsAggregationFunction) validateGroupsAggregationFunctionEnum(path, location string, value GroupsAggregationFunction) error {
	if groupsAggregationFunctionEnum == nil {
		var res []GroupsAggregationFunction
		if err := json.Unmarshal([]byte(`["SUM","AVG","MIN","MAX","LAST","COUNT","BUCKETS"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			groupsAggregationFunctionEnum = append(groupsAggregationFunctionEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, groupsAggregationFunctionEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this groups aggregation function
func (m GroupsAggregationFunction) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateGroupsAggregationFunctionEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
