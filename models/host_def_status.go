package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// HostDefStatus Host Status
//
// Host Status definition
// swagger:model host_def_status
type HostDefStatus struct {

	// Host Name
	// Required: true
	// Max Length: 140
	Name *string `json:"name"`

	// resources
	// Required: true
	Resources *HostDefStatusResources `json:"resources"`
}

// Validate validates this host def status
func (m *HostDefStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateResources(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HostDefStatus) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 140); err != nil {
		return err
	}

	return nil
}

func (m *HostDefStatus) validateResources(formats strfmt.Registry) error {

	if err := validate.Required("resources", "body", m.Resources); err != nil {
		return err
	}

	if m.Resources != nil {

		if err := m.Resources.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

// HostDefStatusResources Host Resources
//
// Host resources
// swagger:model HostDefStatusResources
type HostDefStatusResources struct {

	// host config
	// Required: true
	HostConfig *HostConfig `json:"host_config"`

	// host info
	// Required: true
	HostInfo *HostInfo `json:"host_info"`

	// Host Nics
	HostNicsList []*HostNic `json:"host_nics_list,omitempty"`

	// oplog usage
	OplogUsage *OplogUsage `json:"oplog_usage,omitempty"`
}

// Validate validates this host def status resources
func (m *HostDefStatusResources) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHostConfig(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateHostInfo(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateHostNicsList(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOplogUsage(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HostDefStatusResources) validateHostConfig(formats strfmt.Registry) error {

	if err := validate.Required("resources"+"."+"host_config", "body", m.HostConfig); err != nil {
		return err
	}

	if m.HostConfig != nil {

		if err := m.HostConfig.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *HostDefStatusResources) validateHostInfo(formats strfmt.Registry) error {

	if err := validate.Required("resources"+"."+"host_info", "body", m.HostInfo); err != nil {
		return err
	}

	if m.HostInfo != nil {

		if err := m.HostInfo.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *HostDefStatusResources) validateHostNicsList(formats strfmt.Registry) error {

	if swag.IsZero(m.HostNicsList) { // not required
		return nil
	}

	for i := 0; i < len(m.HostNicsList); i++ {

		if swag.IsZero(m.HostNicsList[i]) { // not required
			continue
		}

		if m.HostNicsList[i] != nil {

			if err := m.HostNicsList[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *HostDefStatusResources) validateOplogUsage(formats strfmt.Registry) error {

	if swag.IsZero(m.OplogUsage) { // not required
		return nil
	}

	if m.OplogUsage != nil {

		if err := m.OplogUsage.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}
