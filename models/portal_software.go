package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
)

// PortalSoftware Software information
//
// Software information from Nutanix Portal
// swagger:model portal_software
type PortalSoftware struct {

	// List of Prism Element compatible versions
	CompatiblePeVersions []string `json:"compatible_pe_versions,omitempty"`

	// List of software versions that this version can be upgraded from
	//
	CompatibleVersionList []string `json:"compatible_version_list,omitempty"`

	// MD5 checksum of the software file
	Md5sum string `json:"md5sum,omitempty"`

	// Release date of this software. Number of seconds since epoch
	//
	ReleaseDate int64 `json:"release_date,omitempty"`

	// URL to point to the support portal release note of this software.
	// Currently only set and used for NOS releases
	//
	ReleaseNoteURL string `json:"release_note_url,omitempty"`

	// Total size of the software file in mebibytes
	SizeInMib int64 `json:"size_in_mib,omitempty"`

	// type
	Type *SoftwareType `json:"type,omitempty"`

	// Software version string
	Version string `json:"version,omitempty"`
}

// Validate validates this portal software
func (m *PortalSoftware) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompatiblePeVersions(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCompatibleVersionList(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PortalSoftware) validateCompatiblePeVersions(formats strfmt.Registry) error {

	if swag.IsZero(m.CompatiblePeVersions) { // not required
		return nil
	}

	return nil
}

func (m *PortalSoftware) validateCompatibleVersionList(formats strfmt.Registry) error {

	if swag.IsZero(m.CompatibleVersionList) { // not required
		return nil
	}

	return nil
}

func (m *PortalSoftware) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if m.Type != nil {

		if err := m.Type.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}
