package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// UserResourcesSpec User resource spec
//
// User resource spec
// swagger:model user_resources_spec
type UserResourcesSpec struct {

	// User's UserPrincipalName from the directory service
	// Read Only: true
	// Max Length: 140
	Name string `json:"name,omitempty"`

	// resources
	// Required: true
	Resources *UserResourcesSpecResources `json:"resources"`
}

// Validate validates this user resources spec
func (m *UserResourcesSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateResources(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserResourcesSpec) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("name", "body", string(m.Name), 140); err != nil {
		return err
	}

	return nil
}

func (m *UserResourcesSpec) validateResources(formats strfmt.Registry) error {

	if err := validate.Required("resources", "body", m.Resources); err != nil {
		return err
	}

	if m.Resources != nil {

		if err := m.Resources.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

// UserResourcesSpecResources user resource
// swagger:model UserResourcesSpecResources
type UserResourcesSpecResources struct {

	// Public keys assigned to the user
	PublicKeyList []*PublicKey `json:"public_key_list,omitempty"`
}

// Validate validates this user resources spec resources
func (m *UserResourcesSpecResources) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePublicKeyList(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserResourcesSpecResources) validatePublicKeyList(formats strfmt.Registry) error {

	if swag.IsZero(m.PublicKeyList) { // not required
		return nil
	}

	for i := 0; i < len(m.PublicKeyList); i++ {

		if swag.IsZero(m.PublicKeyList[i]) { // not required
			continue
		}

		if m.PublicKeyList[i] != nil {

			if err := m.PublicKeyList[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}
