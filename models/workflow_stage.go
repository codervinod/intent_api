package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// WorkflowStage Single stage information for workflow
//
// Information about a stage of a workflow
// swagger:model workflow_stage
type WorkflowStage struct {

	// Description about purpose of stage
	Description string `json:"description,omitempty"`

	// Object representing the parameters for the stage.
	StageArg interface{} `json:"stage_arg,omitempty"`

	// The key for identifying the stage type.
	// Required: true
	StageKey *string `json:"stage_key"`
}

// Validate validates this workflow stage
func (m *WorkflowStage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStageKey(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var workflowStageTypeStageKeyPropEnum []interface{}

const (
	workflowStageStageKeyRECOVERENTITIES  string = "RECOVER_ENTITIES"
	workflowStageStageKeyEXECUTEWORKFLOWS string = "EXECUTE_WORKFLOWS"
	workflowStageStageKeyWAIT             string = "WAIT"
)

// prop value enum
func (m *WorkflowStage) validateStageKeyEnum(path, location string, value string) error {
	if workflowStageTypeStageKeyPropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["RECOVER_ENTITIES","EXECUTE_WORKFLOWS","WAIT"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			workflowStageTypeStageKeyPropEnum = append(workflowStageTypeStageKeyPropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, workflowStageTypeStageKeyPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *WorkflowStage) validateStageKey(formats strfmt.Registry) error {

	if err := validate.Required("stage_key", "body", m.StageKey); err != nil {
		return err
	}

	// value enum
	if err := m.validateStageKeyEnum("stage_key", "body", *m.StageKey); err != nil {
		return err
	}

	return nil
}
