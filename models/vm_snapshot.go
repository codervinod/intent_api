package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// VMSnapshot vm snapshot input definitions
//
// The input object that defines a vm snapshot
// swagger:model vm_snapshot
type VMSnapshot struct {

	// Reference to the cluster where this snapshot exists or needs to be
	// replicated to. This is to support the replication and retrieve of the
	// snapshot to a cluster.
	//
	ClusterReference *ClusterReference `json:"cluster_reference,omitempty"`

	// This field is same for all the entities (irrespective of kind) that
	// were snapshotted together.
	//
	// Pattern: \A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\Z
	ConsistencyGroupIdentifier string `json:"consistency_group_identifier,omitempty"`

	// entity backup reference
	EntityBackupReference *VMBackupReference `json:"entity_backup_reference,omitempty"`

	// The time when this snapshot expires and will be garbage collected.
	// If not set, then the snapshot never expires.
	//
	ExpirationTimeMsecs int64 `json:"expiration_time_msecs,omitempty"`

	// If a snapshot is replicated to a different clusters, then all the
	// instances of same snapshot will share this identifier.
	//
	// Pattern: \A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\Z
	LocationAgnosticIdentifier string `json:"location_agnostic_identifier,omitempty"`

	// Name of the snapshot
	// Max Length: 140
	Name string `json:"name,omitempty"`

	// resources
	Resources *VMSnapshotResources `json:"resources,omitempty"`

	// Crash consistent or Application Consistent snapshot
	SnapshotType string `json:"snapshot_type,omitempty"`
}

// Validate validates this vm snapshot
func (m *VMSnapshot) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterReference(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateConsistencyGroupIdentifier(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEntityBackupReference(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLocationAgnosticIdentifier(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateResources(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSnapshotType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMSnapshot) validateClusterReference(formats strfmt.Registry) error {

	if swag.IsZero(m.ClusterReference) { // not required
		return nil
	}

	if m.ClusterReference != nil {

		if err := m.ClusterReference.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *VMSnapshot) validateConsistencyGroupIdentifier(formats strfmt.Registry) error {

	if swag.IsZero(m.ConsistencyGroupIdentifier) { // not required
		return nil
	}

	if err := validate.Pattern("consistency_group_identifier", "body", string(m.ConsistencyGroupIdentifier), `\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\Z`); err != nil {
		return err
	}

	return nil
}

func (m *VMSnapshot) validateEntityBackupReference(formats strfmt.Registry) error {

	if swag.IsZero(m.EntityBackupReference) { // not required
		return nil
	}

	if m.EntityBackupReference != nil {

		if err := m.EntityBackupReference.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *VMSnapshot) validateLocationAgnosticIdentifier(formats strfmt.Registry) error {

	if swag.IsZero(m.LocationAgnosticIdentifier) { // not required
		return nil
	}

	if err := validate.Pattern("location_agnostic_identifier", "body", string(m.LocationAgnosticIdentifier), `\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\Z`); err != nil {
		return err
	}

	return nil
}

func (m *VMSnapshot) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("name", "body", string(m.Name), 140); err != nil {
		return err
	}

	return nil
}

func (m *VMSnapshot) validateResources(formats strfmt.Registry) error {

	if swag.IsZero(m.Resources) { // not required
		return nil
	}

	if m.Resources != nil {

		if err := m.Resources.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

var vmSnapshotTypeSnapshotTypePropEnum []interface{}

const (
	vmSnapshotSnapshotTypeCRASHCONSISTENT       string = "CRASH_CONSISTENT"
	vmSnapshotSnapshotTypeAPPLICATIONCONSISTENT string = "APPLICATION_CONSISTENT"
)

// prop value enum
func (m *VMSnapshot) validateSnapshotTypeEnum(path, location string, value string) error {
	if vmSnapshotTypeSnapshotTypePropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["CRASH_CONSISTENT","APPLICATION_CONSISTENT"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			vmSnapshotTypeSnapshotTypePropEnum = append(vmSnapshotTypeSnapshotTypePropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, vmSnapshotTypeSnapshotTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *VMSnapshot) validateSnapshotType(formats strfmt.Registry) error {

	if swag.IsZero(m.SnapshotType) { // not required
		return nil
	}

	// value enum
	if err := m.validateSnapshotTypeEnum("snapshot_type", "body", m.SnapshotType); err != nil {
		return err
	}

	return nil
}

// VMSnapshotResources Snapshot Resources
// swagger:model VMSnapshotResources
type VMSnapshotResources struct {

	// UUID of the base entity for which snapshot need to be taken
	//
	// Pattern: \A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\Z
	EntityUUID string `json:"entity_uuid,omitempty"`
}

// Validate validates this VM snapshot resources
func (m *VMSnapshotResources) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEntityUUID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMSnapshotResources) validateEntityUUID(formats strfmt.Registry) error {

	if swag.IsZero(m.EntityUUID) { // not required
		return nil
	}

	if err := validate.Pattern("resources"+"."+"entity_uuid", "body", string(m.EntityUUID), `\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\Z`); err != nil {
		return err
	}

	return nil
}
