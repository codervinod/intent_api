package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// HostInfo Read only information of host
//
// Host readonly information
// swagger:model host_info
type HostInfo struct {

	// host hardware info
	HostHardwareInfo *HostHardwareInfo `json:"host_hardware_info,omitempty"`

	// host serial info
	HostSerialInfo *HostSerialInfo `json:"host_serial_info,omitempty"`

	// Full name of hypervisor running on Host
	HypervisorFullName string `json:"hypervisor_full_name,omitempty"`

	// Host monitoring status
	MonitorStatus []string `json:"monitor_status,omitempty"`

	// Num of VMs running on this Host
	NumVms int64 `json:"num_vms,omitempty"`
}

// Validate validates this host info
func (m *HostInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHostHardwareInfo(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateHostSerialInfo(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMonitorStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HostInfo) validateHostHardwareInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.HostHardwareInfo) { // not required
		return nil
	}

	if m.HostHardwareInfo != nil {

		if err := m.HostHardwareInfo.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *HostInfo) validateHostSerialInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.HostSerialInfo) { // not required
		return nil
	}

	if m.HostSerialInfo != nil {

		if err := m.HostSerialInfo.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

var hostInfoMonitorStatusItemsEnum []interface{}

func (m *HostInfo) validateMonitorStatusItemsEnum(path, location string, value string) error {
	if hostInfoMonitorStatusItemsEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["MONITORED","NOT_MONITORED"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			hostInfoMonitorStatusItemsEnum = append(hostInfoMonitorStatusItemsEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, hostInfoMonitorStatusItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *HostInfo) validateMonitorStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.MonitorStatus) { // not required
		return nil
	}

	for i := 0; i < len(m.MonitorStatus); i++ {

		// value enum
		if err := m.validateMonitorStatusItemsEnum("monitor_status"+"."+strconv.Itoa(i), "body", m.MonitorStatus[i]); err != nil {
			return err
		}

	}

	return nil
}
