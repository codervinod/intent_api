package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// HypervisorServer Hypervisor Server
//
// Hypervisor server information
// swagger:model hypervisor_server
type HypervisorServer struct {

	// name
	// Required: true
	Name *string `json:"name"`

	// type
	Type string `json:"type,omitempty"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this hypervisor server
func (m *HypervisorServer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HypervisorServer) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var hypervisorServerTypeTypePropEnum []interface{}

const (
	hypervisorServerTypeVMWARE            string = "VMWARE"
	hypervisorServerTypeXEN               string = "XEN"
	hypervisorServerTypeHYPERV            string = "HYPERV"
	hypervisorServerTypeKVM               string = "KVM"
	hypervisorServerTypeAMAZONWEBSERVICES string = "AMAZON_WEB_SERVICES"
	hypervisorServerTypeVCENTER           string = "VCENTER"
	hypervisorServerTypeACROPOLIS         string = "ACROPOLIS"
	hypervisorServerTypeSCVMM             string = "SCVMM"
	hypervisorServerTypeNULL              string = "NULL"
)

// prop value enum
func (m *HypervisorServer) validateTypeEnum(path, location string, value string) error {
	if hypervisorServerTypeTypePropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["VMWARE","XEN","HYPERV","KVM","AMAZON_WEB_SERVICES","VCENTER","ACROPOLIS","SCVMM","NULL"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			hypervisorServerTypeTypePropEnum = append(hypervisorServerTypeTypePropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, hypervisorServerTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *HypervisorServer) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}
