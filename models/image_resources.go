package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// ImageResources Image object
//
// Image object
// swagger:model image_resources
type ImageResources struct {

	// Checksum of the image. Should only be set when being used to validate an image when setting the source of an image, otherwise this is generated by image service.
	Checksum *Checksum `json:"checksum,omitempty"`

	// description
	// Max Length: 1000
	Description string `json:"description,omitempty"`

	// image state
	// Read Only: true
	ImageState ImageState `json:"image_state,omitempty"`

	// image type
	ImageType ImageType `json:"image_type,omitempty"`

	// Image URI. This field is only used when creating/updating an image or fetching image details. Note that when fetching image details this will be a reference to an ADSF disk
	ImageURI string `json:"image_uri,omitempty"`

	// logical timestamp
	LogicalTimestamp int64 `json:"logical_timestamp,omitempty"`

	// name
	// Required: true
	// Max Length: 140
	Name *string `json:"name"`

	// product name
	ProductName string `json:"product_name,omitempty"`

	// product version
	ProductVersion string `json:"product_version,omitempty"`

	// size bytes
	// Read Only: true
	SizeBytes int64 `json:"size_bytes,omitempty"`
}

// Validate validates this image resources
func (m *ImageResources) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChecksum(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateImageState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateImageType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ImageResources) validateChecksum(formats strfmt.Registry) error {

	if swag.IsZero(m.Checksum) { // not required
		return nil
	}

	if m.Checksum != nil {

		if err := m.Checksum.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *ImageResources) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("description", "body", string(m.Description), 1000); err != nil {
		return err
	}

	return nil
}

func (m *ImageResources) validateImageState(formats strfmt.Registry) error {

	if swag.IsZero(m.ImageState) { // not required
		return nil
	}

	if err := m.ImageState.Validate(formats); err != nil {
		return err
	}

	return nil
}

func (m *ImageResources) validateImageType(formats strfmt.Registry) error {

	if swag.IsZero(m.ImageType) { // not required
		return nil
	}

	if err := m.ImageType.Validate(formats); err != nil {
		return err
	}

	return nil
}

func (m *ImageResources) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 140); err != nil {
		return err
	}

	return nil
}
