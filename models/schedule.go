package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// Schedule Snapshot schedule
//
// Defines the snapshot schedule
// swagger:model schedule
type Schedule struct {

	// Duration of the event. If set, an event of duration duration_usecs
	// will repeat as per the recurrence defined in interval_type
	//
	DurationSecs int64 `json:"duration_secs,omitempty"`

	// End time of the snapshot schedule
	EndTime int64 `json:"end_time,omitempty"`

	// Multiple of interval_type
	// Required: true
	IntervalMultiple *int32 `json:"interval_multiple"`

	// Type of schedule interval
	// Required: true
	IntervalType *string `json:"interval_type"`

	// Whether the snapshot schedule is suspended
	IsSuspended bool `json:"is_suspended,omitempty"`
}

// Validate validates this schedule
func (m *Schedule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIntervalMultiple(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateIntervalType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Schedule) validateIntervalMultiple(formats strfmt.Registry) error {

	if err := validate.Required("interval_multiple", "body", m.IntervalMultiple); err != nil {
		return err
	}

	return nil
}

var scheduleTypeIntervalTypePropEnum []interface{}

const (
	scheduleIntervalTypeMINUTELY string = "MINUTELY"
	scheduleIntervalTypeHOURLY   string = "HOURLY"
	scheduleIntervalTypeDAILY    string = "DAILY"
	scheduleIntervalTypeWEEKLY   string = "WEEKLY"
	scheduleIntervalTypeMONTHLY  string = "MONTHLY"
	scheduleIntervalTypeYEARLY   string = "YEARLY"
)

// prop value enum
func (m *Schedule) validateIntervalTypeEnum(path, location string, value string) error {
	if scheduleTypeIntervalTypePropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["MINUTELY","HOURLY","DAILY","WEEKLY","MONTHLY","YEARLY"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			scheduleTypeIntervalTypePropEnum = append(scheduleTypeIntervalTypePropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, scheduleTypeIntervalTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Schedule) validateIntervalType(formats strfmt.Registry) error {

	if err := validate.Required("interval_type", "body", m.IntervalType); err != nil {
		return err
	}

	// value enum
	if err := m.validateIntervalTypeEnum("interval_type", "body", *m.IntervalType); err != nil {
		return err
	}

	return nil
}
