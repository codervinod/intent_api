package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// VirtualNic Virtual NIC
//
// Virtual NIC
// swagger:model virtual_nic
type VirtualNic struct {

	// The MAC address for the adapter
	MacAddress string `json:"mac_address,omitempty"`

	// network reference
	NetworkReference *Reference `json:"network_reference,omitempty"`

	// The type of this NIC. Defaults to NORMAL_NIC
	NicType string `json:"nic_type,omitempty"`

	// A user-defined name for this NIC.
	// Max Length: 140
	PacketProcessingNicName string `json:"packet_processing_nic_name,omitempty"`

	// packet processor chain reference
	PacketProcessorChainReference *PacketProcessorChainReference `json:"packet_processor_chain_reference,omitempty"`
}

// Validate validates this virtual nic
func (m *VirtualNic) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNetworkReference(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNicType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePacketProcessingNicName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePacketProcessorChainReference(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualNic) validateNetworkReference(formats strfmt.Registry) error {

	if swag.IsZero(m.NetworkReference) { // not required
		return nil
	}

	if m.NetworkReference != nil {

		if err := m.NetworkReference.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

var virtualNicTypeNicTypePropEnum []interface{}

const (
	virtualNicNicTypeNORMALNIC           string = "NORMAL_NIC"
	virtualNicNicTypePACKETPROCESSINGNIC string = "PACKET_PROCESSING_NIC"
)

// prop value enum
func (m *VirtualNic) validateNicTypeEnum(path, location string, value string) error {
	if virtualNicTypeNicTypePropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["NORMAL_NIC","PACKET_PROCESSING_NIC"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			virtualNicTypeNicTypePropEnum = append(virtualNicTypeNicTypePropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, virtualNicTypeNicTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *VirtualNic) validateNicType(formats strfmt.Registry) error {

	if swag.IsZero(m.NicType) { // not required
		return nil
	}

	// value enum
	if err := m.validateNicTypeEnum("nic_type", "body", m.NicType); err != nil {
		return err
	}

	return nil
}

func (m *VirtualNic) validatePacketProcessingNicName(formats strfmt.Registry) error {

	if swag.IsZero(m.PacketProcessingNicName) { // not required
		return nil
	}

	if err := validate.MaxLength("packet_processing_nic_name", "body", string(m.PacketProcessingNicName), 140); err != nil {
		return err
	}

	return nil
}

func (m *VirtualNic) validatePacketProcessorChainReference(formats strfmt.Registry) error {

	if swag.IsZero(m.PacketProcessorChainReference) { // not required
		return nil
	}

	if m.PacketProcessorChainReference != nil {

		if err := m.PacketProcessorChainReference.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}
