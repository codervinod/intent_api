package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// RecoveryPlanEntityConfigUpdateInfo Expected config of entity after recovery w.r.t. current config
//
// Expected entity config states after recovery
// swagger:model recovery_plan_entity_config_update_info
type RecoveryPlanEntityConfigUpdateInfo struct {

	// Ratio of current vs expected cpu on recovery site
	CPURatio string `json:"cpu_ratio,omitempty"`

	// Ratio of current vs expected memory on recovery site
	MemoryRatio string `json:"memory_ratio,omitempty"`

	// Power state of the VM
	PowerState string `json:"power_state,omitempty"`
}

// Validate validates this recovery plan entity config update info
func (m *RecoveryPlanEntityConfigUpdateInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePowerState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var recoveryPlanEntityConfigUpdateInfoTypePowerStatePropEnum []interface{}

const (
	recoveryPlanEntityConfigUpdateInfoPowerStatePOWEREDON  string = "POWERED_ON"
	recoveryPlanEntityConfigUpdateInfoPowerStatePOWEREDOFF string = "POWERED_OFF"
	recoveryPlanEntityConfigUpdateInfoPowerStatePAUSED     string = "PAUSED"
	recoveryPlanEntityConfigUpdateInfoPowerStateSUSPENDED  string = "SUSPENDED"
	recoveryPlanEntityConfigUpdateInfoPowerStateRESETTING  string = "RESETTING"
)

// prop value enum
func (m *RecoveryPlanEntityConfigUpdateInfo) validatePowerStateEnum(path, location string, value string) error {
	if recoveryPlanEntityConfigUpdateInfoTypePowerStatePropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["POWERED_ON","POWERED_OFF","PAUSED","SUSPENDED","RESETTING"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			recoveryPlanEntityConfigUpdateInfoTypePowerStatePropEnum = append(recoveryPlanEntityConfigUpdateInfoTypePowerStatePropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, recoveryPlanEntityConfigUpdateInfoTypePowerStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RecoveryPlanEntityConfigUpdateInfo) validatePowerState(formats strfmt.Registry) error {

	if swag.IsZero(m.PowerState) { // not required
		return nil
	}

	// value enum
	if err := m.validatePowerStateEnum("power_state", "body", m.PowerState); err != nil {
		return err
	}

	return nil
}
