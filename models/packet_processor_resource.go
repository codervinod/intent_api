package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// PacketProcessorResource packet processor resource definition
//
// packet processor resource definition
// swagger:model packet_processor_resource
type PacketProcessorResource struct {

	// inline ports
	InlinePorts *PacketProcessorResourceInlinePorts `json:"inline_ports,omitempty"`

	// The type of the packet processor
	// Required: true
	ProcessorType *string `json:"processor_type"`

	// tap ports
	TapPorts *PacketProcessorResourceTapPorts `json:"tap_ports,omitempty"`
}

// Validate validates this packet processor resource
func (m *PacketProcessorResource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInlinePorts(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProcessorType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTapPorts(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PacketProcessorResource) validateInlinePorts(formats strfmt.Registry) error {

	if swag.IsZero(m.InlinePorts) { // not required
		return nil
	}

	if m.InlinePorts != nil {

		if err := m.InlinePorts.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

var packetProcessorResourceTypeProcessorTypePropEnum []interface{}

const (
	packetProcessorResourceProcessorTypeINLINE string = "INLINE"
	packetProcessorResourceProcessorTypeTAP    string = "TAP"
)

// prop value enum
func (m *PacketProcessorResource) validateProcessorTypeEnum(path, location string, value string) error {
	if packetProcessorResourceTypeProcessorTypePropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["INLINE","TAP"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			packetProcessorResourceTypeProcessorTypePropEnum = append(packetProcessorResourceTypeProcessorTypePropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, packetProcessorResourceTypeProcessorTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PacketProcessorResource) validateProcessorType(formats strfmt.Registry) error {

	if err := validate.Required("processor_type", "body", m.ProcessorType); err != nil {
		return err
	}

	// value enum
	if err := m.validateProcessorTypeEnum("processor_type", "body", *m.ProcessorType); err != nil {
		return err
	}

	return nil
}

func (m *PacketProcessorResource) validateTapPorts(formats strfmt.Registry) error {

	if swag.IsZero(m.TapPorts) { // not required
		return nil
	}

	if m.TapPorts != nil {

		if err := m.TapPorts.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

// PacketProcessorResourceInlinePorts Ports used for inline processors
// swagger:model PacketProcessorResourceInlinePorts
type PacketProcessorResourceInlinePorts struct {

	// egressing port
	// Required: true
	EgressingPort *PacketProcessorPort `json:"egressing_port"`

	// ingressing port
	// Required: true
	IngressingPort *PacketProcessorPort `json:"ingressing_port"`
}

// Validate validates this packet processor resource inline ports
func (m *PacketProcessorResourceInlinePorts) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEgressingPort(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateIngressingPort(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PacketProcessorResourceInlinePorts) validateEgressingPort(formats strfmt.Registry) error {

	if err := validate.Required("inline_ports"+"."+"egressing_port", "body", m.EgressingPort); err != nil {
		return err
	}

	if m.EgressingPort != nil {

		if err := m.EgressingPort.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *PacketProcessorResourceInlinePorts) validateIngressingPort(formats strfmt.Registry) error {

	if err := validate.Required("inline_ports"+"."+"ingressing_port", "body", m.IngressingPort); err != nil {
		return err
	}

	if m.IngressingPort != nil {

		if err := m.IngressingPort.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

// PacketProcessorResourceTapPorts Ports used for tap processors
// swagger:model PacketProcessorResourceTapPorts
type PacketProcessorResourceTapPorts struct {

	// port
	// Required: true
	Port *PacketProcessorPort `json:"port"`
}

// Validate validates this packet processor resource tap ports
func (m *PacketProcessorResourceTapPorts) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePort(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PacketProcessorResourceTapPorts) validatePort(formats strfmt.Registry) error {

	if err := validate.Required("tap_ports"+"."+"port", "body", m.Port); err != nil {
		return err
	}

	if m.Port != nil {

		if err := m.Port.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}
