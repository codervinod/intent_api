package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// VMProfile Profile vm
//
// Profile for vm
// swagger:model vm_profile
type VMProfile struct {

	// api version
	APIVersion string `json:"api_version,omitempty"`

	// metadata
	Metadata *VMProfileMetadata `json:"metadata,omitempty"`

	// spec
	Spec *VMProfileSpec `json:"spec,omitempty"`
}

// Validate validates this vm profile
func (m *VMProfile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMetadata(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSpec(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMProfile) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {

		if err := m.Metadata.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *VMProfile) validateSpec(formats strfmt.Registry) error {

	if swag.IsZero(m.Spec) { // not required
		return nil
	}

	if m.Spec != nil {

		if err := m.Spec.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

// VMProfileMetadata VM profile metadata
// swagger:model VMProfileMetadata
type VMProfileMetadata struct {

	// kind
	// Read Only: true
	Kind string `json:"kind,omitempty"`

	// uuid
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this VM profile metadata
func (m *VMProfileMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKind(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var vmProfileMetadataTypeKindPropEnum []interface{}

const (
	vmProfileMetadataKindVMProfile string = "vm_profile"
)

// prop value enum
func (m *VMProfileMetadata) validateKindEnum(path, location string, value string) error {
	if vmProfileMetadataTypeKindPropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["vm_profile"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			vmProfileMetadataTypeKindPropEnum = append(vmProfileMetadataTypeKindPropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, vmProfileMetadataTypeKindPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *VMProfileMetadata) validateKind(formats strfmt.Registry) error {

	if swag.IsZero(m.Kind) { // not required
		return nil
	}

	// value enum
	if err := m.validateKindEnum("metadata"+"."+"kind", "body", m.Kind); err != nil {
		return err
	}

	return nil
}

// VMProfileSpec VM profile spec
// swagger:model VMProfileSpec
type VMProfileSpec struct {

	// name
	// Max Length: 140
	Name string `json:"name,omitempty"`

	// policies
	Policies []interface{} `json:"policies,omitempty"`
}

// Validate validates this VM profile spec
func (m *VMProfileSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePolicies(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMProfileSpec) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("spec"+"."+"name", "body", string(m.Name), 140); err != nil {
		return err
	}

	return nil
}

func (m *VMProfileSpec) validatePolicies(formats strfmt.Registry) error {

	if swag.IsZero(m.Policies) { // not required
		return nil
	}

	return nil
}
