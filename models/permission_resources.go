package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// PermissionResources Permission entity resources
//
// Permission entity resources
// swagger:model permission_resources
type PermissionResources struct {

	// Permission name
	// Required: true
	TargetAction *string `json:"target_action"`

	// The kind to which this permission is applied
	// Required: true
	TargetKind *string `json:"target_kind"`

	// Permission uuid
	// Pattern: ^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this permission resources
func (m *PermissionResources) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTargetAction(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTargetKind(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUUID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PermissionResources) validateTargetAction(formats strfmt.Registry) error {

	if err := validate.Required("target_action", "body", m.TargetAction); err != nil {
		return err
	}

	return nil
}

func (m *PermissionResources) validateTargetKind(formats strfmt.Registry) error {

	if err := validate.Required("target_kind", "body", m.TargetKind); err != nil {
		return err
	}

	return nil
}

func (m *PermissionResources) validateUUID(formats strfmt.Registry) error {

	if swag.IsZero(m.UUID) { // not required
		return nil
	}

	if err := validate.Pattern("uuid", "body", string(m.UUID), `^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$`); err != nil {
		return err
	}

	return nil
}
