package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// GroupsGetEntitiesRequest Get Entities Request
//
// Get Entities Request
// swagger:model groups_get_entities_request
type GroupsGetEntitiesRequest struct {

	// For grouping, the boundary to snap to when grouping
	BucketBoundary int32 `json:"bucket_boundary,omitempty"`

	// Dwonsampling interval to apply to query if override is desired
	DownsamplingInterval int32 `json:"downsampling_interval,omitempty"`

	// A set of entities that the request will be scoped to
	EntityIds []string `json:"entity_ids,omitempty"`

	// The entity type that will be requested
	// Required: true
	EntityType *string `json:"entity_type"`

	// FIQL criteria that will be used to filter the returned data
	FilterCriteria string `json:"filter_criteria,omitempty"`

	// group attributes
	GroupAttributes []*GroupsRequestedAttribute `json:"group_attributes,omitempty"`

	// The maximum number of groups to return in the result
	GroupCount int64 `json:"group_count,omitempty"`

	// group member attributes
	GroupMemberAttributes []*GroupsRequestedAttribute `json:"group_member_attributes,omitempty"`

	// The maximum number of members to return per group
	GroupMemberCount int64 `json:"group_member_count,omitempty"`

	// The offset into the total member set to return per group
	GroupMemberOffset int64 `json:"group_member_offset,omitempty"`

	// The name of the attribute that will be used to sort group members
	GroupMemberSortAttribute string `json:"group_member_sort_attribute,omitempty"`

	// group member sort downsampling function
	GroupMemberSortDownsamplingFunction GroupsSortDownsamplingFunction `json:"group_member_sort_downsampling_function,omitempty"`

	// group member sort order
	GroupMemberSortOrder GroupsSortOrder `json:"group_member_sort_order,omitempty"`

	// The offset into the total set of groups to return
	GroupOffset int64 `json:"group_offset,omitempty"`

	// The name of the attribute that will be used to sort groups
	GroupSortAttribute string `json:"group_sort_attribute,omitempty"`

	// group sort downsample function
	GroupSortDownsampleFunction GroupsSortDownsamplingFunction `json:"group_sort_downsample_function,omitempty"`

	// group sort order
	GroupSortOrder GroupsSortOrder `json:"group_sort_order,omitempty"`

	// Attribute that will be used to perform a group-by if needed
	GroupingAttribute string `json:"grouping_attribute,omitempty"`

	// grouping attribute type
	GroupingAttributeType GroupsAttributeType `json:"grouping_attribute_type,omitempty"`

	// For a time-series query, the end of the interval since the epoch in ms. Default is latest value only.
	IntervalEndMs int64 `json:"interval_end_ms,omitempty"`

	// For a time-series query, the start of the interval since the epoch in ms. Default is latest value only.
	IntervalStartMs int64 `json:"interval_start_ms,omitempty"`

	// For grouping, how many groups to return
	NumberOfBuckets int32 `json:"number_of_buckets,omitempty"`

	// When retrieving latest values, how far back to look as a multiple of the downsampling interval for the metric
	NumberOfIntervalsForLatestData int32 `json:"number_of_intervals_for_latest_data,omitempty"`

	// A custom name to use for tagging the query when debugging
	QueryName string `json:"query_name,omitempty"`
}

// Validate validates this groups get entities request
func (m *GroupsGetEntitiesRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEntityIds(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEntityType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGroupAttributes(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGroupMemberAttributes(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGroupMemberSortDownsamplingFunction(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGroupMemberSortOrder(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGroupSortDownsampleFunction(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGroupSortOrder(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGroupingAttributeType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GroupsGetEntitiesRequest) validateEntityIds(formats strfmt.Registry) error {

	if swag.IsZero(m.EntityIds) { // not required
		return nil
	}

	return nil
}

func (m *GroupsGetEntitiesRequest) validateEntityType(formats strfmt.Registry) error {

	if err := validate.Required("entity_type", "body", m.EntityType); err != nil {
		return err
	}

	return nil
}

func (m *GroupsGetEntitiesRequest) validateGroupAttributes(formats strfmt.Registry) error {

	if swag.IsZero(m.GroupAttributes) { // not required
		return nil
	}

	for i := 0; i < len(m.GroupAttributes); i++ {

		if swag.IsZero(m.GroupAttributes[i]) { // not required
			continue
		}

		if m.GroupAttributes[i] != nil {

			if err := m.GroupAttributes[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *GroupsGetEntitiesRequest) validateGroupMemberAttributes(formats strfmt.Registry) error {

	if swag.IsZero(m.GroupMemberAttributes) { // not required
		return nil
	}

	for i := 0; i < len(m.GroupMemberAttributes); i++ {

		if swag.IsZero(m.GroupMemberAttributes[i]) { // not required
			continue
		}

		if m.GroupMemberAttributes[i] != nil {

			if err := m.GroupMemberAttributes[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *GroupsGetEntitiesRequest) validateGroupMemberSortDownsamplingFunction(formats strfmt.Registry) error {

	if swag.IsZero(m.GroupMemberSortDownsamplingFunction) { // not required
		return nil
	}

	if err := m.GroupMemberSortDownsamplingFunction.Validate(formats); err != nil {
		return err
	}

	return nil
}

func (m *GroupsGetEntitiesRequest) validateGroupMemberSortOrder(formats strfmt.Registry) error {

	if swag.IsZero(m.GroupMemberSortOrder) { // not required
		return nil
	}

	if err := m.GroupMemberSortOrder.Validate(formats); err != nil {
		return err
	}

	return nil
}

func (m *GroupsGetEntitiesRequest) validateGroupSortDownsampleFunction(formats strfmt.Registry) error {

	if swag.IsZero(m.GroupSortDownsampleFunction) { // not required
		return nil
	}

	if err := m.GroupSortDownsampleFunction.Validate(formats); err != nil {
		return err
	}

	return nil
}

func (m *GroupsGetEntitiesRequest) validateGroupSortOrder(formats strfmt.Registry) error {

	if swag.IsZero(m.GroupSortOrder) { // not required
		return nil
	}

	if err := m.GroupSortOrder.Validate(formats); err != nil {
		return err
	}

	return nil
}

func (m *GroupsGetEntitiesRequest) validateGroupingAttributeType(formats strfmt.Registry) error {

	if swag.IsZero(m.GroupingAttributeType) { // not required
		return nil
	}

	if err := m.GroupingAttributeType.Validate(formats); err != nil {
		return err
	}

	return nil
}
