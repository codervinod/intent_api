package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// ClusterSoftware Cluster software
//
// Cluster software
// swagger:model cluster_software
type ClusterSoftware struct {

	// Current software status
	Status string `json:"status,omitempty"`

	// type
	// Required: true
	Type *SoftwareType `json:"type"`

	// It is used to provide customized software download location.
	// The default location is Nutanix portal service
	//
	URL string `json:"url,omitempty"`

	// version
	// Required: true
	Version *string `json:"version"`
}

// Validate validates this cluster software
func (m *ClusterSoftware) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var clusterSoftwareTypeStatusPropEnum []interface{}

const (
	clusterSoftwareStatusINSTALLED string = "INSTALLED"
	clusterSoftwareStatusUPGRADING string = "UPGRADING"
)

// prop value enum
func (m *ClusterSoftware) validateStatusEnum(path, location string, value string) error {
	if clusterSoftwareTypeStatusPropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["INSTALLED","UPGRADING"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			clusterSoftwareTypeStatusPropEnum = append(clusterSoftwareTypeStatusPropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, clusterSoftwareTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ClusterSoftware) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *ClusterSoftware) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	if m.Type != nil {

		if err := m.Type.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *ClusterSoftware) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}
