package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// APIResponse API response
//
// API Response
// swagger:model api_response
type APIResponse struct {

	// api response
	// Required: true
	APIResponse map[string]interface{} `json:"api_response"`

	// same as api_request path_and_params value
	// Required: true
	PathAndParams *string `json:"path_and_params"`

	// status
	// Required: true
	Status *string `json:"status"`
}

// Validate validates this api response
func (m *APIResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAPIResponse(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePathAndParams(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIResponse) validateAPIResponse(formats strfmt.Registry) error {

	if err := validate.Required("api_response", "body", m.APIResponse); err != nil {
		return err
	}

	return nil
}

func (m *APIResponse) validatePathAndParams(formats strfmt.Registry) error {

	if err := validate.Required("path_and_params", "body", m.PathAndParams); err != nil {
		return err
	}

	return nil
}

func (m *APIResponse) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}
