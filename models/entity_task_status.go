package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// EntityTaskStatus Most recent task status of an entity
//
// Most recent task status of an entity
// swagger:model entity_task_status
type EntityTaskStatus struct {

	// kind
	// Required: true
	Kind *string `json:"kind"`

	// Entity name
	// Required: true
	Name *string `json:"name"`

	// Task completion percentage
	// Required: true
	// Maximum: 100
	// Minimum: 0
	TaskPercentage *int32 `json:"task_percentage"`

	// task status
	// Required: true
	TaskStatus *string `json:"task_status"`

	// Entity UUID
	// Required: true
	UUID *string `json:"uuid"`
}

// Validate validates this entity task status
func (m *EntityTaskStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKind(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTaskPercentage(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTaskStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUUID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EntityTaskStatus) validateKind(formats strfmt.Registry) error {

	if err := validate.Required("kind", "body", m.Kind); err != nil {
		return err
	}

	return nil
}

func (m *EntityTaskStatus) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *EntityTaskStatus) validateTaskPercentage(formats strfmt.Registry) error {

	if err := validate.Required("task_percentage", "body", m.TaskPercentage); err != nil {
		return err
	}

	if err := validate.MinimumInt("task_percentage", "body", int64(*m.TaskPercentage), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("task_percentage", "body", int64(*m.TaskPercentage), 100, false); err != nil {
		return err
	}

	return nil
}

var entityTaskStatusTypeTaskStatusPropEnum []interface{}

const (
	entityTaskStatusTaskStatusPENDING  string = "PENDING"
	entityTaskStatusTaskStatusRUNNING  string = "RUNNING"
	entityTaskStatusTaskStatusCOMPLETE string = "COMPLETE"
)

// prop value enum
func (m *EntityTaskStatus) validateTaskStatusEnum(path, location string, value string) error {
	if entityTaskStatusTypeTaskStatusPropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["PENDING","RUNNING","COMPLETE"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			entityTaskStatusTypeTaskStatusPropEnum = append(entityTaskStatusTypeTaskStatusPropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, entityTaskStatusTypeTaskStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *EntityTaskStatus) validateTaskStatus(formats strfmt.Registry) error {

	if err := validate.Required("task_status", "body", m.TaskStatus); err != nil {
		return err
	}

	// value enum
	if err := m.validateTaskStatusEnum("task_status", "body", *m.TaskStatus); err != nil {
		return err
	}

	return nil
}

func (m *EntityTaskStatus) validateUUID(formats strfmt.Registry) error {

	if err := validate.Required("uuid", "body", m.UUID); err != nil {
		return err
	}

	return nil
}
