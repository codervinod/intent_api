package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// DockerRegistryImageStatus Docker registry image search result
//
// Docker registry image search result
// swagger:model docker_registry_image_status
type DockerRegistryImageStatus struct {

	// Repository description
	// Max Length: 1000
	Description string `json:"description,omitempty"`

	// Whether it is an official Docker Hub image
	// Required: true
	IsOfficial *bool `json:"is_official"`

	// Repository name
	// Required: true
	// Max Length: 140
	Name *string `json:"name"`

	// Owner user name
	// Required: true
	Owner *string `json:"owner"`

	// tags
	// Required: true
	Tags []*DockerRegistryImageTag `json:"tags"`
}

// Validate validates this docker registry image status
func (m *DockerRegistryImageStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateIsOfficial(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOwner(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DockerRegistryImageStatus) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("description", "body", string(m.Description), 1000); err != nil {
		return err
	}

	return nil
}

func (m *DockerRegistryImageStatus) validateIsOfficial(formats strfmt.Registry) error {

	if err := validate.Required("is_official", "body", m.IsOfficial); err != nil {
		return err
	}

	return nil
}

func (m *DockerRegistryImageStatus) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 140); err != nil {
		return err
	}

	return nil
}

func (m *DockerRegistryImageStatus) validateOwner(formats strfmt.Registry) error {

	if err := validate.Required("owner", "body", m.Owner); err != nil {
		return err
	}

	return nil
}

func (m *DockerRegistryImageStatus) validateTags(formats strfmt.Registry) error {

	if err := validate.Required("tags", "body", m.Tags); err != nil {
		return err
	}

	for i := 0; i < len(m.Tags); i++ {

		if swag.IsZero(m.Tags[i]) { // not required
			continue
		}

		if m.Tags[i] != nil {

			if err := m.Tags[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}
