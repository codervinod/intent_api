package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// VolumeGroupProfile Profile volume_group
//
// Profile for volume_group
// swagger:model volume_group_profile
type VolumeGroupProfile struct {

	// api version
	APIVersion string `json:"api_version,omitempty"`

	// metadata
	Metadata *VolumeGroupProfileMetadata `json:"metadata,omitempty"`

	// spec
	Spec *VolumeGroupProfileSpec `json:"spec,omitempty"`
}

// Validate validates this volume group profile
func (m *VolumeGroupProfile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMetadata(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSpec(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VolumeGroupProfile) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {

		if err := m.Metadata.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *VolumeGroupProfile) validateSpec(formats strfmt.Registry) error {

	if swag.IsZero(m.Spec) { // not required
		return nil
	}

	if m.Spec != nil {

		if err := m.Spec.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

// VolumeGroupProfileMetadata volume group profile metadata
// swagger:model VolumeGroupProfileMetadata
type VolumeGroupProfileMetadata struct {

	// kind
	// Read Only: true
	Kind string `json:"kind,omitempty"`

	// uuid
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this volume group profile metadata
func (m *VolumeGroupProfileMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKind(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var volumeGroupProfileMetadataTypeKindPropEnum []interface{}

const (
	volumeGroupProfileMetadataKindVolumeGroupProfile string = "volume_group_profile"
)

// prop value enum
func (m *VolumeGroupProfileMetadata) validateKindEnum(path, location string, value string) error {
	if volumeGroupProfileMetadataTypeKindPropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["volume_group_profile"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			volumeGroupProfileMetadataTypeKindPropEnum = append(volumeGroupProfileMetadataTypeKindPropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, volumeGroupProfileMetadataTypeKindPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *VolumeGroupProfileMetadata) validateKind(formats strfmt.Registry) error {

	if swag.IsZero(m.Kind) { // not required
		return nil
	}

	// value enum
	if err := m.validateKindEnum("metadata"+"."+"kind", "body", m.Kind); err != nil {
		return err
	}

	return nil
}

// VolumeGroupProfileSpec volume group profile spec
// swagger:model VolumeGroupProfileSpec
type VolumeGroupProfileSpec struct {

	// name
	// Max Length: 140
	Name string `json:"name,omitempty"`

	// policies
	Policies []interface{} `json:"policies,omitempty"`
}

// Validate validates this volume group profile spec
func (m *VolumeGroupProfileSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePolicies(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VolumeGroupProfileSpec) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("spec"+"."+"name", "body", string(m.Name), 140); err != nil {
		return err
	}

	return nil
}

func (m *VolumeGroupProfileSpec) validatePolicies(formats strfmt.Registry) error {

	if swag.IsZero(m.Policies) { // not required
		return nil
	}

	return nil
}
