package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// SnapshotPolicy Snapshot policy
//
// Describes how and where to backup the kind
// swagger:model snapshot_policy
type SnapshotPolicy struct {

	// List of snapshot schedules
	// Required: true
	SnapshotSchedules []*SnapshotPolicySnapshotSchedulesItems0 `json:"snapshot_schedules"`
}

// Validate validates this snapshot policy
func (m *SnapshotPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSnapshotSchedules(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnapshotPolicy) validateSnapshotSchedules(formats strfmt.Registry) error {

	if err := validate.Required("snapshot_schedules", "body", m.SnapshotSchedules); err != nil {
		return err
	}

	for i := 0; i < len(m.SnapshotSchedules); i++ {

		if swag.IsZero(m.SnapshotSchedules[i]) { // not required
			continue
		}

		if m.SnapshotSchedules[i] != nil {

			if err := m.SnapshotSchedules[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// SnapshotPolicySnapshotSchedulesItems0 snapshot policy snapshot schedules items0
// swagger:model SnapshotPolicySnapshotSchedulesItems0
type SnapshotPolicySnapshotSchedulesItems0 struct {

	// The following describes the local snapshot retention quantity
	// corresponding to the schedule.
	//
	LocalRetentionQuantity int32 `json:"local_retention_quantity,omitempty"`

	// List of replication targets
	ReplicationTargets []*SnapshotPolicySnapshotSchedulesItems0ReplicationTargetsItems0 `json:"replication_targets,omitempty"`

	// schedule
	Schedule *Schedule `json:"schedule,omitempty"`

	// Crash consistent or Application Consistent snapshot
	SnapshotType string `json:"snapshot_type,omitempty"`
}

// Validate validates this snapshot policy snapshot schedules items0
func (m *SnapshotPolicySnapshotSchedulesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReplicationTargets(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSchedule(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSnapshotType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnapshotPolicySnapshotSchedulesItems0) validateReplicationTargets(formats strfmt.Registry) error {

	if swag.IsZero(m.ReplicationTargets) { // not required
		return nil
	}

	for i := 0; i < len(m.ReplicationTargets); i++ {

		if swag.IsZero(m.ReplicationTargets[i]) { // not required
			continue
		}

		if m.ReplicationTargets[i] != nil {

			if err := m.ReplicationTargets[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *SnapshotPolicySnapshotSchedulesItems0) validateSchedule(formats strfmt.Registry) error {

	if swag.IsZero(m.Schedule) { // not required
		return nil
	}

	if m.Schedule != nil {

		if err := m.Schedule.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

var snapshotPolicySnapshotSchedulesItems0TypeSnapshotTypePropEnum []interface{}

const (
	snapshotPolicySnapshotSchedulesItems0SnapshotTypeCRASHCONSISTENT       string = "CRASH_CONSISTENT"
	snapshotPolicySnapshotSchedulesItems0SnapshotTypeAPPLICATIONCONSISTENT string = "APPLICATION_CONSISTENT"
)

// prop value enum
func (m *SnapshotPolicySnapshotSchedulesItems0) validateSnapshotTypeEnum(path, location string, value string) error {
	if snapshotPolicySnapshotSchedulesItems0TypeSnapshotTypePropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["CRASH_CONSISTENT","APPLICATION_CONSISTENT"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			snapshotPolicySnapshotSchedulesItems0TypeSnapshotTypePropEnum = append(snapshotPolicySnapshotSchedulesItems0TypeSnapshotTypePropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, snapshotPolicySnapshotSchedulesItems0TypeSnapshotTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SnapshotPolicySnapshotSchedulesItems0) validateSnapshotType(formats strfmt.Registry) error {

	if swag.IsZero(m.SnapshotType) { // not required
		return nil
	}

	// value enum
	if err := m.validateSnapshotTypeEnum("snapshot_type", "body", m.SnapshotType); err != nil {
		return err
	}

	return nil
}

// SnapshotPolicySnapshotSchedulesItems0ReplicationTargetsItems0 snapshot policy snapshot schedules items0 replication targets items0
// swagger:model SnapshotPolicySnapshotSchedulesItems0ReplicationTargetsItems0
type SnapshotPolicySnapshotSchedulesItems0ReplicationTargetsItems0 struct {

	// Availability zone uuid
	// Pattern: \A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\Z
	AvailabilityZoneReference string `json:"availability_zone_reference,omitempty"`

	// Uuid of cluster to which we will be replicating
	//
	ClusterReference *ClusterReference `json:"cluster_reference,omitempty"`

	// The following describes the snapshot retention quantity
	// for a given replication target.
	//
	RemoteRetentionQuantity int32 `json:"remote_retention_quantity,omitempty"`
}

// Validate validates this snapshot policy snapshot schedules items0 replication targets items0
func (m *SnapshotPolicySnapshotSchedulesItems0ReplicationTargetsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailabilityZoneReference(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateClusterReference(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnapshotPolicySnapshotSchedulesItems0ReplicationTargetsItems0) validateAvailabilityZoneReference(formats strfmt.Registry) error {

	if swag.IsZero(m.AvailabilityZoneReference) { // not required
		return nil
	}

	if err := validate.Pattern("availability_zone_reference", "body", string(m.AvailabilityZoneReference), `\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\Z`); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotPolicySnapshotSchedulesItems0ReplicationTargetsItems0) validateClusterReference(formats strfmt.Registry) error {

	if swag.IsZero(m.ClusterReference) { // not required
		return nil
	}

	if m.ClusterReference != nil {

		if err := m.ClusterReference.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}
