package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// ClusterType Cluster Type
//
// Array of cluster types, such as a cluster can function as both NDFS
// and cloud data gateway
// - 'NDFS': Regular NDFS serving user IOs
// - 'MULTI_CLUSTER': Multicluster analytics and management
// - 'CLOUD_DATA_GATEWAY': Cloud backup and DR gateway
// - 'AVM': Cloud Analytics VM
// - 'MINERVA': Minerva cluster for file server
// - 'WITNESS_VM' : Witness VM cluster
// - 'EXTENSION_STORE_VM': Extension store VM cluster
// - 'XI_VM': Xi VM cluster
//
// swagger:model cluster_type
type ClusterType []string

var clusterTypeItemsEnum []interface{}

func (m *ClusterType) validateClusterTypeItemsEnum(path, location string, value string) error {
	if clusterTypeItemsEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["NDFS","MULTI_CLUSTER","CLOUD_DATA_GATEWAY","AVM","MINERVA","WITNESS_VM","EXTENSION_STORE_VM","XI_VM"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			clusterTypeItemsEnum = append(clusterTypeItemsEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, clusterTypeItemsEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this cluster type
func (m ClusterType) Validate(formats strfmt.Registry) error {
	var res []error

	for i := 0; i < len(m); i++ {

		if swag.IsZero(m[i]) { // not required
			continue
		}

		// value enum
		if err := m.validateClusterTypeItemsEnum(strconv.Itoa(i), "body", *m[i]); err != nil {
			return err
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
