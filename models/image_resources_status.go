package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

// ImageResourcesStatus Image object status
//
// Image object status
// swagger:model image_resources_status
type ImageResourcesStatus struct {

	// resources
	Resources *ImageResources `json:"resources,omitempty"`

	// The state of the image
	State string `json:"state,omitempty"`

	// The UUID of the task tracking the resource. This is only specified when the image is in a pending state.
	TaskReference *Reference `json:"task_reference,omitempty"`
}

// Validate validates this image resources status
func (m *ImageResourcesStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResources(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTaskReference(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ImageResourcesStatus) validateResources(formats strfmt.Registry) error {

	if swag.IsZero(m.Resources) { // not required
		return nil
	}

	if m.Resources != nil {

		if err := m.Resources.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *ImageResourcesStatus) validateTaskReference(formats strfmt.Registry) error {

	if swag.IsZero(m.TaskReference) { // not required
		return nil
	}

	if m.TaskReference != nil {

		if err := m.TaskReference.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}
