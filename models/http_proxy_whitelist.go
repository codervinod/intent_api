package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// HTTPProxyWhitelist Http Proxy Whiltelist
//
// Http proxy whiltelist
// swagger:model http_proxy_whitelist
type HTTPProxyWhitelist struct {

	// target
	// Required: true
	Target *string `json:"target"`

	// target type
	// Required: true
	TargetType *string `json:"target_type"`
}

// Validate validates this http proxy whitelist
func (m *HTTPProxyWhitelist) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTarget(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTargetType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HTTPProxyWhitelist) validateTarget(formats strfmt.Registry) error {

	if err := validate.Required("target", "body", m.Target); err != nil {
		return err
	}

	return nil
}

var httpProxyWhitelistTypeTargetTypePropEnum []interface{}

const (
	httpProxyWhitelistTargetTypeIPV4ADDRESS      string = "IPV4_ADDRESS"
	httpProxyWhitelistTargetTypeIPV4NETWORKMASK  string = "IPV4_NETWORK_MASK"
	httpProxyWhitelistTargetTypeDOMAINNAMESUFFIX string = "DOMAIN_NAME_SUFFIX"
	httpProxyWhitelistTargetTypeHOSTNAME         string = "HOST_NAME"
)

// prop value enum
func (m *HTTPProxyWhitelist) validateTargetTypeEnum(path, location string, value string) error {
	if httpProxyWhitelistTypeTargetTypePropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["IPV4_ADDRESS","IPV4_NETWORK_MASK","DOMAIN_NAME_SUFFIX","HOST_NAME"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			httpProxyWhitelistTypeTargetTypePropEnum = append(httpProxyWhitelistTypeTargetTypePropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, httpProxyWhitelistTypeTargetTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *HTTPProxyWhitelist) validateTargetType(formats strfmt.Registry) error {

	if err := validate.Required("target_type", "body", m.TargetType); err != nil {
		return err
	}

	// value enum
	if err := m.validateTargetTypeEnum("target_type", "body", *m.TargetType); err != nil {
		return err
	}

	return nil
}
