package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// CatalogResources Catalog creation/modification spec
//
// Catalog item creation/modification spec
// swagger:model catalog_resources
type CatalogResources struct {

	// A description for the catalog item
	// Max Length: 1000
	Description string `json:"description,omitempty"`

	// Catalog item name
	// Required: true
	// Max Length: 140
	Name *string `json:"name"`

	// resources
	Resources *CatalogResourcesResources `json:"resources,omitempty"`
}

// Validate validates this catalog resources
func (m *CatalogResources) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateResources(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CatalogResources) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("description", "body", string(m.Description), 1000); err != nil {
		return err
	}

	return nil
}

func (m *CatalogResources) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 140); err != nil {
		return err
	}

	return nil
}

func (m *CatalogResources) validateResources(formats strfmt.Registry) error {

	if swag.IsZero(m.Resources) { // not required
		return nil
	}

	if m.Resources != nil {

		if err := m.Resources.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

// CatalogResourcesResources Catalog item resource
// swagger:model CatalogResourcesResources
type CatalogResourcesResources struct {

	// image reference
	ImageReference *ImageReference `json:"image_reference,omitempty"`

	// image size
	ImageSize int64 `json:"image_size,omitempty"`

	// image type
	ImageType string `json:"image_type,omitempty"`

	// item type
	// Required: true
	ItemType *string `json:"item_type"`

	// memory size mb
	MemorySizeMb int64 `json:"memory_size_mb,omitempty"`

	// num vcpus
	NumVcpus int64 `json:"num_vcpus,omitempty"`

	// template
	Template *CatalogTemplateItem `json:"template,omitempty"`

	// Virtual Disks attached to the VM
	VirtualDiskList []*VirtualDisk `json:"virtual_disk_list,omitempty"`

	// vm reference
	VMReference *VMReference `json:"vm_reference,omitempty"`
}

// Validate validates this catalog resources resources
func (m *CatalogResourcesResources) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateImageReference(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateImageType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateItemType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTemplate(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVirtualDiskList(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVMReference(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CatalogResourcesResources) validateImageReference(formats strfmt.Registry) error {

	if swag.IsZero(m.ImageReference) { // not required
		return nil
	}

	if m.ImageReference != nil {

		if err := m.ImageReference.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

var catalogResourcesResourcesTypeImageTypePropEnum []interface{}

const (
	catalogResourcesResourcesImageTypeDISKIMAGE string = "DISK_IMAGE"
	catalogResourcesResourcesImageTypeISOIMAGE  string = "ISO_IMAGE"
)

// prop value enum
func (m *CatalogResourcesResources) validateImageTypeEnum(path, location string, value string) error {
	if catalogResourcesResourcesTypeImageTypePropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["DISK_IMAGE","ISO_IMAGE"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			catalogResourcesResourcesTypeImageTypePropEnum = append(catalogResourcesResourcesTypeImageTypePropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, catalogResourcesResourcesTypeImageTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CatalogResourcesResources) validateImageType(formats strfmt.Registry) error {

	if swag.IsZero(m.ImageType) { // not required
		return nil
	}

	// value enum
	if err := m.validateImageTypeEnum("resources"+"."+"image_type", "body", m.ImageType); err != nil {
		return err
	}

	return nil
}

var catalogResourcesResourcesTypeItemTypePropEnum []interface{}

const (
	catalogResourcesResourcesItemTypeIMAGE    string = "IMAGE"
	catalogResourcesResourcesItemTypeVM       string = "VM"
	catalogResourcesResourcesItemTypeTEMPLATE string = "TEMPLATE"
)

// prop value enum
func (m *CatalogResourcesResources) validateItemTypeEnum(path, location string, value string) error {
	if catalogResourcesResourcesTypeItemTypePropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["IMAGE","VM","TEMPLATE"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			catalogResourcesResourcesTypeItemTypePropEnum = append(catalogResourcesResourcesTypeItemTypePropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, catalogResourcesResourcesTypeItemTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CatalogResourcesResources) validateItemType(formats strfmt.Registry) error {

	if err := validate.Required("resources"+"."+"item_type", "body", m.ItemType); err != nil {
		return err
	}

	// value enum
	if err := m.validateItemTypeEnum("resources"+"."+"item_type", "body", *m.ItemType); err != nil {
		return err
	}

	return nil
}

func (m *CatalogResourcesResources) validateTemplate(formats strfmt.Registry) error {

	if swag.IsZero(m.Template) { // not required
		return nil
	}

	if m.Template != nil {

		if err := m.Template.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *CatalogResourcesResources) validateVirtualDiskList(formats strfmt.Registry) error {

	if swag.IsZero(m.VirtualDiskList) { // not required
		return nil
	}

	for i := 0; i < len(m.VirtualDiskList); i++ {

		if swag.IsZero(m.VirtualDiskList[i]) { // not required
			continue
		}

		if m.VirtualDiskList[i] != nil {

			if err := m.VirtualDiskList[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *CatalogResourcesResources) validateVMReference(formats strfmt.Registry) error {

	if swag.IsZero(m.VMReference) { // not required
		return nil
	}

	if m.VMReference != nil {

		if err := m.VMReference.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}
