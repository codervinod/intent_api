package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// DirectoryService Directory service
//
// Directory Service configuration
// swagger:model directory_service
type DirectoryService struct {

	// directory service name
	// Required: true
	// Max Length: 140
	Name *string `json:"name"`

	// resources
	// Required: true
	Resources *DirectoryServiceResources `json:"resources"`
}

// Validate validates this directory service
func (m *DirectoryService) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateResources(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DirectoryService) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 140); err != nil {
		return err
	}

	return nil
}

func (m *DirectoryService) validateResources(formats strfmt.Registry) error {

	if err := validate.Required("resources", "body", m.Resources); err != nil {
		return err
	}

	if m.Resources != nil {

		if err := m.Resources.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

// DirectoryServiceResources Directory service resources
// swagger:model DirectoryServiceResources
type DirectoryServiceResources struct {

	// List of distinguished name of the admin group in the directory
	// service
	//
	AdminGroupList []string `json:"admin_group_list,omitempty"`

	// List of admin users reference
	AdminUserReferenceList []*UserReference `json:"admin_user_reference_list,omitempty"`

	// Validates and connects to the directory service with the given
	// credentials
	//
	ConnectionInformation *ConnectionInput `json:"connection_information,omitempty"`

	// domain name
	// Required: true
	Domain *string `json:"domain"`

	// Url of the directory
	// Required: true
	URL *string `json:"url"`
}

// Validate validates this directory service resources
func (m *DirectoryServiceResources) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdminGroupList(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateAdminUserReferenceList(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateConnectionInformation(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDomain(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DirectoryServiceResources) validateAdminGroupList(formats strfmt.Registry) error {

	if swag.IsZero(m.AdminGroupList) { // not required
		return nil
	}

	return nil
}

func (m *DirectoryServiceResources) validateAdminUserReferenceList(formats strfmt.Registry) error {

	if swag.IsZero(m.AdminUserReferenceList) { // not required
		return nil
	}

	for i := 0; i < len(m.AdminUserReferenceList); i++ {

		if swag.IsZero(m.AdminUserReferenceList[i]) { // not required
			continue
		}

		if m.AdminUserReferenceList[i] != nil {

			if err := m.AdminUserReferenceList[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *DirectoryServiceResources) validateConnectionInformation(formats strfmt.Registry) error {

	if swag.IsZero(m.ConnectionInformation) { // not required
		return nil
	}

	if m.ConnectionInformation != nil {

		if err := m.ConnectionInformation.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *DirectoryServiceResources) validateDomain(formats strfmt.Registry) error {

	if err := validate.Required("resources"+"."+"domain", "body", m.Domain); err != nil {
		return err
	}

	return nil
}

func (m *DirectoryServiceResources) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("resources"+"."+"url", "body", m.URL); err != nil {
		return err
	}

	return nil
}
