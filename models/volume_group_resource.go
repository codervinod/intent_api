package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// VolumeGroupResource Volume group configuration
//
// Volume group configuration
// swagger:model volume_group_resource
type VolumeGroupResource struct {

	// VMs attached to volume group
	AttachmentList []*VolumeGroupAttachResource `json:"attachment_list,omitempty"`

	// Volume group description
	// Max Length: 1000
	Description string `json:"description,omitempty"`

	// Volume group disk specification
	DiskList []*VolumeDiskResource `json:"disk_list,omitempty"`

	// Whether the volume group can be shared accross multiple iSCSI initiators
	//
	IsShared bool `json:"is_shared,omitempty"`

	// iSCSI qualified name list
	IscsiInitiatorNameList []string `json:"iscsi_initiator_name_list,omitempty"`

	// iSCSI target prefix-name
	IscsiTargetPrefix string `json:"iscsi_target_prefix,omitempty"`

	// Volume group name
	// Max Length: 140
	Name string `json:"name,omitempty"`
}

// Validate validates this volume group resource
func (m *VolumeGroupResource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttachmentList(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDiskList(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateIscsiInitiatorNameList(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VolumeGroupResource) validateAttachmentList(formats strfmt.Registry) error {

	if swag.IsZero(m.AttachmentList) { // not required
		return nil
	}

	for i := 0; i < len(m.AttachmentList); i++ {

		if swag.IsZero(m.AttachmentList[i]) { // not required
			continue
		}

		if m.AttachmentList[i] != nil {

			if err := m.AttachmentList[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *VolumeGroupResource) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("description", "body", string(m.Description), 1000); err != nil {
		return err
	}

	return nil
}

func (m *VolumeGroupResource) validateDiskList(formats strfmt.Registry) error {

	if swag.IsZero(m.DiskList) { // not required
		return nil
	}

	for i := 0; i < len(m.DiskList); i++ {

		if swag.IsZero(m.DiskList[i]) { // not required
			continue
		}

		if m.DiskList[i] != nil {

			if err := m.DiskList[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *VolumeGroupResource) validateIscsiInitiatorNameList(formats strfmt.Registry) error {

	if swag.IsZero(m.IscsiInitiatorNameList) { // not required
		return nil
	}

	return nil
}

func (m *VolumeGroupResource) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("name", "body", string(m.Name), 140); err != nil {
		return err
	}

	return nil
}
