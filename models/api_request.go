package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// APIRequest Api request
//
// Api request
// swagger:model api_request
type APIRequest struct {

	// API request intent spec
	Body map[string]interface{} `json:"body,omitempty"`

	// REST verbs
	// Required: true
	Operation *string `json:"operation"`

	// Part of request url that consists of path, query etc
	// Required: true
	PathAndParams *string `json:"path_and_params"`
}

// Validate validates this api request
func (m *APIRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOperation(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePathAndParams(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var apiRequestTypeOperationPropEnum []interface{}

const (
	apiRequestOperationDELETE string = "DELETE"
	apiRequestOperationGET    string = "GET"
	apiRequestOperationHEAD   string = "HEAD"
	apiRequestOperationPATCH  string = "PATCH"
	apiRequestOperationPOST   string = "POST"
	apiRequestOperationPUT    string = "PUT"
)

// prop value enum
func (m *APIRequest) validateOperationEnum(path, location string, value string) error {
	if apiRequestTypeOperationPropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["DELETE","GET","HEAD","PATCH","POST","PUT"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			apiRequestTypeOperationPropEnum = append(apiRequestTypeOperationPropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, apiRequestTypeOperationPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *APIRequest) validateOperation(formats strfmt.Registry) error {

	if err := validate.Required("operation", "body", m.Operation); err != nil {
		return err
	}

	// value enum
	if err := m.validateOperationEnum("operation", "body", *m.Operation); err != nil {
		return err
	}

	return nil
}

func (m *APIRequest) validatePathAndParams(formats strfmt.Registry) error {

	if err := validate.Required("path_and_params", "body", m.PathAndParams); err != nil {
		return err
	}

	return nil
}
