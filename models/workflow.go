package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// Workflow Workflow Input Definition
//
// Workflow Input Definition
// swagger:model workflow
type Workflow struct {

	// A description or user annotation for the Workflow
	// Max Length: 1000
	Description string `json:"description,omitempty"`

	// Workflow Name
	// Required: true
	// Max Length: 140
	Name *string `json:"name"`

	// resources
	// Required: true
	Resources *WorkflowResources `json:"resources"`
}

// Validate validates this workflow
func (m *Workflow) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateResources(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Workflow) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("description", "body", string(m.Description), 1000); err != nil {
		return err
	}

	return nil
}

func (m *Workflow) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 140); err != nil {
		return err
	}

	return nil
}

func (m *Workflow) validateResources(formats strfmt.Registry) error {

	if err := validate.Required("resources", "body", m.Resources); err != nil {
		return err
	}

	if m.Resources != nil {

		if err := m.Resources.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

// WorkflowResources Workflow resources
// swagger:model WorkflowResources
type WorkflowResources struct {

	// Generic parameters for workflow
	GlobalParams []*WorkflowParameters `json:"global_params,omitempty"`

	// Input for stages of workflow.
	WorkflowStages []*WorkflowStage `json:"workflow_stages,omitempty"`

	// Type of workflow
	WorkflowType string `json:"workflow_type,omitempty"`
}

// Validate validates this workflow resources
func (m *WorkflowResources) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGlobalParams(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateWorkflowStages(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateWorkflowType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkflowResources) validateGlobalParams(formats strfmt.Registry) error {

	if swag.IsZero(m.GlobalParams) { // not required
		return nil
	}

	for i := 0; i < len(m.GlobalParams); i++ {

		if swag.IsZero(m.GlobalParams[i]) { // not required
			continue
		}

		if m.GlobalParams[i] != nil {

			if err := m.GlobalParams[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *WorkflowResources) validateWorkflowStages(formats strfmt.Registry) error {

	if swag.IsZero(m.WorkflowStages) { // not required
		return nil
	}

	for i := 0; i < len(m.WorkflowStages); i++ {

		if swag.IsZero(m.WorkflowStages[i]) { // not required
			continue
		}

		if m.WorkflowStages[i] != nil {

			if err := m.WorkflowStages[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

var workflowResourcesTypeWorkflowTypePropEnum []interface{}

const (
	workflowResourcesWorkflowTypeRECOVERYPLAN string = "RECOVERY_PLAN"
)

// prop value enum
func (m *WorkflowResources) validateWorkflowTypeEnum(path, location string, value string) error {
	if workflowResourcesTypeWorkflowTypePropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["RECOVERY_PLAN"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			workflowResourcesTypeWorkflowTypePropEnum = append(workflowResourcesTypeWorkflowTypePropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, workflowResourcesTypeWorkflowTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *WorkflowResources) validateWorkflowType(formats strfmt.Registry) error {

	if swag.IsZero(m.WorkflowType) { // not required
		return nil
	}

	// value enum
	if err := m.validateWorkflowTypeEnum("resources"+"."+"workflow_type", "body", m.WorkflowType); err != nil {
		return err
	}

	return nil
}
