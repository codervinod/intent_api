package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// SMTPServer SMTP server
//
// SMTP Server
// swagger:model smtp_server
type SMTPServer struct {

	// email address
	// Required: true
	EmailAddress *string `json:"email_address"`

	// server
	// Required: true
	Server *ClusterNetworkEntity `json:"server"`

	// type
	Type *string `json:"type,omitempty"`
}

// Validate validates this smtp server
func (m *SMTPServer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmailAddress(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateServer(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SMTPServer) validateEmailAddress(formats strfmt.Registry) error {

	if err := validate.Required("email_address", "body", m.EmailAddress); err != nil {
		return err
	}

	return nil
}

func (m *SMTPServer) validateServer(formats strfmt.Registry) error {

	if err := validate.Required("server", "body", m.Server); err != nil {
		return err
	}

	if m.Server != nil {

		if err := m.Server.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

var smtpServerTypeTypePropEnum []interface{}

const (
	smtpServerTypePLAIN    string = "PLAIN"
	smtpServerTypeSTARTTLS string = "STARTTLS"
	smtpServerTypeSSL      string = "SSL"
)

// prop value enum
func (m *SMTPServer) validateTypeEnum(path, location string, value string) error {
	if smtpServerTypeTypePropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["PLAIN","STARTTLS","SSL"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			smtpServerTypeTypePropEnum = append(smtpServerTypeTypePropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, smtpServerTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SMTPServer) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}
