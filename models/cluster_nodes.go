package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

// ClusterNodes Cluster Nodes
//
// Node info for this cluster
// swagger:model cluster_nodes
type ClusterNodes struct {

	// hypervisor servers
	HypervisorServers []*HypervisorServer `json:"hypervisor_servers,omitempty"`

	// node version
	NodeVersion *NodeVersion `json:"node_version,omitempty"`
}

// Validate validates this cluster nodes
func (m *ClusterNodes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHypervisorServers(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNodeVersion(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterNodes) validateHypervisorServers(formats strfmt.Registry) error {

	if swag.IsZero(m.HypervisorServers) { // not required
		return nil
	}

	for i := 0; i < len(m.HypervisorServers); i++ {

		if swag.IsZero(m.HypervisorServers[i]) { // not required
			continue
		}

		if m.HypervisorServers[i] != nil {

			if err := m.HypervisorServers[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *ClusterNodes) validateNodeVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.NodeVersion) { // not required
		return nil
	}

	if m.NodeVersion != nil {

		if err := m.NodeVersion.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}
