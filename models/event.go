package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

// Event Event
//
// An event is an object that represents a change in state of an entity in
// the system.
//
// swagger:model event
type Event struct {

	// api version
	// Read Only: true
	APIVersion string `json:"api_version,omitempty"`

	// The versioned reference to the entity pointing to the version after
	// the event.
	//
	EntityReference *Reference `json:"entity_reference,omitempty"`

	// metadata
	Metadata *EventMetadata `json:"metadata,omitempty"`
}

// Validate validates this event
func (m *Event) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEntityReference(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Event) validateEntityReference(formats strfmt.Registry) error {

	if swag.IsZero(m.EntityReference) { // not required
		return nil
	}

	if m.EntityReference != nil {

		if err := m.EntityReference.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *Event) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {

		if err := m.Metadata.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}
