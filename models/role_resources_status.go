package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// RoleResourcesStatus Role entity status
//
// Role entity status
// swagger:model role_resources_status
type RoleResourcesStatus struct {

	// Human readable description of the role
	// Max Length: 1000
	Description string `json:"description,omitempty"`

	// If state is kError, a message describing the error
	Message string `json:"message,omitempty"`

	// Role name
	// Required: true
	// Max Length: 140
	Name *string `json:"name"`

	// If state is kError, a machine_readable snake cased string
	Reason string `json:"reason,omitempty"`

	// resources
	// Required: true
	Resources *RoleResourcesResponse `json:"resources"`

	// The state of the role resource
	State string `json:"state,omitempty"`
}

// Validate validates this role resources status
func (m *RoleResourcesStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateResources(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RoleResourcesStatus) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("description", "body", string(m.Description), 1000); err != nil {
		return err
	}

	return nil
}

func (m *RoleResourcesStatus) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 140); err != nil {
		return err
	}

	return nil
}

func (m *RoleResourcesStatus) validateResources(formats strfmt.Registry) error {

	if err := validate.Required("resources", "body", m.Resources); err != nil {
		return err
	}

	if m.Resources != nil {

		if err := m.Resources.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}
