package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"
)

// CloudCredentialsDefStatus Cloud credentials Configuration
//
// Cloud credentials configuration
// swagger:model cloud_credentials_def_status
type CloudCredentialsDefStatus struct {
	Resources CloudCredentials `json:"-"`

	// UUID to uniquely identify cloud credentials
	// Required: true
	UUID *int64 `json:"uuid"`
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *CloudCredentialsDefStatus) UnmarshalJSON(raw []byte) error {
	var data struct {
		Resources json.RawMessage `json:"resources"`

		UUID *int64 `json:"uuid"`
	}

	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	resources, err := UnmarshalCloudCredentials(bytes.NewBuffer(data.Resources), runtime.JSONConsumer())
	if err != nil {
		return err
	}

	var result CloudCredentialsDefStatus
	result.Resources = resources
	result.UUID = data.UUID
	*m = result
	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m CloudCredentialsDefStatus) MarshalJSON() ([]byte, error) {
	var b1, b2 []byte
	var err error
	b1, err = json.Marshal(struct {
		UUID *int64 `json:"uuid"`
	}{
		UUID: m.UUID,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Resources CloudCredentials `json:"resources"`
	}{
		Resources: m.Resources,
	})
	if err != nil {
		return nil, err
	}
	return swag.ConcatJSON(b1, b2), nil
}

// Validate validates this cloud credentials def status
func (m *CloudCredentialsDefStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResources(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUUID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudCredentialsDefStatus) validateResources(formats strfmt.Registry) error {

	if err := m.Resources.Validate(formats); err != nil {
		return err
	}

	return nil
}

func (m *CloudCredentialsDefStatus) validateUUID(formats strfmt.Registry) error {

	if err := validate.Required("uuid", "body", m.UUID); err != nil {
		return err
	}

	return nil
}
