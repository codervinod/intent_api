package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// OauthToken Oauth token
//
// Oauth token information
// swagger:model oauth_token
type OauthToken struct {

	// access_token to be used for accessing gateway
	// Required: true
	AccessToken *string `json:"access_token"`

	// Token expiration time in seconds
	// Required: true
	ExpiresIn *int64 `json:"expires_in"`

	// refresh_token which can used to get new token
	// Required: true
	RefreshToken *string `json:"refresh_token"`

	// scopes
	// Required: true
	Scopes []string `json:"scopes"`

	// Only value possible is "bearer".
	// Required: true
	// Read Only: true
	TokenType string `json:"token_type"`
}

// Validate validates this oauth token
func (m *OauthToken) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessToken(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateExpiresIn(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRefreshToken(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateScopes(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTokenType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OauthToken) validateAccessToken(formats strfmt.Registry) error {

	if err := validate.Required("access_token", "body", m.AccessToken); err != nil {
		return err
	}

	return nil
}

func (m *OauthToken) validateExpiresIn(formats strfmt.Registry) error {

	if err := validate.Required("expires_in", "body", m.ExpiresIn); err != nil {
		return err
	}

	return nil
}

func (m *OauthToken) validateRefreshToken(formats strfmt.Registry) error {

	if err := validate.Required("refresh_token", "body", m.RefreshToken); err != nil {
		return err
	}

	return nil
}

func (m *OauthToken) validateScopes(formats strfmt.Registry) error {

	if err := validate.Required("scopes", "body", m.Scopes); err != nil {
		return err
	}

	return nil
}

func (m *OauthToken) validateTokenType(formats strfmt.Registry) error {

	if err := validate.RequiredString("token_type", "body", string(m.TokenType)); err != nil {
		return err
	}

	return nil
}
