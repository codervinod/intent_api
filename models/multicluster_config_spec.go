package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// MulticlusterConfigSpec Specification for multicluster configuration request
//
// Specification for multicluster configuration request
// swagger:model multicluster_config_spec
type MulticlusterConfigSpec struct {

	// execution plan
	// Required: true
	ExecutionPlan ExecutionPlan `json:"execution_plan"`

	// spec list
	// Required: true
	SpecList []*ClusterIntentInput `json:"spec_list"`
}

// Validate validates this multicluster config spec
func (m *MulticlusterConfigSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExecutionPlan(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSpecList(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MulticlusterConfigSpec) validateExecutionPlan(formats strfmt.Registry) error {

	if err := m.ExecutionPlan.Validate(formats); err != nil {
		return err
	}

	return nil
}

func (m *MulticlusterConfigSpec) validateSpecList(formats strfmt.Registry) error {

	if err := validate.Required("spec_list", "body", m.SpecList); err != nil {
		return err
	}

	for i := 0; i < len(m.SpecList); i++ {

		if swag.IsZero(m.SpecList[i]) { // not required
			continue
		}

		if m.SpecList[i] != nil {

			if err := m.SpecList[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}
