package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// WebhookPostData Data sent in the webhook
//
// Data sent in the webhook
// swagger:model webhook_post_data
type WebhookPostData struct {

	// Custom key-value details relevant to the event
	// Required: true
	// Read Only: true
	Data interface{} `json:"data"`

	// Event type
	// Required: true
	EventType WebhookEventType `json:"event_type"`

	// The kind reference
	// Required: true
	Reference *Reference `json:"reference"`

	// The version of the webhook data
	// Required: true
	Version *string `json:"version"`
}

// Validate validates this webhook post data
func (m *WebhookPostData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEventType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateReference(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WebhookPostData) validateData(formats strfmt.Registry) error {

	return nil
}

func (m *WebhookPostData) validateEventType(formats strfmt.Registry) error {

	if err := m.EventType.Validate(formats); err != nil {
		return err
	}

	return nil
}

func (m *WebhookPostData) validateReference(formats strfmt.Registry) error {

	if err := validate.Required("reference", "body", m.Reference); err != nil {
		return err
	}

	if m.Reference != nil {

		if err := m.Reference.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *WebhookPostData) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}
