package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// ResourceUtilizationSpec Resource Utilization Specification
//
// specify the limits and units for a resource type
// swagger:model resource_utilization_spec
type ResourceUtilizationSpec struct {

	// The resource consumption limit
	// Required: true
	Limit *int64 `json:"limit"`

	// The type of resource (i.e. storage, cpus)
	// Required: true
	ResourceType *string `json:"resource_type"`
}

// Validate validates this resource utilization spec
func (m *ResourceUtilizationSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLimit(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateResourceType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResourceUtilizationSpec) validateLimit(formats strfmt.Registry) error {

	if err := validate.Required("limit", "body", m.Limit); err != nil {
		return err
	}

	return nil
}

var resourceUtilizationSpecTypeResourceTypePropEnum []interface{}

const (
	resourceUtilizationSpecResourceTypeSTORAGE string = "STORAGE"
	resourceUtilizationSpecResourceTypeMEMORY  string = "MEMORY"
	resourceUtilizationSpecResourceTypeVCPUS   string = "VCPUS"
	resourceUtilizationSpecResourceTypeVMS     string = "VMS"
)

// prop value enum
func (m *ResourceUtilizationSpec) validateResourceTypeEnum(path, location string, value string) error {
	if resourceUtilizationSpecTypeResourceTypePropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["STORAGE","MEMORY","VCPUS","VMS"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			resourceUtilizationSpecTypeResourceTypePropEnum = append(resourceUtilizationSpecTypeResourceTypePropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, resourceUtilizationSpecTypeResourceTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ResourceUtilizationSpec) validateResourceType(formats strfmt.Registry) error {

	if err := validate.Required("resource_type", "body", m.ResourceType); err != nil {
		return err
	}

	// value enum
	if err := m.validateResourceTypeEnum("resource_type", "body", *m.ResourceType); err != nil {
		return err
	}

	return nil
}
