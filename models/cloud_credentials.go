package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"io"
	"io/ioutil"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"
)

// CloudCredentials Cloud Credentials Spec
//
// Cloud credentials spec
// swagger:discriminator cloud_credentials cloud_type
type CloudCredentials interface {
	runtime.Validatable

	// cloud type
	// Required: true
	CloudType() CloudType
	SetCloudType(CloudType)

	// Indicates if it is the default credentials
	IsDefault() bool
	SetIsDefault(bool)

	// Access key for AWS, or subscription id for Azure
	//
	KeyID() string
	SetKeyID(string)

	// User friendly name for the credentials
	// Required: true
	Name() *string
	SetName(*string)

	// Secret key for AWS, or full file path of the Azure client certificate
	// file(<file_name>.pem)
	//
	SecureID() string
	SetSecureID(string)
}

// UnmarshalCloudCredentialsSlice unmarshals polymorphic slices of CloudCredentials
func UnmarshalCloudCredentialsSlice(reader io.Reader, consumer runtime.Consumer) ([]CloudCredentials, error) {
	var elements [][]byte
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []CloudCredentials
	for _, element := range elements {
		obj, err := unmarshalCloudCredentials(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalCloudCredentials unmarshals polymorphic CloudCredentials
func UnmarshalCloudCredentials(reader io.Reader, consumer runtime.Consumer) (CloudCredentials, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalCloudCredentials(data, consumer)
}

func unmarshalCloudCredentials(data []byte, consumer runtime.Consumer) (CloudCredentials, error) {
	buf := bytes.NewBuffer(data)
	// buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the cloud_type property.
	var getType struct {
		CloudType string `json:"cloud_type"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("cloud_type", "body", getType.CloudType); err != nil {
		return nil, err
	}

	// The value of cloud_type is used to determine which type to create and unmarshal the data into
	switch getType.CloudType {
	}
	return nil, errors.New(422, "invalid cloud_type value: %q", getType.CloudType)

}
