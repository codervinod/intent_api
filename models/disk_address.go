package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// DiskAddress Disk Address
//
// Disk Address
// swagger:model disk_address
type DiskAddress struct {

	// adapter type
	// Required: true
	AdapterType *string `json:"adapter_type"`

	// device index
	// Required: true
	DeviceIndex *int64 `json:"device_index"`
}

// Validate validates this disk address
func (m *DiskAddress) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdapterType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDeviceIndex(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var diskAddressTypeAdapterTypePropEnum []interface{}

const (
	diskAddressAdapterTypeSCSI string = "SCSI"
	diskAddressAdapterTypeIDE  string = "IDE"
	diskAddressAdapterTypePCI  string = "PCI"
	diskAddressAdapterTypeSATA string = "SATA"
)

// prop value enum
func (m *DiskAddress) validateAdapterTypeEnum(path, location string, value string) error {
	if diskAddressTypeAdapterTypePropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["SCSI","IDE","PCI","SATA"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			diskAddressTypeAdapterTypePropEnum = append(diskAddressTypeAdapterTypePropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, diskAddressTypeAdapterTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DiskAddress) validateAdapterType(formats strfmt.Registry) error {

	if err := validate.Required("adapter_type", "body", m.AdapterType); err != nil {
		return err
	}

	// value enum
	if err := m.validateAdapterTypeEnum("adapter_type", "body", *m.AdapterType); err != nil {
		return err
	}

	return nil
}

func (m *DiskAddress) validateDeviceIndex(formats strfmt.Registry) error {

	if err := validate.Required("device_index", "body", m.DeviceIndex); err != nil {
		return err
	}

	return nil
}
