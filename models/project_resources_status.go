package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// ProjectResourcesStatus Project Resource Status
//
// A Project kind
// swagger:model project_resources_status
type ProjectResourcesStatus struct {

	// Project description
	// Max Length: 1000
	Description string `json:"description,omitempty"`

	// Project name
	// Required: true
	// Max Length: 140
	Name *string `json:"name"`

	// resources
	// Required: true
	Resources *ProjectResourcesStatusResources `json:"resources"`
}

// Validate validates this project resources status
func (m *ProjectResourcesStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateResources(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectResourcesStatus) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("description", "body", string(m.Description), 1000); err != nil {
		return err
	}

	return nil
}

func (m *ProjectResourcesStatus) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 140); err != nil {
		return err
	}

	return nil
}

func (m *ProjectResourcesStatus) validateResources(formats strfmt.Registry) error {

	if err := validate.Required("resources", "body", m.Resources); err != nil {
		return err
	}

	if m.Resources != nil {

		if err := m.Resources.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

// ProjectResourcesStatusResources Project Resources
// swagger:model ProjectResourcesStatusResources
type ProjectResourcesStatusResources struct {

	// Optional default network if one is specified
	DefaultNetworkReference *NetworkReference `json:"default_network_reference,omitempty"`

	// List of networks for the project
	NetworkReferenceList []*NetworkReference `json:"network_reference_list,omitempty"`

	// Optional resource limits defined for the project
	ResourceDomain *ResourceDomainDetails `json:"resource_domain,omitempty"`

	// The role assigned to project users
	RoleReference *RoleReference `json:"role_reference,omitempty"`

	// List of users in the project including all the users from the users group if provided
	UserReferenceList []*UserReference `json:"user_reference_list,omitempty"`
}

// Validate validates this project resources status resources
func (m *ProjectResourcesStatusResources) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDefaultNetworkReference(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNetworkReferenceList(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateResourceDomain(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRoleReference(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUserReferenceList(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectResourcesStatusResources) validateDefaultNetworkReference(formats strfmt.Registry) error {

	if swag.IsZero(m.DefaultNetworkReference) { // not required
		return nil
	}

	if m.DefaultNetworkReference != nil {

		if err := m.DefaultNetworkReference.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *ProjectResourcesStatusResources) validateNetworkReferenceList(formats strfmt.Registry) error {

	if swag.IsZero(m.NetworkReferenceList) { // not required
		return nil
	}

	for i := 0; i < len(m.NetworkReferenceList); i++ {

		if swag.IsZero(m.NetworkReferenceList[i]) { // not required
			continue
		}

		if m.NetworkReferenceList[i] != nil {

			if err := m.NetworkReferenceList[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *ProjectResourcesStatusResources) validateResourceDomain(formats strfmt.Registry) error {

	if swag.IsZero(m.ResourceDomain) { // not required
		return nil
	}

	if m.ResourceDomain != nil {

		if err := m.ResourceDomain.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *ProjectResourcesStatusResources) validateRoleReference(formats strfmt.Registry) error {

	if swag.IsZero(m.RoleReference) { // not required
		return nil
	}

	if m.RoleReference != nil {

		if err := m.RoleReference.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *ProjectResourcesStatusResources) validateUserReferenceList(formats strfmt.Registry) error {

	if swag.IsZero(m.UserReferenceList) { // not required
		return nil
	}

	for i := 0; i < len(m.UserReferenceList); i++ {

		if swag.IsZero(m.UserReferenceList[i]) { // not required
			continue
		}

		if m.UserReferenceList[i] != nil {

			if err := m.UserReferenceList[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}
