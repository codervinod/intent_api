package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// UserResources User resource
//
// A user kind
// swagger:model user_resources
type UserResources struct {

	// User's UserPrincipalName from the directory service
	// Read Only: true
	// Max Length: 140
	Name string `json:"name,omitempty"`

	// resources
	// Required: true
	Resources *UserResourcesResources `json:"resources"`
}

// Validate validates this user resources
func (m *UserResources) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateResources(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserResources) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("name", "body", string(m.Name), 140); err != nil {
		return err
	}

	return nil
}

func (m *UserResources) validateResources(formats strfmt.Registry) error {

	if err := validate.Required("resources", "body", m.Resources); err != nil {
		return err
	}

	if m.Resources != nil {

		if err := m.Resources.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

// UserResourcesResources user resource
// swagger:model UserResourcesResources
type UserResourcesResources struct {

	// User's display name(common name) from the directory service
	// Read Only: true
	DisplayName string `json:"display_name,omitempty"`

	// List of project the user is in.
	ProjectsList []*ProjectResourcesStatus `json:"projects_list,omitempty"`

	// Public keys assigned to the user
	PublicKeyList []*PublicKey `json:"public_key_list,omitempty"`

	// resource domain
	ResourceDomain *ResourceDomainDetails `json:"resource_domain,omitempty"`

	// roles list
	RolesList []*RoleResourcesStatus `json:"roles_list,omitempty"`

	// UserPrincipalName of the user in the directory service
	UserPrincipalName string `json:"user_principal_name,omitempty"`
}

// Validate validates this user resources resources
func (m *UserResourcesResources) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProjectsList(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePublicKeyList(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateResourceDomain(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRolesList(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserResourcesResources) validateProjectsList(formats strfmt.Registry) error {

	if swag.IsZero(m.ProjectsList) { // not required
		return nil
	}

	for i := 0; i < len(m.ProjectsList); i++ {

		if swag.IsZero(m.ProjectsList[i]) { // not required
			continue
		}

		if m.ProjectsList[i] != nil {

			if err := m.ProjectsList[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *UserResourcesResources) validatePublicKeyList(formats strfmt.Registry) error {

	if swag.IsZero(m.PublicKeyList) { // not required
		return nil
	}

	for i := 0; i < len(m.PublicKeyList); i++ {

		if swag.IsZero(m.PublicKeyList[i]) { // not required
			continue
		}

		if m.PublicKeyList[i] != nil {

			if err := m.PublicKeyList[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *UserResourcesResources) validateResourceDomain(formats strfmt.Registry) error {

	if swag.IsZero(m.ResourceDomain) { // not required
		return nil
	}

	if m.ResourceDomain != nil {

		if err := m.ResourceDomain.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *UserResourcesResources) validateRolesList(formats strfmt.Registry) error {

	if swag.IsZero(m.RolesList) { // not required
		return nil
	}

	for i := 0; i < len(m.RolesList); i++ {

		if swag.IsZero(m.RolesList[i]) { // not required
			continue
		}

		if m.RolesList[i] != nil {

			if err := m.RolesList[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}
