package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// ClusterNetworkEntity Cluster Network Entity
//
// Cluster network entity
// swagger:model cluster_network_entity
type ClusterNetworkEntity struct {

	// credentials
	Credentials *Credentials `json:"credentials,omitempty"`

	// ip config
	// Required: true
	IPConfig *ServerIPConfig `json:"ip_config"`

	// proxy type
	ProxyType []string `json:"proxy_type,omitempty"`
}

// Validate validates this cluster network entity
func (m *ClusterNetworkEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCredentials(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateIPConfig(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProxyType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterNetworkEntity) validateCredentials(formats strfmt.Registry) error {

	if swag.IsZero(m.Credentials) { // not required
		return nil
	}

	if m.Credentials != nil {

		if err := m.Credentials.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *ClusterNetworkEntity) validateIPConfig(formats strfmt.Registry) error {

	if err := validate.Required("ip_config", "body", m.IPConfig); err != nil {
		return err
	}

	if m.IPConfig != nil {

		if err := m.IPConfig.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

var clusterNetworkEntityProxyTypeItemsEnum []interface{}

func (m *ClusterNetworkEntity) validateProxyTypeItemsEnum(path, location string, value string) error {
	if clusterNetworkEntityProxyTypeItemsEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["HTTP","HTTPS","SOCKS"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			clusterNetworkEntityProxyTypeItemsEnum = append(clusterNetworkEntityProxyTypeItemsEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, clusterNetworkEntityProxyTypeItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *ClusterNetworkEntity) validateProxyType(formats strfmt.Registry) error {

	if swag.IsZero(m.ProxyType) { // not required
		return nil
	}

	for i := 0; i < len(m.ProxyType); i++ {

		if swag.IsZero(m.ProxyType[i]) { // not required
			continue
		}

		// value enum
		if err := m.validateProxyTypeItemsEnum("proxy_type"+"."+strconv.Itoa(i), "body", *m.ProxyType[i]); err != nil {
			return err
		}

	}

	return nil
}
