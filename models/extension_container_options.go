package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// ExtensionContainerOptions Extension container options
//
// Extension container options
// swagger:model extension_container_options
type ExtensionContainerOptions struct {

	// Command to be executed for the container
	Command string `json:"command,omitempty"`

	// Number of cpus
	// Minimum: 1
	CPUShares int32 `json:"cpu_shares,omitempty"`

	// List of environment variables.
	Environments map[string]string `json:"environments,omitempty"`

	// Memory in MBs
	MemoryMb int32 `json:"memory_mb,omitempty"`

	// List of port mappings
	PortMappingReferenceList map[string]string `json:"port_mapping_reference_list,omitempty"`

	// Name of container provider
	ProviderName string `json:"provider_name,omitempty"`

	// Container restart policy
	RestartPolicy string `json:"restart_policy,omitempty"`

	// List of volume to be mounted inside container
	VolumeList []*ExtensionContainerVolume `json:"volume_list,omitempty"`
}

// Validate validates this extension container options
func (m *ExtensionContainerOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCPUShares(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEnvironments(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePortMappingReferenceList(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProviderName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVolumeList(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExtensionContainerOptions) validateCPUShares(formats strfmt.Registry) error {

	if swag.IsZero(m.CPUShares) { // not required
		return nil
	}

	if err := validate.MinimumInt("cpu_shares", "body", int64(m.CPUShares), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *ExtensionContainerOptions) validateEnvironments(formats strfmt.Registry) error {

	if swag.IsZero(m.Environments) { // not required
		return nil
	}

	if err := validate.Required("environments", "body", m.Environments); err != nil {
		return err
	}

	return nil
}

func (m *ExtensionContainerOptions) validatePortMappingReferenceList(formats strfmt.Registry) error {

	if swag.IsZero(m.PortMappingReferenceList) { // not required
		return nil
	}

	if err := validate.Required("port_mapping_reference_list", "body", m.PortMappingReferenceList); err != nil {
		return err
	}

	return nil
}

var extensionContainerOptionsTypeProviderNamePropEnum []interface{}

const (
	extensionContainerOptionsProviderNameDOCKER string = "DOCKER"
)

// prop value enum
func (m *ExtensionContainerOptions) validateProviderNameEnum(path, location string, value string) error {
	if extensionContainerOptionsTypeProviderNamePropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["DOCKER"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			extensionContainerOptionsTypeProviderNamePropEnum = append(extensionContainerOptionsTypeProviderNamePropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, extensionContainerOptionsTypeProviderNamePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ExtensionContainerOptions) validateProviderName(formats strfmt.Registry) error {

	if swag.IsZero(m.ProviderName) { // not required
		return nil
	}

	// value enum
	if err := m.validateProviderNameEnum("provider_name", "body", m.ProviderName); err != nil {
		return err
	}

	return nil
}

func (m *ExtensionContainerOptions) validateVolumeList(formats strfmt.Registry) error {

	if swag.IsZero(m.VolumeList) { // not required
		return nil
	}

	for i := 0; i < len(m.VolumeList); i++ {

		if swag.IsZero(m.VolumeList[i]) { // not required
			continue
		}

		if m.VolumeList[i] != nil {

			if err := m.VolumeList[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}
