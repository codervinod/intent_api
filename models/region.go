package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// Region Region
//
// A region is a contiguous set of offsets.
//
// swagger:model region
type Region struct {

	// The length of the region in bytes.
	// Required: true
	Length *int64 `json:"length"`

	// The byte offset indicating the start of the region.
	// Required: true
	Offset *int64 `json:"offset"`

	// The type of the region.
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this region
func (m *Region) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLength(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOffset(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Region) validateLength(formats strfmt.Registry) error {

	if err := validate.Required("length", "body", m.Length); err != nil {
		return err
	}

	return nil
}

func (m *Region) validateOffset(formats strfmt.Registry) error {

	if err := validate.Required("offset", "body", m.Offset); err != nil {
		return err
	}

	return nil
}

var regionTypeTypePropEnum []interface{}

const (
	regionTypeZEROED  string = "ZEROED"
	regionTypeREGULAR string = "REGULAR"
)

// prop value enum
func (m *Region) validateTypeEnum(path, location string, value string) error {
	if regionTypeTypePropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["ZEROED","REGULAR"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			regionTypeTypePropEnum = append(regionTypeTypePropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, regionTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Region) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}
