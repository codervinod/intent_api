package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// PemkeySpec SSL key
//
// SSL key
// swagger:model pemkey_spec
type PemkeySpec struct {

	// ca chain
	CaChain strfmt.Base64 `json:"ca_chain,omitempty"`

	// cert
	// Required: true
	Cert *strfmt.Base64 `json:"cert"`

	// key
	// Required: true
	Key *strfmt.Base64 `json:"key"`

	// name
	Name string `json:"name,omitempty"`

	// type
	// Required: true
	Type SslKeyType `json:"type"`
}

// Validate validates this pemkey spec
func (m *PemkeySpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCert(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateKey(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PemkeySpec) validateCert(formats strfmt.Registry) error {

	if err := validate.Required("cert", "body", m.Cert); err != nil {
		return err
	}

	return nil
}

func (m *PemkeySpec) validateKey(formats strfmt.Registry) error {

	if err := validate.Required("key", "body", m.Key); err != nil {
		return err
	}

	return nil
}

func (m *PemkeySpec) validateType(formats strfmt.Registry) error {

	if err := m.Type.Validate(formats); err != nil {
		return err
	}

	return nil
}
