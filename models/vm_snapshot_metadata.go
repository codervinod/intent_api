package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// VMSnapshotMetadata vm snapshot metadata
//
// The vm snapshot kind metadata
// swagger:model vm_snapshot_metadata
type VMSnapshotMetadata struct {

	// account reference
	AccountReference *AccountReference `json:"account_reference,omitempty"`

	// Time when vm snapshot was created
	CreationTime string `json:"creation_time,omitempty"`

	// Monotonically increasing number
	EntityVersion int64 `json:"entity_version,omitempty"`

	// The kind snapshot name
	// Read Only: true
	Kind string `json:"kind,omitempty"`

	// Time when vm snapshot was last updated
	LastUpdateTime string `json:"last_update_time,omitempty"`

	// vm snapshot name
	// Max Length: 140
	Name string `json:"name,omitempty"`

	// owner reference
	OwnerReference *UserReference `json:"owner_reference,omitempty"`

	// parent reference
	ParentReference *VMReference `json:"parent_reference,omitempty"`

	// vm snapshot uuid
	// Pattern: \A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\Z
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this vm snapshot metadata
func (m *VMSnapshotMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountReference(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateKind(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOwnerReference(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateParentReference(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUUID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMSnapshotMetadata) validateAccountReference(formats strfmt.Registry) error {

	if swag.IsZero(m.AccountReference) { // not required
		return nil
	}

	if m.AccountReference != nil {

		if err := m.AccountReference.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

var vmSnapshotMetadataTypeKindPropEnum []interface{}

const (
	vmSnapshotMetadataKindVMSnapshot string = "vm_snapshot"
)

// prop value enum
func (m *VMSnapshotMetadata) validateKindEnum(path, location string, value string) error {
	if vmSnapshotMetadataTypeKindPropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["vm_snapshot"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			vmSnapshotMetadataTypeKindPropEnum = append(vmSnapshotMetadataTypeKindPropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, vmSnapshotMetadataTypeKindPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *VMSnapshotMetadata) validateKind(formats strfmt.Registry) error {

	if swag.IsZero(m.Kind) { // not required
		return nil
	}

	// value enum
	if err := m.validateKindEnum("kind", "body", m.Kind); err != nil {
		return err
	}

	return nil
}

func (m *VMSnapshotMetadata) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("name", "body", string(m.Name), 140); err != nil {
		return err
	}

	return nil
}

func (m *VMSnapshotMetadata) validateOwnerReference(formats strfmt.Registry) error {

	if swag.IsZero(m.OwnerReference) { // not required
		return nil
	}

	if m.OwnerReference != nil {

		if err := m.OwnerReference.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *VMSnapshotMetadata) validateParentReference(formats strfmt.Registry) error {

	if swag.IsZero(m.ParentReference) { // not required
		return nil
	}

	if m.ParentReference != nil {

		if err := m.ParentReference.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *VMSnapshotMetadata) validateUUID(formats strfmt.Registry) error {

	if swag.IsZero(m.UUID) { // not required
		return nil
	}

	if err := validate.Pattern("uuid", "body", string(m.UUID), `\A[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\Z`); err != nil {
		return err
	}

	return nil
}
