package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// ExecutionStatus Progress of a task
//
// Progress of a task
// swagger:model execution_status
type ExecutionStatus struct {

	// Description of task
	Description string `json:"description,omitempty"`

	// Time when this task got ended
	EndTime string `json:"end_time,omitempty"`

	// State of entity after task is performed
	Entity interface{} `json:"entity,omitempty"`

	// Type of entity on which task is performed
	EntityType string `json:"entity_type,omitempty"`

	// Uuid of the entity on which task is performed
	EntityUUID string `json:"entity_uuid,omitempty"`

	// Estimated number of seconds for completion of this task
	Estimate int64 `json:"estimate,omitempty"`

	// User readable output/error if any
	Message string `json:"message,omitempty"`

	// Time when this task got started
	StartTime string `json:"start_time,omitempty"`

	// Status of this task
	Status string `json:"status,omitempty"`
}

// Validate validates this execution status
func (m *ExecutionStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var executionStatusTypeStatusPropEnum []interface{}

const (
	executionStatusStatusQUEUED    string = "QUEUED"
	executionStatusStatusRUNNING   string = "RUNNING"
	executionStatusStatusCOMPLETED string = "COMPLETED"
	executionStatusStatusFAILED    string = "FAILED"
	executionStatusStatusABORTED   string = "ABORTED"
)

// prop value enum
func (m *ExecutionStatus) validateStatusEnum(path, location string, value string) error {
	if executionStatusTypeStatusPropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["QUEUED","RUNNING","COMPLETED","FAILED","ABORTED"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			executionStatusTypeStatusPropEnum = append(executionStatusTypeStatusPropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, executionStatusTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ExecutionStatus) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}
