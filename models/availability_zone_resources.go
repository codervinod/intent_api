package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// AvailabilityZoneResources Availability Zone creation/modification spec
//
// Availability Zone creation/modification spec
// swagger:model availability_zone_resources
type AvailabilityZoneResources struct {

	// Availability Zone Name
	Name string `json:"name,omitempty"`

	// resources
	Resources *AvailabilityZoneResourcesResources `json:"resources,omitempty"`
}

// Validate validates this availability zone resources
func (m *AvailabilityZoneResources) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResources(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AvailabilityZoneResources) validateResources(formats strfmt.Registry) error {

	if swag.IsZero(m.Resources) { // not required
		return nil
	}

	if m.Resources != nil {

		if err := m.Resources.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

// AvailabilityZoneResourcesResources Availability zone resource
// swagger:model AvailabilityZoneResourcesResources
type AvailabilityZoneResourcesResources struct {

	// Mapping of storage container names on the local cluster to the
	// storage container names on the remote cluster. Data will be
	// replicated to the remote cluster accordingly. If a mapping for a
	// local storage container name doesn't exist here, it'll be assumed
	// that the data needs to be replicated to a similarly named storage
	// container on the remote cluster.
	//
	ContainerMapping []*AvailabilityZoneResourcesResourcesContainerMappingItems0 `json:"container_mapping,omitempty"`

	// credentials
	Credentials *AvailabilityZoneResourcesResourcesCredentials `json:"credentials,omitempty"`

	// This defines the type of management entity. Its value can be Xi,
	// PC, AWS or Azure. How to talk to management entity will be
	// decided based on the type of management plane.
	//
	// Required: true
	ManagementPlaneType *string `json:"management_plane_type"`

	// Identifier of the management plane. This could be the URL of the
	// PC or the FQDN of Xi portal.
	//
	// Required: true
	ManagementURL *string `json:"management_url"`

	// Cloud region where the data will be replicated to. Based on the
	// cloud provider type the available list of regions will differ.
	//
	Region string `json:"region,omitempty"`
}

// Validate validates this availability zone resources resources
func (m *AvailabilityZoneResourcesResources) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContainerMapping(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCredentials(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateManagementPlaneType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateManagementURL(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AvailabilityZoneResourcesResources) validateContainerMapping(formats strfmt.Registry) error {

	if swag.IsZero(m.ContainerMapping) { // not required
		return nil
	}

	for i := 0; i < len(m.ContainerMapping); i++ {

		if swag.IsZero(m.ContainerMapping[i]) { // not required
			continue
		}

		if m.ContainerMapping[i] != nil {

			if err := m.ContainerMapping[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *AvailabilityZoneResourcesResources) validateCredentials(formats strfmt.Registry) error {

	if swag.IsZero(m.Credentials) { // not required
		return nil
	}

	if m.Credentials != nil {

		if err := m.Credentials.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

var availabilityZoneResourcesResourcesTypeManagementPlaneTypePropEnum []interface{}

const (
	availabilityZoneResourcesResourcesManagementPlaneTypePC    string = "PC"
	availabilityZoneResourcesResourcesManagementPlaneTypeXi    string = "Xi"
	availabilityZoneResourcesResourcesManagementPlaneTypeAWS   string = "AWS"
	availabilityZoneResourcesResourcesManagementPlaneTypeAzure string = "Azure"
)

// prop value enum
func (m *AvailabilityZoneResourcesResources) validateManagementPlaneTypeEnum(path, location string, value string) error {
	if availabilityZoneResourcesResourcesTypeManagementPlaneTypePropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["PC","Xi","AWS","Azure"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			availabilityZoneResourcesResourcesTypeManagementPlaneTypePropEnum = append(availabilityZoneResourcesResourcesTypeManagementPlaneTypePropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, availabilityZoneResourcesResourcesTypeManagementPlaneTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AvailabilityZoneResourcesResources) validateManagementPlaneType(formats strfmt.Registry) error {

	if err := validate.Required("resources"+"."+"management_plane_type", "body", m.ManagementPlaneType); err != nil {
		return err
	}

	// value enum
	if err := m.validateManagementPlaneTypeEnum("resources"+"."+"management_plane_type", "body", *m.ManagementPlaneType); err != nil {
		return err
	}

	return nil
}

func (m *AvailabilityZoneResourcesResources) validateManagementURL(formats strfmt.Registry) error {

	if err := validate.Required("resources"+"."+"management_url", "body", m.ManagementURL); err != nil {
		return err
	}

	return nil
}

// AvailabilityZoneResourcesResourcesContainerMappingItems0 availability zone resources resources container mapping items0
// swagger:model AvailabilityZoneResourcesResourcesContainerMappingItems0
type AvailabilityZoneResourcesResourcesContainerMappingItems0 struct {

	// Source cluster where the entity is present
	// Pattern: ^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$
	RemoteClusterUUID string `json:"remote_cluster_uuid,omitempty"`

	// Name of the storage container on the remote cluster
	//
	RemoteStorageContainerName string `json:"remote_storage_container_name,omitempty"`

	// Source cluster where the entity is present
	// Pattern: ^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$
	SourceClusterUUID string `json:"source_cluster_uuid,omitempty"`

	// Name of the storage container on the source cluster
	//
	SourceStorageContainerName string `json:"source_storage_container_name,omitempty"`
}

// Validate validates this availability zone resources resources container mapping items0
func (m *AvailabilityZoneResourcesResourcesContainerMappingItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRemoteClusterUUID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSourceClusterUUID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AvailabilityZoneResourcesResourcesContainerMappingItems0) validateRemoteClusterUUID(formats strfmt.Registry) error {

	if swag.IsZero(m.RemoteClusterUUID) { // not required
		return nil
	}

	if err := validate.Pattern("remote_cluster_uuid", "body", string(m.RemoteClusterUUID), `^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$`); err != nil {
		return err
	}

	return nil
}

func (m *AvailabilityZoneResourcesResourcesContainerMappingItems0) validateSourceClusterUUID(formats strfmt.Registry) error {

	if swag.IsZero(m.SourceClusterUUID) { // not required
		return nil
	}

	if err := validate.Pattern("source_cluster_uuid", "body", string(m.SourceClusterUUID), `^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$`); err != nil {
		return err
	}

	return nil
}

// AvailabilityZoneResourcesResourcesCredentials Credentials required to connect to the management plane.
//
// swagger:model AvailabilityZoneResourcesResourcesCredentials
type AvailabilityZoneResourcesResourcesCredentials struct {

	// Access key for AWS, or subscription id for Azure.
	//
	AccessKey string `json:"access_key,omitempty"`

	// Full file path of the Azure client certificate
	// file(<file_name>.pem).
	//
	CertificatePath string `json:"certificate_path,omitempty"`

	// Secret key for AWS.
	//
	SecretKey string `json:"secret_key,omitempty"`
}

// Validate validates this availability zone resources resources credentials
func (m *AvailabilityZoneResourcesResourcesCredentials) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
