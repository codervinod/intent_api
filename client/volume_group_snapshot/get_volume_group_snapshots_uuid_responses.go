package volume_group_snapshot

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/codervinod/intent_api/models"
)

// GetVolumeGroupSnapshotsUUIDReader is a Reader for the GetVolumeGroupSnapshotsUUID structure.
type GetVolumeGroupSnapshotsUUIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetVolumeGroupSnapshotsUUIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetVolumeGroupSnapshotsUUIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewGetVolumeGroupSnapshotsUUIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetVolumeGroupSnapshotsUUIDDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	}
}

// NewGetVolumeGroupSnapshotsUUIDOK creates a GetVolumeGroupSnapshotsUUIDOK with default headers values
func NewGetVolumeGroupSnapshotsUUIDOK() *GetVolumeGroupSnapshotsUUIDOK {
	return &GetVolumeGroupSnapshotsUUIDOK{}
}

/*GetVolumeGroupSnapshotsUUIDOK handles this case with default header values.

Request succeeded
*/
type GetVolumeGroupSnapshotsUUIDOK struct {
	Payload *models.VolumeGroupSnapshotIntentResponse
}

func (o *GetVolumeGroupSnapshotsUUIDOK) Error() string {
	return fmt.Sprintf("[GET /volume_group_snapshots/{uuid}][%d] getVolumeGroupSnapshotsUuidOK  %+v", 200, o.Payload)
}

func (o *GetVolumeGroupSnapshotsUUIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.VolumeGroupSnapshotIntentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVolumeGroupSnapshotsUUIDNotFound creates a GetVolumeGroupSnapshotsUUIDNotFound with default headers values
func NewGetVolumeGroupSnapshotsUUIDNotFound() *GetVolumeGroupSnapshotsUUIDNotFound {
	return &GetVolumeGroupSnapshotsUUIDNotFound{}
}

/*GetVolumeGroupSnapshotsUUIDNotFound handles this case with default header values.

Invalid UUID Provided
*/
type GetVolumeGroupSnapshotsUUIDNotFound struct {
	Payload *models.VolumeGroupSnapshotStatus
}

func (o *GetVolumeGroupSnapshotsUUIDNotFound) Error() string {
	return fmt.Sprintf("[GET /volume_group_snapshots/{uuid}][%d] getVolumeGroupSnapshotsUuidNotFound  %+v", 404, o.Payload)
}

func (o *GetVolumeGroupSnapshotsUUIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.VolumeGroupSnapshotStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVolumeGroupSnapshotsUUIDDefault creates a GetVolumeGroupSnapshotsUUIDDefault with default headers values
func NewGetVolumeGroupSnapshotsUUIDDefault(code int) *GetVolumeGroupSnapshotsUUIDDefault {
	return &GetVolumeGroupSnapshotsUUIDDefault{
		_statusCode: code,
	}
}

/*GetVolumeGroupSnapshotsUUIDDefault handles this case with default header values.

Internal Error
*/
type GetVolumeGroupSnapshotsUUIDDefault struct {
	_statusCode int

	Payload *models.VolumeGroupSnapshotStatus
}

// Code gets the status code for the get volume group snapshots UUID default response
func (o *GetVolumeGroupSnapshotsUUIDDefault) Code() int {
	return o._statusCode
}

func (o *GetVolumeGroupSnapshotsUUIDDefault) Error() string {
	return fmt.Sprintf("[GET /volume_group_snapshots/{uuid}][%d] GetVolumeGroupSnapshotsUUID default  %+v", o._statusCode, o.Payload)
}

func (o *GetVolumeGroupSnapshotsUUIDDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.VolumeGroupSnapshotStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
