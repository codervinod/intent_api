package volume_group_snapshot

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new volume group snapshot API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for volume group snapshot API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteVolumeGroupSnapshotsUUID deletes kind snapshot

Delete a kind snapshot given its uuid
*/
func (a *Client) DeleteVolumeGroupSnapshotsUUID(params *DeleteVolumeGroupSnapshotsUUIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteVolumeGroupSnapshotsUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVolumeGroupSnapshotsUUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteVolumeGroupSnapshotsUUID",
		Method:             "DELETE",
		PathPattern:        "/volume_group_snapshots/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteVolumeGroupSnapshotsUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteVolumeGroupSnapshotsUUIDOK), nil

}

/*
GetVolumeGroupSnapshotsUUID gets kind snapshot

Given a UUID, returns a kind snapshot definition
*/
func (a *Client) GetVolumeGroupSnapshotsUUID(params *GetVolumeGroupSnapshotsUUIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetVolumeGroupSnapshotsUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVolumeGroupSnapshotsUUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVolumeGroupSnapshotsUUID",
		Method:             "GET",
		PathPattern:        "/volume_group_snapshots/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVolumeGroupSnapshotsUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVolumeGroupSnapshotsUUIDOK), nil

}

/*
PostVolumeGroupSnapshots creates kind snapshot

Given an intentful spec, creates a snapshot with associated metadata

*/
func (a *Client) PostVolumeGroupSnapshots(params *PostVolumeGroupSnapshotsParams, authInfo runtime.ClientAuthInfoWriter) (*PostVolumeGroupSnapshotsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostVolumeGroupSnapshotsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostVolumeGroupSnapshots",
		Method:             "POST",
		PathPattern:        "/volume_group_snapshots",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostVolumeGroupSnapshotsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostVolumeGroupSnapshotsOK), nil

}

/*
PostVolumeGroupSnapshotsList gets kind snapshots

Get kind snapshots
*/
func (a *Client) PostVolumeGroupSnapshotsList(params *PostVolumeGroupSnapshotsListParams, authInfo runtime.ClientAuthInfoWriter) (*PostVolumeGroupSnapshotsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostVolumeGroupSnapshotsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostVolumeGroupSnapshotsList",
		Method:             "POST",
		PathPattern:        "/volume_group_snapshots/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostVolumeGroupSnapshotsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostVolumeGroupSnapshotsListOK), nil

}

/*
PutVolumeGroupSnapshotsUUID updates kind snapshot

Given an intenful spec and snapshot uuid, update kind snapshot

*/
func (a *Client) PutVolumeGroupSnapshotsUUID(params *PutVolumeGroupSnapshotsUUIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutVolumeGroupSnapshotsUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutVolumeGroupSnapshotsUUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutVolumeGroupSnapshotsUUID",
		Method:             "PUT",
		PathPattern:        "/volume_group_snapshots/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutVolumeGroupSnapshotsUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutVolumeGroupSnapshotsUUIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
