package containers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/intent_api/models"
)

// NewPutContainersUUIDParams creates a new PutContainersUUIDParams object
// with the default values initialized.
func NewPutContainersUUIDParams() *PutContainersUUIDParams {
	var ()
	return &PutContainersUUIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPutContainersUUIDParamsWithTimeout creates a new PutContainersUUIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPutContainersUUIDParamsWithTimeout(timeout time.Duration) *PutContainersUUIDParams {
	var ()
	return &PutContainersUUIDParams{

		timeout: timeout,
	}
}

// NewPutContainersUUIDParamsWithContext creates a new PutContainersUUIDParams object
// with the default values initialized, and the ability to set a context for a request
func NewPutContainersUUIDParamsWithContext(ctx context.Context) *PutContainersUUIDParams {
	var ()
	return &PutContainersUUIDParams{

		Context: ctx,
	}
}

/*PutContainersUUIDParams contains all the parameters to send to the API endpoint
for the put containers UUID operation typically these are written to a http.Request
*/
type PutContainersUUIDParams struct {

	/*ContainerIntent
	  Intent Spec for Container

	*/
	ContainerIntent *models.ContainerIntentInput
	/*UUID
	  uuid of the container that needs to be updated

	*/
	UUID string

	timeout time.Duration
	Context context.Context
}

// WithTimeout adds the timeout to the put containers UUID params
func (o *PutContainersUUIDParams) WithTimeout(timeout time.Duration) *PutContainersUUIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the put containers UUID params
func (o *PutContainersUUIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the put containers UUID params
func (o *PutContainersUUIDParams) WithContext(ctx context.Context) *PutContainersUUIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the put containers UUID params
func (o *PutContainersUUIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithContainerIntent adds the containerIntent to the put containers UUID params
func (o *PutContainersUUIDParams) WithContainerIntent(containerIntent *models.ContainerIntentInput) *PutContainersUUIDParams {
	o.SetContainerIntent(containerIntent)
	return o
}

// SetContainerIntent adds the containerIntent to the put containers UUID params
func (o *PutContainersUUIDParams) SetContainerIntent(containerIntent *models.ContainerIntentInput) {
	o.ContainerIntent = containerIntent
}

// WithUUID adds the uuid to the put containers UUID params
func (o *PutContainersUUIDParams) WithUUID(uuid string) *PutContainersUUIDParams {
	o.SetUUID(uuid)
	return o
}

// SetUUID adds the uuid to the put containers UUID params
func (o *PutContainersUUIDParams) SetUUID(uuid string) {
	o.UUID = uuid
}

// WriteToRequest writes these params to a swagger request
func (o *PutContainersUUIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.ContainerIntent == nil {
		o.ContainerIntent = new(models.ContainerIntentInput)
	}

	if err := r.SetBodyParam(o.ContainerIntent); err != nil {
		return err
	}

	// path param uuid
	if err := r.SetPathParam("uuid", o.UUID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
