package containers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new containers API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for containers API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteContainersUUID deletes a container

Delete specific container
*/
func (a *Client) DeleteContainersUUID(params *DeleteContainersUUIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteContainersUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteContainersUUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteContainersUUID",
		Method:             "DELETE",
		PathPattern:        "/containers/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteContainersUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteContainersUUIDOK), nil

}

/*
GetContainersUUID gets container details

Get container details
*/
func (a *Client) GetContainersUUID(params *GetContainersUUIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetContainersUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetContainersUUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetContainersUUID",
		Method:             "GET",
		PathPattern:        "/containers/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetContainersUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetContainersUUIDOK), nil

}

/*
GetContainersUUIDVolumesVolumeUUID gets container volume details

Get container volume details
*/
func (a *Client) GetContainersUUIDVolumesVolumeUUID(params *GetContainersUUIDVolumesVolumeUUIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetContainersUUIDVolumesVolumeUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetContainersUUIDVolumesVolumeUUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetContainersUUIDVolumesVolumeUUID",
		Method:             "GET",
		PathPattern:        "/containers/{uuid}/volumes/{volume_uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetContainersUUIDVolumesVolumeUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetContainersUUIDVolumesVolumeUUIDOK), nil

}

/*
PostContainers creates a container

Create a container
*/
func (a *Client) PostContainers(params *PostContainersParams, authInfo runtime.ClientAuthInfoWriter) (*PostContainersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostContainersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostContainers",
		Method:             "POST",
		PathPattern:        "/containers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostContainersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostContainersOK), nil

}

/*
PostContainersList lists containers for cluster

Get the list of containers
*/
func (a *Client) PostContainersList(params *PostContainersListParams, authInfo runtime.ClientAuthInfoWriter) (*PostContainersListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostContainersListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostContainersList",
		Method:             "POST",
		PathPattern:        "/containers/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostContainersListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostContainersListOK), nil

}

/*
PostContainersVolumesList lists volumes used for containers in cluster

Get the list of volumes for containers
*/
func (a *Client) PostContainersVolumesList(params *PostContainersVolumesListParams, authInfo runtime.ClientAuthInfoWriter) (*PostContainersVolumesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostContainersVolumesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostContainersVolumesList",
		Method:             "POST",
		PathPattern:        "/containers/volumes/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostContainersVolumesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostContainersVolumesListOK), nil

}

/*
PutContainersUUID updates container details

Update container details e.g. state
*/
func (a *Client) PutContainersUUID(params *PutContainersUUIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutContainersUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutContainersUUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutContainersUUID",
		Method:             "PUT",
		PathPattern:        "/containers/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutContainersUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutContainersUUIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
