package category

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new category API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for category API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteCategoriesName deletes a category

Delete a category
*/
func (a *Client) DeleteCategoriesName(params *DeleteCategoriesNameParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCategoriesNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCategoriesNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteCategoriesName",
		Method:             "DELETE",
		PathPattern:        "/categories/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCategoriesNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteCategoriesNameOK), nil

}

/*
DeleteCategoriesNameValue deletes a category value

Delete a category value
*/
func (a *Client) DeleteCategoriesNameValue(params *DeleteCategoriesNameValueParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCategoriesNameValueOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCategoriesNameValueParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteCategoriesNameValue",
		Method:             "DELETE",
		PathPattern:        "/categories/{name}/{value}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCategoriesNameValueReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteCategoriesNameValueOK), nil

}

/*
GetCategoriesName gets a category

Get a category
*/
func (a *Client) GetCategoriesName(params *GetCategoriesNameParams, authInfo runtime.ClientAuthInfoWriter) (*GetCategoriesNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCategoriesNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCategoriesName",
		Method:             "GET",
		PathPattern:        "/categories/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCategoriesNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCategoriesNameOK), nil

}

/*
GetCategoriesNameValue gets a category value

Get a category value
*/
func (a *Client) GetCategoriesNameValue(params *GetCategoriesNameValueParams, authInfo runtime.ClientAuthInfoWriter) (*GetCategoriesNameValueOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCategoriesNameValueParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCategoriesNameValue",
		Method:             "GET",
		PathPattern:        "/categories/{name}/{value}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCategoriesNameValueReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCategoriesNameValueOK), nil

}

/*
PostCategories creates a category

Create a category
*/
func (a *Client) PostCategories(params *PostCategoriesParams, authInfo runtime.ClientAuthInfoWriter) (*PostCategoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCategoriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCategories",
		Method:             "POST",
		PathPattern:        "/categories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCategoriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostCategoriesOK), nil

}

/*
PostCategoriesList gets categories

Get the list of categories
*/
func (a *Client) PostCategoriesList(params *PostCategoriesListParams, authInfo runtime.ClientAuthInfoWriter) (*PostCategoriesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCategoriesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCategoriesList",
		Method:             "POST",
		PathPattern:        "/categories/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCategoriesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostCategoriesListOK), nil

}

/*
PutCategoriesName updates a category

Update a category
*/
func (a *Client) PutCategoriesName(params *PutCategoriesNameParams, authInfo runtime.ClientAuthInfoWriter) (*PutCategoriesNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCategoriesNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutCategoriesName",
		Method:             "PUT",
		PathPattern:        "/categories/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutCategoriesNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutCategoriesNameOK), nil

}

/*
PutCategoriesNameValue updates an existing category

Update an existing category
*/
func (a *Client) PutCategoriesNameValue(params *PutCategoriesNameValueParams, authInfo runtime.ClientAuthInfoWriter) (*PutCategoriesNameValueOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCategoriesNameValueParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutCategoriesNameValue",
		Method:             "PUT",
		PathPattern:        "/categories/{name}/{value}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutCategoriesNameValueReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutCategoriesNameValueOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
