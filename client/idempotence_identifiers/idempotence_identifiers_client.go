package idempotence_identifiers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new idempotence identifiers API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for idempotence identifiers API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteIdempotenceIdentifiersClientIdentifier deletes a idempotence identifier object

Delete a idempotence identifier object
*/
func (a *Client) DeleteIdempotenceIdentifiersClientIdentifier(params *DeleteIdempotenceIdentifiersClientIdentifierParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteIdempotenceIdentifiersClientIdentifierOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIdempotenceIdentifiersClientIdentifierParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteIdempotenceIdentifiersClientIdentifier",
		Method:             "DELETE",
		PathPattern:        "/idempotence_identifiers/{client_identifier}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIdempotenceIdentifiersClientIdentifierReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteIdempotenceIdentifiersClientIdentifierOK), nil

}

/*
GetIdempotenceIdentifiersClientIdentifier gets a idempotence identifier object

Get a idempotence identifier object
*/
func (a *Client) GetIdempotenceIdentifiersClientIdentifier(params *GetIdempotenceIdentifiersClientIdentifierParams, authInfo runtime.ClientAuthInfoWriter) (*GetIdempotenceIdentifiersClientIdentifierOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIdempotenceIdentifiersClientIdentifierParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIdempotenceIdentifiersClientIdentifier",
		Method:             "GET",
		PathPattern:        "/idempotence_identifiers/{client_identifier}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIdempotenceIdentifiersClientIdentifierReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIdempotenceIdentifiersClientIdentifierOK), nil

}

/*
PostIdempotenceIdentifiers creates a idempotence identifier

Creates a idempotence identifier
*/
func (a *Client) PostIdempotenceIdentifiers(params *PostIdempotenceIdentifiersParams, authInfo runtime.ClientAuthInfoWriter) (*PostIdempotenceIdentifiersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIdempotenceIdentifiersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIdempotenceIdentifiers",
		Method:             "POST",
		PathPattern:        "/idempotence_identifiers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIdempotenceIdentifiersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostIdempotenceIdentifiersOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
