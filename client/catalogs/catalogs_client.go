package catalogs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new catalogs API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for catalogs API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteCatalogItemsUUID deletes catalog item

Delete a catalog item
*/
func (a *Client) DeleteCatalogItemsUUID(params *DeleteCatalogItemsUUIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCatalogItemsUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCatalogItemsUUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteCatalogItemsUUID",
		Method:             "DELETE",
		PathPattern:        "/catalog_items/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCatalogItemsUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteCatalogItemsUUIDOK), nil

}

/*
GetCatalogItemsUUID gets catalog item

Get details for a catalog item
*/
func (a *Client) GetCatalogItemsUUID(params *GetCatalogItemsUUIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetCatalogItemsUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCatalogItemsUUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCatalogItemsUUID",
		Method:             "GET",
		PathPattern:        "/catalog_items/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCatalogItemsUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCatalogItemsUUIDOK), nil

}

/*
PostCatalogItems creates catalog item

Create a catalog item
*/
func (a *Client) PostCatalogItems(params *PostCatalogItemsParams, authInfo runtime.ClientAuthInfoWriter) (*PostCatalogItemsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCatalogItemsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCatalogItems",
		Method:             "POST",
		PathPattern:        "/catalog_items",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCatalogItemsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostCatalogItemsOK), nil

}

/*
PostCatalogItemsList gets catalog items

Get all items in catalog
*/
func (a *Client) PostCatalogItemsList(params *PostCatalogItemsListParams, authInfo runtime.ClientAuthInfoWriter) (*PostCatalogItemsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCatalogItemsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCatalogItemsList",
		Method:             "POST",
		PathPattern:        "/catalog_items/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCatalogItemsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostCatalogItemsListOK), nil

}

/*
PutCatalogItemsUUID updates catalog item

Modify catalog item
*/
func (a *Client) PutCatalogItemsUUID(params *PutCatalogItemsUUIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutCatalogItemsUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCatalogItemsUUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutCatalogItemsUUID",
		Method:             "PUT",
		PathPattern:        "/catalog_items/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutCatalogItemsUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutCatalogItemsUUIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
