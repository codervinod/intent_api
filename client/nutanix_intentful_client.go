package client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/intent_api/client/availability_zone"
	"github.com/intent_api/client/batch"
	"github.com/intent_api/client/catalogs"
	"github.com/intent_api/client/category"
	"github.com/intent_api/client/clusters"
	"github.com/intent_api/client/containers"
	"github.com/intent_api/client/data"
	"github.com/intent_api/client/docker_registry"
	"github.com/intent_api/client/extension"
	"github.com/intent_api/client/groups"
	"github.com/intent_api/client/hosts"
	"github.com/intent_api/client/idempotence_identifiers"
	"github.com/intent_api/client/images"
	"github.com/intent_api/client/job"
	"github.com/intent_api/client/network"
	"github.com/intent_api/client/oauth"
	"github.com/intent_api/client/packet_processor_chain"
	"github.com/intent_api/client/permission"
	"github.com/intent_api/client/policy"
	"github.com/intent_api/client/project"
	"github.com/intent_api/client/role"
	"github.com/intent_api/client/user"
	"github.com/intent_api/client/versions"
	"github.com/intent_api/client/vm"
	"github.com/intent_api/client/vm_backup"
	"github.com/intent_api/client/vm_backup_profile"
	"github.com/intent_api/client/vm_snapshot"
	"github.com/intent_api/client/volume_group"
	"github.com/intent_api/client/volume_group_backup"
	"github.com/intent_api/client/volume_group_snapshot"
	"github.com/intent_api/client/webhook"
	"github.com/intent_api/client/workflow"
)

// Default nutanix intentful HTTP client.
var Default = NewHTTPClient(nil)

// NewHTTPClient creates a new nutanix intentful HTTP client.
func NewHTTPClient(formats strfmt.Registry) *NutanixIntentful {
	if formats == nil {
		formats = strfmt.Default
	}
	transport := httptransport.New("localhost", "/api/nutanix/v3", []string{"https"})
	return New(transport, formats)
}

// New creates a new nutanix intentful client
func New(transport runtime.ClientTransport, formats strfmt.Registry) *NutanixIntentful {
	cli := new(NutanixIntentful)
	cli.Transport = transport

	cli.AvailabilityZone = availability_zone.New(transport, formats)

	cli.Batch = batch.New(transport, formats)

	cli.Catalogs = catalogs.New(transport, formats)

	cli.Category = category.New(transport, formats)

	cli.Clusters = clusters.New(transport, formats)

	cli.Containers = containers.New(transport, formats)

	cli.Data = data.New(transport, formats)

	cli.DockerRegistry = docker_registry.New(transport, formats)

	cli.Extension = extension.New(transport, formats)

	cli.Groups = groups.New(transport, formats)

	cli.Hosts = hosts.New(transport, formats)

	cli.IdempotenceIdentifiers = idempotence_identifiers.New(transport, formats)

	cli.Images = images.New(transport, formats)

	cli.Job = job.New(transport, formats)

	cli.Network = network.New(transport, formats)

	cli.Oauth = oauth.New(transport, formats)

	cli.PacketProcessorChain = packet_processor_chain.New(transport, formats)

	cli.Permission = permission.New(transport, formats)

	cli.Policy = policy.New(transport, formats)

	cli.Project = project.New(transport, formats)

	cli.Role = role.New(transport, formats)

	cli.User = user.New(transport, formats)

	cli.Versions = versions.New(transport, formats)

	cli.VM = vm.New(transport, formats)

	cli.VMBackup = vm_backup.New(transport, formats)

	cli.VMBackupProfile = vm_backup_profile.New(transport, formats)

	cli.VMSnapshot = vm_snapshot.New(transport, formats)

	cli.VolumeGroup = volume_group.New(transport, formats)

	cli.VolumeGroupBackup = volume_group_backup.New(transport, formats)

	cli.VolumeGroupSnapshot = volume_group_snapshot.New(transport, formats)

	cli.Webhook = webhook.New(transport, formats)

	cli.Workflow = workflow.New(transport, formats)

	return cli
}

// NutanixIntentful is a client for nutanix intentful
type NutanixIntentful struct {
	AvailabilityZone *availability_zone.Client

	Batch *batch.Client

	Catalogs *catalogs.Client

	Category *category.Client

	Clusters *clusters.Client

	Containers *containers.Client

	Data *data.Client

	DockerRegistry *docker_registry.Client

	Extension *extension.Client

	Groups *groups.Client

	Hosts *hosts.Client

	IdempotenceIdentifiers *idempotence_identifiers.Client

	Images *images.Client

	Job *job.Client

	Network *network.Client

	Oauth *oauth.Client

	PacketProcessorChain *packet_processor_chain.Client

	Permission *permission.Client

	Policy *policy.Client

	Project *project.Client

	Role *role.Client

	User *user.Client

	Versions *versions.Client

	VM *vm.Client

	VMBackup *vm_backup.Client

	VMBackupProfile *vm_backup_profile.Client

	VMSnapshot *vm_snapshot.Client

	VolumeGroup *volume_group.Client

	VolumeGroupBackup *volume_group_backup.Client

	VolumeGroupSnapshot *volume_group_snapshot.Client

	Webhook *webhook.Client

	Workflow *workflow.Client

	Transport runtime.ClientTransport
}

// SetTransport changes the transport on the client and all its subresources
func (c *NutanixIntentful) SetTransport(transport runtime.ClientTransport) {
	c.Transport = transport

	c.AvailabilityZone.SetTransport(transport)

	c.Batch.SetTransport(transport)

	c.Catalogs.SetTransport(transport)

	c.Category.SetTransport(transport)

	c.Clusters.SetTransport(transport)

	c.Containers.SetTransport(transport)

	c.Data.SetTransport(transport)

	c.DockerRegistry.SetTransport(transport)

	c.Extension.SetTransport(transport)

	c.Groups.SetTransport(transport)

	c.Hosts.SetTransport(transport)

	c.IdempotenceIdentifiers.SetTransport(transport)

	c.Images.SetTransport(transport)

	c.Job.SetTransport(transport)

	c.Network.SetTransport(transport)

	c.Oauth.SetTransport(transport)

	c.PacketProcessorChain.SetTransport(transport)

	c.Permission.SetTransport(transport)

	c.Policy.SetTransport(transport)

	c.Project.SetTransport(transport)

	c.Role.SetTransport(transport)

	c.User.SetTransport(transport)

	c.Versions.SetTransport(transport)

	c.VM.SetTransport(transport)

	c.VMBackup.SetTransport(transport)

	c.VMBackupProfile.SetTransport(transport)

	c.VMSnapshot.SetTransport(transport)

	c.VolumeGroup.SetTransport(transport)

	c.VolumeGroupBackup.SetTransport(transport)

	c.VolumeGroupSnapshot.SetTransport(transport)

	c.Webhook.SetTransport(transport)

	c.Workflow.SetTransport(transport)

}
