package docker_registry

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new docker registry API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for docker registry API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteDockerRegistriesUUID deletes a docker registry

Deletes a Docker registry
*/
func (a *Client) DeleteDockerRegistriesUUID(params *DeleteDockerRegistriesUUIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteDockerRegistriesUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDockerRegistriesUUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteDockerRegistriesUUID",
		Method:             "DELETE",
		PathPattern:        "/docker_registries/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteDockerRegistriesUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteDockerRegistriesUUIDOK), nil

}

/*
GetDockerRegistriesUUID retrieves a docker registry

Retrieve a docker registry
*/
func (a *Client) GetDockerRegistriesUUID(params *GetDockerRegistriesUUIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetDockerRegistriesUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDockerRegistriesUUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDockerRegistriesUUID",
		Method:             "GET",
		PathPattern:        "/docker_registries/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDockerRegistriesUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDockerRegistriesUUIDOK), nil

}

/*
PostDockerRegistries creates a docker registry

Create a docker registry
*/
func (a *Client) PostDockerRegistries(params *PostDockerRegistriesParams, authInfo runtime.ClientAuthInfoWriter) (*PostDockerRegistriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDockerRegistriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDockerRegistries",
		Method:             "POST",
		PathPattern:        "/docker_registries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDockerRegistriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostDockerRegistriesOK), nil

}

/*
PostDockerRegistriesList lists all docker registries

List all docker registries
*/
func (a *Client) PostDockerRegistriesList(params *PostDockerRegistriesListParams, authInfo runtime.ClientAuthInfoWriter) (*PostDockerRegistriesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDockerRegistriesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDockerRegistriesList",
		Method:             "POST",
		PathPattern:        "/docker_registries/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDockerRegistriesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostDockerRegistriesListOK), nil

}

/*
PostDockerRegistriesSearchList searches docker containers for specified registry

Searches docker containers for specified registry
*/
func (a *Client) PostDockerRegistriesSearchList(params *PostDockerRegistriesSearchListParams, authInfo runtime.ClientAuthInfoWriter) (*PostDockerRegistriesSearchListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDockerRegistriesSearchListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDockerRegistriesSearchList",
		Method:             "POST",
		PathPattern:        "/docker_registries/search/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDockerRegistriesSearchListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostDockerRegistriesSearchListOK), nil

}

/*
PostDockerRegistriesUUIDSearchList searches docker containers for specified registry

Searches docker containers for specified registry
*/
func (a *Client) PostDockerRegistriesUUIDSearchList(params *PostDockerRegistriesUUIDSearchListParams, authInfo runtime.ClientAuthInfoWriter) (*PostDockerRegistriesUUIDSearchListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDockerRegistriesUUIDSearchListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDockerRegistriesUUIDSearchList",
		Method:             "POST",
		PathPattern:        "/docker_registries/{uuid}/search/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDockerRegistriesUUIDSearchListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostDockerRegistriesUUIDSearchListOK), nil

}

/*
PutDockerRegistriesUUID updates a docker registry

Update a docker registry
*/
func (a *Client) PutDockerRegistriesUUID(params *PutDockerRegistriesUUIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutDockerRegistriesUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDockerRegistriesUUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutDockerRegistriesUUID",
		Method:             "PUT",
		PathPattern:        "/docker_registries/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutDockerRegistriesUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutDockerRegistriesUUIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
