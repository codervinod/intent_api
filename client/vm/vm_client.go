package vm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new vm API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for vm API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteVmsUUID deletes VM

Delete a VM given its uuid
*/
func (a *Client) DeleteVmsUUID(params *DeleteVmsUUIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteVmsUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVmsUUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteVmsUUID",
		Method:             "DELETE",
		PathPattern:        "/vms/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteVmsUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteVmsUUIDOK), nil

}

/*
GetVmsUUID gets VM

Given a UUID, returns a VM definition
*/
func (a *Client) GetVmsUUID(params *GetVmsUUIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetVmsUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVmsUUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVmsUUID",
		Method:             "GET",
		PathPattern:        "/vms/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVmsUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVmsUUIDOK), nil

}

/*
PostVms creates VM

Given an intentful spec, creates a VM with associated metadata
*/
func (a *Client) PostVms(params *PostVmsParams, authInfo runtime.ClientAuthInfoWriter) (*PostVmsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostVmsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostVms",
		Method:             "POST",
		PathPattern:        "/vms",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostVmsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostVmsOK), nil

}

/*
PostVmsList lists the vms

List the VMs with associated metadata
*/
func (a *Client) PostVmsList(params *PostVmsListParams, authInfo runtime.ClientAuthInfoWriter) (*PostVmsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostVmsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostVmsList",
		Method:             "POST",
		PathPattern:        "/vms/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostVmsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostVmsListOK), nil

}

/*
PutVmsUUID updates VM

Given an intenful spec and VM uuid, update VM
*/
func (a *Client) PutVmsUUID(params *PutVmsUUIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutVmsUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutVmsUUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutVmsUUID",
		Method:             "PUT",
		PathPattern:        "/vms/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutVmsUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutVmsUUIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
