package role

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/intent_api/models"
)

// NewPutRolesUUIDParams creates a new PutRolesUUIDParams object
// with the default values initialized.
func NewPutRolesUUIDParams() *PutRolesUUIDParams {
	var ()
	return &PutRolesUUIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPutRolesUUIDParamsWithTimeout creates a new PutRolesUUIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPutRolesUUIDParamsWithTimeout(timeout time.Duration) *PutRolesUUIDParams {
	var ()
	return &PutRolesUUIDParams{

		timeout: timeout,
	}
}

// NewPutRolesUUIDParamsWithContext creates a new PutRolesUUIDParams object
// with the default values initialized, and the ability to set a context for a request
func NewPutRolesUUIDParamsWithContext(ctx context.Context) *PutRolesUUIDParams {
	var ()
	return &PutRolesUUIDParams{

		Context: ctx,
	}
}

/*PutRolesUUIDParams contains all the parameters to send to the API endpoint
for the put roles UUID operation typically these are written to a http.Request
*/
type PutRolesUUIDParams struct {

	/*Body
	  A Role object

	*/
	Body *models.Role
	/*UUID
	  ID of role that needs to be updated

	*/
	UUID string

	timeout time.Duration
	Context context.Context
}

// WithTimeout adds the timeout to the put roles UUID params
func (o *PutRolesUUIDParams) WithTimeout(timeout time.Duration) *PutRolesUUIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the put roles UUID params
func (o *PutRolesUUIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the put roles UUID params
func (o *PutRolesUUIDParams) WithContext(ctx context.Context) *PutRolesUUIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the put roles UUID params
func (o *PutRolesUUIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithBody adds the body to the put roles UUID params
func (o *PutRolesUUIDParams) WithBody(body *models.Role) *PutRolesUUIDParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the put roles UUID params
func (o *PutRolesUUIDParams) SetBody(body *models.Role) {
	o.Body = body
}

// WithUUID adds the uuid to the put roles UUID params
func (o *PutRolesUUIDParams) WithUUID(uuid string) *PutRolesUUIDParams {
	o.SetUUID(uuid)
	return o
}

// SetUUID adds the uuid to the put roles UUID params
func (o *PutRolesUUIDParams) SetUUID(uuid string) {
	o.UUID = uuid
}

// WriteToRequest writes these params to a swagger request
func (o *PutRolesUUIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.Body == nil {
		o.Body = new(models.Role)
	}

	if err := r.SetBodyParam(o.Body); err != nil {
		return err
	}

	// path param uuid
	if err := r.SetPathParam("uuid", o.UUID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
