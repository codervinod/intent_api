package role

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new role API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for role API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteRolesUUID deletes a role object

Delete a role object
*/
func (a *Client) DeleteRolesUUID(params *DeleteRolesUUIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteRolesUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRolesUUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteRolesUUID",
		Method:             "DELETE",
		PathPattern:        "/roles/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRolesUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteRolesUUIDOK), nil

}

/*
GetRolesUUID gets a role object

Get a role object
*/
func (a *Client) GetRolesUUID(params *GetRolesUUIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetRolesUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRolesUUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRolesUUID",
		Method:             "GET",
		PathPattern:        "/roles/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRolesUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRolesUUIDOK), nil

}

/*
PostRoles creates a role

Creates a role
*/
func (a *Client) PostRoles(params *PostRolesParams, authInfo runtime.ClientAuthInfoWriter) (*PostRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRolesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRoles",
		Method:             "POST",
		PathPattern:        "/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostRolesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRolesOK), nil

}

/*
PostRolesList gets roles

Get roles
*/
func (a *Client) PostRolesList(params *PostRolesListParams, authInfo runtime.ClientAuthInfoWriter) (*PostRolesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRolesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRolesList",
		Method:             "POST",
		PathPattern:        "/roles/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostRolesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRolesListOK), nil

}

/*
PutRolesUUID updates role

Update role
*/
func (a *Client) PutRolesUUID(params *PutRolesUUIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutRolesUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRolesUUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutRolesUUID",
		Method:             "PUT",
		PathPattern:        "/roles/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutRolesUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutRolesUUIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
