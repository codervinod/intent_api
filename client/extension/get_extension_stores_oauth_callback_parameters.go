package extension

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetExtensionStoresOauthCallbackParams creates a new GetExtensionStoresOauthCallbackParams object
// with the default values initialized.
func NewGetExtensionStoresOauthCallbackParams() *GetExtensionStoresOauthCallbackParams {
	var ()
	return &GetExtensionStoresOauthCallbackParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetExtensionStoresOauthCallbackParamsWithTimeout creates a new GetExtensionStoresOauthCallbackParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetExtensionStoresOauthCallbackParamsWithTimeout(timeout time.Duration) *GetExtensionStoresOauthCallbackParams {
	var ()
	return &GetExtensionStoresOauthCallbackParams{

		timeout: timeout,
	}
}

// NewGetExtensionStoresOauthCallbackParamsWithContext creates a new GetExtensionStoresOauthCallbackParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetExtensionStoresOauthCallbackParamsWithContext(ctx context.Context) *GetExtensionStoresOauthCallbackParams {
	var ()
	return &GetExtensionStoresOauthCallbackParams{

		Context: ctx,
	}
}

/*GetExtensionStoresOauthCallbackParams contains all the parameters to send to the API endpoint
for the get extension stores oauth callback operation typically these are written to a http.Request
*/
type GetExtensionStoresOauthCallbackParams struct {

	/*Code*/
	Code string
	/*State*/
	State *string

	timeout time.Duration
	Context context.Context
}

// WithTimeout adds the timeout to the get extension stores oauth callback params
func (o *GetExtensionStoresOauthCallbackParams) WithTimeout(timeout time.Duration) *GetExtensionStoresOauthCallbackParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get extension stores oauth callback params
func (o *GetExtensionStoresOauthCallbackParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get extension stores oauth callback params
func (o *GetExtensionStoresOauthCallbackParams) WithContext(ctx context.Context) *GetExtensionStoresOauthCallbackParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get extension stores oauth callback params
func (o *GetExtensionStoresOauthCallbackParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithCode adds the code to the get extension stores oauth callback params
func (o *GetExtensionStoresOauthCallbackParams) WithCode(code string) *GetExtensionStoresOauthCallbackParams {
	o.SetCode(code)
	return o
}

// SetCode adds the code to the get extension stores oauth callback params
func (o *GetExtensionStoresOauthCallbackParams) SetCode(code string) {
	o.Code = code
}

// WithState adds the state to the get extension stores oauth callback params
func (o *GetExtensionStoresOauthCallbackParams) WithState(state *string) *GetExtensionStoresOauthCallbackParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the get extension stores oauth callback params
func (o *GetExtensionStoresOauthCallbackParams) SetState(state *string) {
	o.State = state
}

// WriteToRequest writes these params to a swagger request
func (o *GetExtensionStoresOauthCallbackParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	// query param code
	qrCode := o.Code
	qCode := qrCode
	if qCode != "" {
		if err := r.SetQueryParam("code", qCode); err != nil {
			return err
		}
	}

	if o.State != nil {

		// query param state
		var qrState string
		if o.State != nil {
			qrState = *o.State
		}
		qState := qrState
		if qState != "" {
			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
