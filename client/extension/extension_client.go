package extension

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new extension API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for extension API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteExtensionsUUID deletes an existing extension

Delete existing extension and its information
*/
func (a *Client) DeleteExtensionsUUID(params *DeleteExtensionsUUIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteExtensionsUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteExtensionsUUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteExtensionsUUID",
		Method:             "DELETE",
		PathPattern:        "/extensions/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteExtensionsUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteExtensionsUUIDOK), nil

}

/*
GetAvailableExtensionsImagesUUID useds to fetch available extension image from uuid

Get available extension image from uuid
*/
func (a *Client) GetAvailableExtensionsImagesUUID(params *GetAvailableExtensionsImagesUUIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAvailableExtensionsImagesUUIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAvailableExtensionsImagesUUID",
		Method:             "GET",
		PathPattern:        "/available_extensions/images/{uuid}",
		ProducesMediaTypes: []string{"image/bmp", "image/gif", "image/jpeg", "image/png"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAvailableExtensionsImagesUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetAvailableExtensionsUUID useds to fetch available extension details from extension store

Get available extension information from extension store
*/
func (a *Client) GetAvailableExtensionsUUID(params *GetAvailableExtensionsUUIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetAvailableExtensionsUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAvailableExtensionsUUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAvailableExtensionsUUID",
		Method:             "GET",
		PathPattern:        "/available_extensions/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAvailableExtensionsUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAvailableExtensionsUUIDOK), nil

}

/*
GetExtensionStoresLogin oauth2s login to idp

Oauth2
*/
func (a *Client) GetExtensionStoresLogin(params *GetExtensionStoresLoginParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetExtensionStoresLoginParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetExtensionStoresLogin",
		Method:             "GET",
		PathPattern:        "/extension_stores/login",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetExtensionStoresLoginReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetExtensionStoresOauthCallback oauth2s callback from ID p

Oauth2 callback from IDP
*/
func (a *Client) GetExtensionStoresOauthCallback(params *GetExtensionStoresOauthCallbackParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetExtensionStoresOauthCallbackParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetExtensionStoresOauthCallback",
		Method:             "GET",
		PathPattern:        "/extension_stores/oauth/callback",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetExtensionStoresOauthCallbackReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetExtensionsUUID useds to fetch installed extension details

Get extension information
*/
func (a *Client) GetExtensionsUUID(params *GetExtensionsUUIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetExtensionsUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetExtensionsUUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetExtensionsUUID",
		Method:             "GET",
		PathPattern:        "/extensions/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetExtensionsUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetExtensionsUUIDOK), nil

}

/*
PostAvailableExtensionsList gets list of available extensions

Retrieve list of available extensions
*/
func (a *Client) PostAvailableExtensionsList(params *PostAvailableExtensionsListParams, authInfo runtime.ClientAuthInfoWriter) (*PostAvailableExtensionsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAvailableExtensionsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAvailableExtensionsList",
		Method:             "POST",
		PathPattern:        "/available_extensions/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAvailableExtensionsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAvailableExtensionsListOK), nil

}

/*
PostExtensions this is used to install new extension

Install new extension
*/
func (a *Client) PostExtensions(params *PostExtensionsParams, authInfo runtime.ClientAuthInfoWriter) (*PostExtensionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostExtensionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostExtensions",
		Method:             "POST",
		PathPattern:        "/extensions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostExtensionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostExtensionsOK), nil

}

/*
PostExtensionsList retrieves list of installed extensions

Retrieve list of installed extensions
*/
func (a *Client) PostExtensionsList(params *PostExtensionsListParams, authInfo runtime.ClientAuthInfoWriter) (*PostExtensionsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostExtensionsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostExtensionsList",
		Method:             "POST",
		PathPattern:        "/extensions/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostExtensionsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostExtensionsListOK), nil

}

/*
PutExtensionsUUID useds to update an extension with new version

Update extension
*/
func (a *Client) PutExtensionsUUID(params *PutExtensionsUUIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutExtensionsUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutExtensionsUUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutExtensionsUUID",
		Method:             "PUT",
		PathPattern:        "/extensions/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutExtensionsUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutExtensionsUUIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
