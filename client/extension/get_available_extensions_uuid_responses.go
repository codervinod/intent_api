package extension

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/intent_api/models"
)

// GetAvailableExtensionsUUIDReader is a Reader for the GetAvailableExtensionsUUID structure.
type GetAvailableExtensionsUUIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAvailableExtensionsUUIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetAvailableExtensionsUUIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewGetAvailableExtensionsUUIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetAvailableExtensionsUUIDDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	}
}

// NewGetAvailableExtensionsUUIDOK creates a GetAvailableExtensionsUUIDOK with default headers values
func NewGetAvailableExtensionsUUIDOK() *GetAvailableExtensionsUUIDOK {
	return &GetAvailableExtensionsUUIDOK{}
}

/*GetAvailableExtensionsUUIDOK handles this case with default header values.

Successful operation
*/
type GetAvailableExtensionsUUIDOK struct {
	Payload *models.AvailableExtensionIntentResponse
}

func (o *GetAvailableExtensionsUUIDOK) Error() string {
	return fmt.Sprintf("[GET /available_extensions/{uuid}][%d] getAvailableExtensionsUuidOK  %+v", 200, o.Payload)
}

func (o *GetAvailableExtensionsUUIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AvailableExtensionIntentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAvailableExtensionsUUIDNotFound creates a GetAvailableExtensionsUUIDNotFound with default headers values
func NewGetAvailableExtensionsUUIDNotFound() *GetAvailableExtensionsUUIDNotFound {
	return &GetAvailableExtensionsUUIDNotFound{}
}

/*GetAvailableExtensionsUUIDNotFound handles this case with default header values.

Extension does not exists
*/
type GetAvailableExtensionsUUIDNotFound struct {
	Payload *models.AvailableExtensionStatus
}

func (o *GetAvailableExtensionsUUIDNotFound) Error() string {
	return fmt.Sprintf("[GET /available_extensions/{uuid}][%d] getAvailableExtensionsUuidNotFound  %+v", 404, o.Payload)
}

func (o *GetAvailableExtensionsUUIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AvailableExtensionStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAvailableExtensionsUUIDDefault creates a GetAvailableExtensionsUUIDDefault with default headers values
func NewGetAvailableExtensionsUUIDDefault(code int) *GetAvailableExtensionsUUIDDefault {
	return &GetAvailableExtensionsUUIDDefault{
		_statusCode: code,
	}
}

/*GetAvailableExtensionsUUIDDefault handles this case with default header values.

Error
*/
type GetAvailableExtensionsUUIDDefault struct {
	_statusCode int

	Payload *models.AvailableExtensionStatus
}

// Code gets the status code for the get available extensions UUID default response
func (o *GetAvailableExtensionsUUIDDefault) Code() int {
	return o._statusCode
}

func (o *GetAvailableExtensionsUUIDDefault) Error() string {
	return fmt.Sprintf("[GET /available_extensions/{uuid}][%d] GetAvailableExtensionsUUID default  %+v", o._statusCode, o.Payload)
}

func (o *GetAvailableExtensionsUUIDDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AvailableExtensionStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
