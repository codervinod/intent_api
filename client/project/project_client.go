package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new project API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for project API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteProjectsUUID deletes a project

Deletes a project
*/
func (a *Client) DeleteProjectsUUID(params *DeleteProjectsUUIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteProjectsUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProjectsUUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteProjectsUUID",
		Method:             "DELETE",
		PathPattern:        "/projects/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteProjectsUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteProjectsUUIDOK), nil

}

/*
GetProjectsUUID retrieves specified project

Retrieves specified Project
*/
func (a *Client) GetProjectsUUID(params *GetProjectsUUIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetProjectsUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectsUUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetProjectsUUID",
		Method:             "GET",
		PathPattern:        "/projects/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProjectsUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetProjectsUUIDOK), nil

}

/*
PostProjects creates a project

Creaters a project
*/
func (a *Client) PostProjects(params *PostProjectsParams, authInfo runtime.ClientAuthInfoWriter) (*PostProjectsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostProjectsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostProjects",
		Method:             "POST",
		PathPattern:        "/projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostProjectsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostProjectsOK), nil

}

/*
PostProjectsList retrieves all projects

Retrieves all Projects
*/
func (a *Client) PostProjectsList(params *PostProjectsListParams, authInfo runtime.ClientAuthInfoWriter) (*PostProjectsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostProjectsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostProjectsList",
		Method:             "POST",
		PathPattern:        "/projects/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostProjectsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostProjectsListOK), nil

}

/*
PutProjectsUUID updates a project

Updates a project
*/
func (a *Client) PutProjectsUUID(params *PutProjectsUUIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutProjectsUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutProjectsUUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutProjectsUUID",
		Method:             "PUT",
		PathPattern:        "/projects/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutProjectsUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutProjectsUUIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
