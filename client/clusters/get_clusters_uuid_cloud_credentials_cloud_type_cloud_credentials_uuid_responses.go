package clusters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/codervinod/intent_api/models"
)

// GetClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUIDReader is a Reader for the GetClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUID structure.
type GetClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		result := NewGetClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUIDDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	}
}

// NewGetClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUIDOK creates a GetClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUIDOK with default headers values
func NewGetClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUIDOK() *GetClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUIDOK {
	return &GetClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUIDOK{}
}

/*GetClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUIDOK handles this case with default header values.

Request Succeeded
*/
type GetClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUIDOK struct {
	Payload *models.CloudCredentialsIntentResponse
}

func (o *GetClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUIDOK) Error() string {
	return fmt.Sprintf("[GET /clusters/{uuid}/cloud_credentials/{cloud_type}/{cloud_credentials_uuid}][%d] getClustersUuidCloudCredentialsCloudTypeCloudCredentialsUuidOK  %+v", 200, o.Payload)
}

func (o *GetClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CloudCredentialsIntentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUIDDefault creates a GetClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUIDDefault with default headers values
func NewGetClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUIDDefault(code int) *GetClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUIDDefault {
	return &GetClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUIDDefault{
		_statusCode: code,
	}
}

/*GetClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUIDDefault handles this case with default header values.

Internal Error
*/
type GetClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUIDDefault struct {
	_statusCode int

	Payload *models.CloudCredentialsStatus
}

// Code gets the status code for the get clusters UUID cloud credentials cloud type cloud credentials UUID default response
func (o *GetClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUIDDefault) Code() int {
	return o._statusCode
}

func (o *GetClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUIDDefault) Error() string {
	return fmt.Sprintf("[GET /clusters/{uuid}/cloud_credentials/{cloud_type}/{cloud_credentials_uuid}][%d] GetClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUID default  %+v", o._statusCode, o.Payload)
}

func (o *GetClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUIDDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CloudCredentialsStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
