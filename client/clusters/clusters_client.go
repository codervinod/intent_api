package clusters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new clusters API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for clusters API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteClustersUUIDCertificatesCaCertsCaName deletes the c a certificate

Delete the CA certificate specified by certificate authority name

*/
func (a *Client) DeleteClustersUUIDCertificatesCaCertsCaName(params *DeleteClustersUUIDCertificatesCaCertsCaNameParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteClustersUUIDCertificatesCaCertsCaNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClustersUUIDCertificatesCaCertsCaNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteClustersUUIDCertificatesCaCertsCaName",
		Method:             "DELETE",
		PathPattern:        "/clusters/{uuid}/certificates/ca_certs/{ca_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteClustersUUIDCertificatesCaCertsCaNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteClustersUUIDCertificatesCaCertsCaNameOK), nil

}

/*
DeleteClustersUUIDCertificatesClientAuth removes the c a chain for client authentication

Remove the CA chain for client authentication
*/
func (a *Client) DeleteClustersUUIDCertificatesClientAuth(params *DeleteClustersUUIDCertificatesClientAuthParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteClustersUUIDCertificatesClientAuthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClustersUUIDCertificatesClientAuthParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteClustersUUIDCertificatesClientAuth",
		Method:             "DELETE",
		PathPattern:        "/clusters/{uuid}/certificates/client_auth",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteClustersUUIDCertificatesClientAuthReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteClustersUUIDCertificatesClientAuthOK), nil

}

/*
DeleteClustersUUIDCertificatesSvmCertsNodeUUIDKmsUUID deletes the certificate on a service VM

Delete the certificate on a service VM
*/
func (a *Client) DeleteClustersUUIDCertificatesSvmCertsNodeUUIDKmsUUID(params *DeleteClustersUUIDCertificatesSvmCertsNodeUUIDKmsUUIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteClustersUUIDCertificatesSvmCertsNodeUUIDKmsUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClustersUUIDCertificatesSvmCertsNodeUUIDKmsUUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteClustersUUIDCertificatesSvmCertsNodeUUIDKmsUUID",
		Method:             "DELETE",
		PathPattern:        "/clusters/{uuid}/certificates/svm_certs/{node_uuid}/{kms_uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteClustersUUIDCertificatesSvmCertsNodeUUIDKmsUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteClustersUUIDCertificatesSvmCertsNodeUUIDKmsUUIDOK), nil

}

/*
DeleteClustersUUIDCloudCredentialsCloudType deletes all cloud credentials

Delete all cloud credentials
*/
func (a *Client) DeleteClustersUUIDCloudCredentialsCloudType(params *DeleteClustersUUIDCloudCredentialsCloudTypeParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteClustersUUIDCloudCredentialsCloudTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClustersUUIDCloudCredentialsCloudTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteClustersUUIDCloudCredentialsCloudType",
		Method:             "DELETE",
		PathPattern:        "/clusters/{uuid}/cloud_credentials/{cloud_type}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteClustersUUIDCloudCredentialsCloudTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteClustersUUIDCloudCredentialsCloudTypeOK), nil

}

/*
DeleteClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUID deletes the specified cluster cloud credentials

Delete the specified cluster cloud credentials
*/
func (a *Client) DeleteClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUID(params *DeleteClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUID",
		Method:             "DELETE",
		PathPattern:        "/clusters/{uuid}/cloud_credentials/{cloud_type}/{cloud_credentials_uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUIDOK), nil

}

/*
DeleteClustersUUIDDirectoryServicesDirectoryServiceUUID deletes the directory service configuration

Deletes the directory service configuration
*/
func (a *Client) DeleteClustersUUIDDirectoryServicesDirectoryServiceUUID(params *DeleteClustersUUIDDirectoryServicesDirectoryServiceUUIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteClustersUUIDDirectoryServicesDirectoryServiceUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClustersUUIDDirectoryServicesDirectoryServiceUUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteClustersUUIDDirectoryServicesDirectoryServiceUUID",
		Method:             "DELETE",
		PathPattern:        "/clusters/{uuid}/directory_services/{directory_service_uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteClustersUUIDDirectoryServicesDirectoryServiceUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteClustersUUIDDirectoryServicesDirectoryServiceUUIDOK), nil

}

/*
DeleteClustersUUIDRemoteConnectionsDisconnectClusterUUID disconnects from the specified remote cluster

Disconnect from the specified remote cluster
*/
func (a *Client) DeleteClustersUUIDRemoteConnectionsDisconnectClusterUUID(params *DeleteClustersUUIDRemoteConnectionsDisconnectClusterUUIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteClustersUUIDRemoteConnectionsDisconnectClusterUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClustersUUIDRemoteConnectionsDisconnectClusterUUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteClustersUUIDRemoteConnectionsDisconnectClusterUUID",
		Method:             "DELETE",
		PathPattern:        "/clusters/{uuid}/remote_connections/disconnect/{cluster_uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteClustersUUIDRemoteConnectionsDisconnectClusterUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteClustersUUIDRemoteConnectionsDisconnectClusterUUIDOK), nil

}

/*
GetClustersMulticlusterConfigUUID gets multicluster configuration task status

Get multicluster configuration task status
*/
func (a *Client) GetClustersMulticlusterConfigUUID(params *GetClustersMulticlusterConfigUUIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetClustersMulticlusterConfigUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClustersMulticlusterConfigUUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetClustersMulticlusterConfigUUID",
		Method:             "GET",
		PathPattern:        "/clusters/multicluster_config/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetClustersMulticlusterConfigUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetClustersMulticlusterConfigUUIDOK), nil

}

/*
GetClustersUUID gets cluster

Return the cluster definition by the given uuid
*/
func (a *Client) GetClustersUUID(params *GetClustersUUIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetClustersUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClustersUUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetClustersUUID",
		Method:             "GET",
		PathPattern:        "/clusters/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetClustersUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetClustersUUIDOK), nil

}

/*
GetClustersUUIDCertificatesCsrs downloads c s rs from cluster

Download Certificate Signing Requests from cluster
*/
func (a *Client) GetClustersUUIDCertificatesCsrs(params *GetClustersUUIDCertificatesCsrsParams, authInfo runtime.ClientAuthInfoWriter) (*GetClustersUUIDCertificatesCsrsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClustersUUIDCertificatesCsrsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetClustersUUIDCertificatesCsrs",
		Method:             "GET",
		PathPattern:        "/clusters/{uuid}/certificates/csrs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetClustersUUIDCertificatesCsrsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetClustersUUIDCertificatesCsrsOK), nil

}

/*
GetClustersUUIDCertificatesCsrsNodeIP downloads c s r from a discovered node

Download Certificate Signing Request from a discovered node
*/
func (a *Client) GetClustersUUIDCertificatesCsrsNodeIP(params *GetClustersUUIDCertificatesCsrsNodeIPParams, authInfo runtime.ClientAuthInfoWriter) (*GetClustersUUIDCertificatesCsrsNodeIPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClustersUUIDCertificatesCsrsNodeIPParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetClustersUUIDCertificatesCsrsNodeIP",
		Method:             "GET",
		PathPattern:        "/clusters/{uuid}/certificates/csrs/{node_ip}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetClustersUUIDCertificatesCsrsNodeIPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetClustersUUIDCertificatesCsrsNodeIPOK), nil

}

/*
GetClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUID gets cluster cloud credentials with the provided name

Get cluster cloud credentials with the provided name
*/
func (a *Client) GetClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUID(params *GetClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUID",
		Method:             "GET",
		PathPattern:        "/clusters/{uuid}/cloud_credentials/{cloud_type}/{cloud_credentials_uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUIDOK), nil

}

/*
GetClustersUUIDDirectoryServicesDirectoryServiceUUID gets the directory service configuration

Gets the directory service configuration
*/
func (a *Client) GetClustersUUIDDirectoryServicesDirectoryServiceUUID(params *GetClustersUUIDDirectoryServicesDirectoryServiceUUIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetClustersUUIDDirectoryServicesDirectoryServiceUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClustersUUIDDirectoryServicesDirectoryServiceUUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetClustersUUIDDirectoryServicesDirectoryServiceUUID",
		Method:             "GET",
		PathPattern:        "/clusters/{uuid}/directory_services/{directory_service_uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetClustersUUIDDirectoryServicesDirectoryServiceUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetClustersUUIDDirectoryServicesDirectoryServiceUUIDOK), nil

}

/*
PostClustersList gets clusters

Get clusters by the provided filters
*/
func (a *Client) PostClustersList(params *PostClustersListParams, authInfo runtime.ClientAuthInfoWriter) (*PostClustersListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostClustersListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostClustersList",
		Method:             "POST",
		PathPattern:        "/clusters/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostClustersListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostClustersListOK), nil

}

/*
PostClustersMulticlusterConfig applies multicluster configuration from prism central

Apply multicluster configuration from Prism Central
*/
func (a *Client) PostClustersMulticlusterConfig(params *PostClustersMulticlusterConfigParams, authInfo runtime.ClientAuthInfoWriter) (*PostClustersMulticlusterConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostClustersMulticlusterConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostClustersMulticlusterConfig",
		Method:             "POST",
		PathPattern:        "/clusters/multicluster_config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostClustersMulticlusterConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostClustersMulticlusterConfigOK), nil

}

/*
PostClustersUUIDCertificatesCaCerts adds a new c a certificate

Add a new CA certificate
*/
func (a *Client) PostClustersUUIDCertificatesCaCerts(params *PostClustersUUIDCertificatesCaCertsParams, authInfo runtime.ClientAuthInfoWriter) (*PostClustersUUIDCertificatesCaCertsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostClustersUUIDCertificatesCaCertsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostClustersUUIDCertificatesCaCerts",
		Method:             "POST",
		PathPattern:        "/clusters/{uuid}/certificates/ca_certs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostClustersUUIDCertificatesCaCertsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostClustersUUIDCertificatesCaCertsOK), nil

}

/*
PostClustersUUIDCertificatesClientAuth imports c a chain for client authentication

Import CA chain for client authentication
*/
func (a *Client) PostClustersUUIDCertificatesClientAuth(params *PostClustersUUIDCertificatesClientAuthParams, authInfo runtime.ClientAuthInfoWriter) (*PostClustersUUIDCertificatesClientAuthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostClustersUUIDCertificatesClientAuthParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostClustersUUIDCertificatesClientAuth",
		Method:             "POST",
		PathPattern:        "/clusters/{uuid}/certificates/client_auth",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostClustersUUIDCertificatesClientAuthReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostClustersUUIDCertificatesClientAuthOK), nil

}

/*
PostClustersUUIDCertificatesPemkey generates a 2048 bits cipher length r s a key

Generate a 2048 bits cipher length RSA key
*/
func (a *Client) PostClustersUUIDCertificatesPemkey(params *PostClustersUUIDCertificatesPemkeyParams, authInfo runtime.ClientAuthInfoWriter) (*PostClustersUUIDCertificatesPemkeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostClustersUUIDCertificatesPemkeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostClustersUUIDCertificatesPemkey",
		Method:             "POST",
		PathPattern:        "/clusters/{uuid}/certificates/pemkey",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostClustersUUIDCertificatesPemkeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostClustersUUIDCertificatesPemkeyOK), nil

}

/*
PostClustersUUIDCertificatesPemkeyImport imports a new key

Import a new key
*/
func (a *Client) PostClustersUUIDCertificatesPemkeyImport(params *PostClustersUUIDCertificatesPemkeyImportParams, authInfo runtime.ClientAuthInfoWriter) (*PostClustersUUIDCertificatesPemkeyImportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostClustersUUIDCertificatesPemkeyImportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostClustersUUIDCertificatesPemkeyImport",
		Method:             "POST",
		PathPattern:        "/clusters/{uuid}/certificates/pemkey/import",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostClustersUUIDCertificatesPemkeyImportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostClustersUUIDCertificatesPemkeyImportOK), nil

}

/*
PostClustersUUIDCertificatesSvmCertsKmsUUID adds one or more certificates to a service VM

Add one or more certificates to a service VM
*/
func (a *Client) PostClustersUUIDCertificatesSvmCertsKmsUUID(params *PostClustersUUIDCertificatesSvmCertsKmsUUIDParams, authInfo runtime.ClientAuthInfoWriter) (*PostClustersUUIDCertificatesSvmCertsKmsUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostClustersUUIDCertificatesSvmCertsKmsUUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostClustersUUIDCertificatesSvmCertsKmsUUID",
		Method:             "POST",
		PathPattern:        "/clusters/{uuid}/certificates/svm_certs/{kms_uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostClustersUUIDCertificatesSvmCertsKmsUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostClustersUUIDCertificatesSvmCertsKmsUUIDOK), nil

}

/*
PostClustersUUIDCloudCredentialsCloudType adds a cloud credential for accessing cloud sites

Add a cloud credential for accessing cloud sites
*/
func (a *Client) PostClustersUUIDCloudCredentialsCloudType(params *PostClustersUUIDCloudCredentialsCloudTypeParams, authInfo runtime.ClientAuthInfoWriter) (*PostClustersUUIDCloudCredentialsCloudTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostClustersUUIDCloudCredentialsCloudTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostClustersUUIDCloudCredentialsCloudType",
		Method:             "POST",
		PathPattern:        "/clusters/{uuid}/cloud_credentials/{cloud_type}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostClustersUUIDCloudCredentialsCloudTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostClustersUUIDCloudCredentialsCloudTypeOK), nil

}

/*
PostClustersUUIDCloudCredentialsCloudTypeList gets cluster cloud credentials

Get cluster cloud credentials by the provided filters
*/
func (a *Client) PostClustersUUIDCloudCredentialsCloudTypeList(params *PostClustersUUIDCloudCredentialsCloudTypeListParams, authInfo runtime.ClientAuthInfoWriter) (*PostClustersUUIDCloudCredentialsCloudTypeListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostClustersUUIDCloudCredentialsCloudTypeListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostClustersUUIDCloudCredentialsCloudTypeList",
		Method:             "POST",
		PathPattern:        "/clusters/{uuid}/cloud_credentials/{cloud_type}/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostClustersUUIDCloudCredentialsCloudTypeListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostClustersUUIDCloudCredentialsCloudTypeListOK), nil

}

/*
PostClustersUUIDDirectoryServices adds the directory service configuration

Adds the directory service configuration
*/
func (a *Client) PostClustersUUIDDirectoryServices(params *PostClustersUUIDDirectoryServicesParams, authInfo runtime.ClientAuthInfoWriter) (*PostClustersUUIDDirectoryServicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostClustersUUIDDirectoryServicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostClustersUUIDDirectoryServices",
		Method:             "POST",
		PathPattern:        "/clusters/{uuid}/directory_services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostClustersUUIDDirectoryServicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostClustersUUIDDirectoryServicesOK), nil

}

/*
PostClustersUUIDDirectoryServicesDirectoryServiceUUIDConnect connects to a directory service

Connects to a directory service
*/
func (a *Client) PostClustersUUIDDirectoryServicesDirectoryServiceUUIDConnect(params *PostClustersUUIDDirectoryServicesDirectoryServiceUUIDConnectParams, authInfo runtime.ClientAuthInfoWriter) (*PostClustersUUIDDirectoryServicesDirectoryServiceUUIDConnectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostClustersUUIDDirectoryServicesDirectoryServiceUUIDConnectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostClustersUUIDDirectoryServicesDirectoryServiceUUIDConnect",
		Method:             "POST",
		PathPattern:        "/clusters/{uuid}/directory_services/{directory_service_uuid}/connect",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostClustersUUIDDirectoryServicesDirectoryServiceUUIDConnectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostClustersUUIDDirectoryServicesDirectoryServiceUUIDConnectOK), nil

}

/*
PostClustersUUIDDirectoryServicesList lists the directory service configuration defined in the cluster

Lists the directory service configuration defined in the cluster
*/
func (a *Client) PostClustersUUIDDirectoryServicesList(params *PostClustersUUIDDirectoryServicesListParams, authInfo runtime.ClientAuthInfoWriter) (*PostClustersUUIDDirectoryServicesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostClustersUUIDDirectoryServicesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostClustersUUIDDirectoryServicesList",
		Method:             "POST",
		PathPattern:        "/clusters/{uuid}/directory_services/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostClustersUUIDDirectoryServicesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostClustersUUIDDirectoryServicesListOK), nil

}

/*
PostClustersUUIDDirectoryServicesSearch searches user or group in the directory service

search user or group in the directory service
*/
func (a *Client) PostClustersUUIDDirectoryServicesSearch(params *PostClustersUUIDDirectoryServicesSearchParams, authInfo runtime.ClientAuthInfoWriter) (*PostClustersUUIDDirectoryServicesSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostClustersUUIDDirectoryServicesSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostClustersUUIDDirectoryServicesSearch",
		Method:             "POST",
		PathPattern:        "/clusters/{uuid}/directory_services/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostClustersUUIDDirectoryServicesSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostClustersUUIDDirectoryServicesSearchOK), nil

}

/*
PostClustersUUIDRemoteConnectionsConnect connects to a remote cluster

Connect to a remote cluster
*/
func (a *Client) PostClustersUUIDRemoteConnectionsConnect(params *PostClustersUUIDRemoteConnectionsConnectParams, authInfo runtime.ClientAuthInfoWriter) (*PostClustersUUIDRemoteConnectionsConnectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostClustersUUIDRemoteConnectionsConnectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostClustersUUIDRemoteConnectionsConnect",
		Method:             "POST",
		PathPattern:        "/clusters/{uuid}/remote_connections/connect",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostClustersUUIDRemoteConnectionsConnectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostClustersUUIDRemoteConnectionsConnectOK), nil

}

/*
PutClustersUUID updates cluster

Given an intenful spec and cluster uuid, update the cluster
*/
func (a *Client) PutClustersUUID(params *PutClustersUUIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutClustersUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutClustersUUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutClustersUUID",
		Method:             "PUT",
		PathPattern:        "/clusters/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutClustersUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutClustersUUIDOK), nil

}

/*
PutClustersUUIDCertificatesClientAuth replaces the c a chain for client authentication

Replace the CA chain for client authentication
*/
func (a *Client) PutClustersUUIDCertificatesClientAuth(params *PutClustersUUIDCertificatesClientAuthParams, authInfo runtime.ClientAuthInfoWriter) (*PutClustersUUIDCertificatesClientAuthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutClustersUUIDCertificatesClientAuthParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutClustersUUIDCertificatesClientAuth",
		Method:             "PUT",
		PathPattern:        "/clusters/{uuid}/certificates/client_auth",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutClustersUUIDCertificatesClientAuthReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutClustersUUIDCertificatesClientAuthOK), nil

}

/*
PutClustersUUIDCertificatesSvmCertsNodeUUIDKmsUUID replaces the certificate on a service VM

Replace the certificate on a service VM
*/
func (a *Client) PutClustersUUIDCertificatesSvmCertsNodeUUIDKmsUUID(params *PutClustersUUIDCertificatesSvmCertsNodeUUIDKmsUUIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutClustersUUIDCertificatesSvmCertsNodeUUIDKmsUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutClustersUUIDCertificatesSvmCertsNodeUUIDKmsUUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutClustersUUIDCertificatesSvmCertsNodeUUIDKmsUUID",
		Method:             "PUT",
		PathPattern:        "/clusters/{uuid}/certificates/svm_certs/{node_uuid}/{kms_uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutClustersUUIDCertificatesSvmCertsNodeUUIDKmsUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutClustersUUIDCertificatesSvmCertsNodeUUIDKmsUUIDOK), nil

}

/*
PutClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUID modifies the specified cluster cloud credentials

Modify the specified cluster cloud credentials on name or the default
credentials flag.

*/
func (a *Client) PutClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUID(params *PutClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUID",
		Method:             "PUT",
		PathPattern:        "/clusters/{uuid}/cloud_credentials/{cloud_type}/{cloud_credentials_uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUIDOK), nil

}

/*
PutClustersUUIDDirectoryServicesDirectoryServiceUUID updates the directory service configuration

update the directory service configuration
*/
func (a *Client) PutClustersUUIDDirectoryServicesDirectoryServiceUUID(params *PutClustersUUIDDirectoryServicesDirectoryServiceUUIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutClustersUUIDDirectoryServicesDirectoryServiceUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutClustersUUIDDirectoryServicesDirectoryServiceUUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutClustersUUIDDirectoryServicesDirectoryServiceUUID",
		Method:             "PUT",
		PathPattern:        "/clusters/{uuid}/directory_services/{directory_service_uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutClustersUUIDDirectoryServicesDirectoryServiceUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutClustersUUIDDirectoryServicesDirectoryServiceUUIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
