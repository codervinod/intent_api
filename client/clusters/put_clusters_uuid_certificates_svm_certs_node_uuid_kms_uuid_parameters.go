package clusters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/codervinod/intent_api/models"
)

// NewPutClustersUUIDCertificatesSvmCertsNodeUUIDKmsUUIDParams creates a new PutClustersUUIDCertificatesSvmCertsNodeUUIDKmsUUIDParams object
// with the default values initialized.
func NewPutClustersUUIDCertificatesSvmCertsNodeUUIDKmsUUIDParams() *PutClustersUUIDCertificatesSvmCertsNodeUUIDKmsUUIDParams {
	var ()
	return &PutClustersUUIDCertificatesSvmCertsNodeUUIDKmsUUIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPutClustersUUIDCertificatesSvmCertsNodeUUIDKmsUUIDParamsWithTimeout creates a new PutClustersUUIDCertificatesSvmCertsNodeUUIDKmsUUIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPutClustersUUIDCertificatesSvmCertsNodeUUIDKmsUUIDParamsWithTimeout(timeout time.Duration) *PutClustersUUIDCertificatesSvmCertsNodeUUIDKmsUUIDParams {
	var ()
	return &PutClustersUUIDCertificatesSvmCertsNodeUUIDKmsUUIDParams{

		timeout: timeout,
	}
}

// NewPutClustersUUIDCertificatesSvmCertsNodeUUIDKmsUUIDParamsWithContext creates a new PutClustersUUIDCertificatesSvmCertsNodeUUIDKmsUUIDParams object
// with the default values initialized, and the ability to set a context for a request
func NewPutClustersUUIDCertificatesSvmCertsNodeUUIDKmsUUIDParamsWithContext(ctx context.Context) *PutClustersUUIDCertificatesSvmCertsNodeUUIDKmsUUIDParams {
	var ()
	return &PutClustersUUIDCertificatesSvmCertsNodeUUIDKmsUUIDParams{

		Context: ctx,
	}
}

/*PutClustersUUIDCertificatesSvmCertsNodeUUIDKmsUUIDParams contains all the parameters to send to the API endpoint
for the put clusters UUID certificates svm certs node UUID kms UUID operation typically these are written to a http.Request
*/
type PutClustersUUIDCertificatesSvmCertsNodeUUIDKmsUUIDParams struct {

	/*Cert*/
	Cert *models.Certificate
	/*KmsUUID*/
	KmsUUID string
	/*NodeUUID*/
	NodeUUID string
	/*UUID*/
	UUID string

	timeout time.Duration
	Context context.Context
}

// WithTimeout adds the timeout to the put clusters UUID certificates svm certs node UUID kms UUID params
func (o *PutClustersUUIDCertificatesSvmCertsNodeUUIDKmsUUIDParams) WithTimeout(timeout time.Duration) *PutClustersUUIDCertificatesSvmCertsNodeUUIDKmsUUIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the put clusters UUID certificates svm certs node UUID kms UUID params
func (o *PutClustersUUIDCertificatesSvmCertsNodeUUIDKmsUUIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the put clusters UUID certificates svm certs node UUID kms UUID params
func (o *PutClustersUUIDCertificatesSvmCertsNodeUUIDKmsUUIDParams) WithContext(ctx context.Context) *PutClustersUUIDCertificatesSvmCertsNodeUUIDKmsUUIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the put clusters UUID certificates svm certs node UUID kms UUID params
func (o *PutClustersUUIDCertificatesSvmCertsNodeUUIDKmsUUIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithCert adds the cert to the put clusters UUID certificates svm certs node UUID kms UUID params
func (o *PutClustersUUIDCertificatesSvmCertsNodeUUIDKmsUUIDParams) WithCert(cert *models.Certificate) *PutClustersUUIDCertificatesSvmCertsNodeUUIDKmsUUIDParams {
	o.SetCert(cert)
	return o
}

// SetCert adds the cert to the put clusters UUID certificates svm certs node UUID kms UUID params
func (o *PutClustersUUIDCertificatesSvmCertsNodeUUIDKmsUUIDParams) SetCert(cert *models.Certificate) {
	o.Cert = cert
}

// WithKmsUUID adds the kmsUUID to the put clusters UUID certificates svm certs node UUID kms UUID params
func (o *PutClustersUUIDCertificatesSvmCertsNodeUUIDKmsUUIDParams) WithKmsUUID(kmsUUID string) *PutClustersUUIDCertificatesSvmCertsNodeUUIDKmsUUIDParams {
	o.SetKmsUUID(kmsUUID)
	return o
}

// SetKmsUUID adds the kmsUuid to the put clusters UUID certificates svm certs node UUID kms UUID params
func (o *PutClustersUUIDCertificatesSvmCertsNodeUUIDKmsUUIDParams) SetKmsUUID(kmsUUID string) {
	o.KmsUUID = kmsUUID
}

// WithNodeUUID adds the nodeUUID to the put clusters UUID certificates svm certs node UUID kms UUID params
func (o *PutClustersUUIDCertificatesSvmCertsNodeUUIDKmsUUIDParams) WithNodeUUID(nodeUUID string) *PutClustersUUIDCertificatesSvmCertsNodeUUIDKmsUUIDParams {
	o.SetNodeUUID(nodeUUID)
	return o
}

// SetNodeUUID adds the nodeUuid to the put clusters UUID certificates svm certs node UUID kms UUID params
func (o *PutClustersUUIDCertificatesSvmCertsNodeUUIDKmsUUIDParams) SetNodeUUID(nodeUUID string) {
	o.NodeUUID = nodeUUID
}

// WithUUID adds the uuid to the put clusters UUID certificates svm certs node UUID kms UUID params
func (o *PutClustersUUIDCertificatesSvmCertsNodeUUIDKmsUUIDParams) WithUUID(uuid string) *PutClustersUUIDCertificatesSvmCertsNodeUUIDKmsUUIDParams {
	o.SetUUID(uuid)
	return o
}

// SetUUID adds the uuid to the put clusters UUID certificates svm certs node UUID kms UUID params
func (o *PutClustersUUIDCertificatesSvmCertsNodeUUIDKmsUUIDParams) SetUUID(uuid string) {
	o.UUID = uuid
}

// WriteToRequest writes these params to a swagger request
func (o *PutClustersUUIDCertificatesSvmCertsNodeUUIDKmsUUIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.Cert == nil {
		o.Cert = new(models.Certificate)
	}

	if err := r.SetBodyParam(o.Cert); err != nil {
		return err
	}

	// path param kms_uuid
	if err := r.SetPathParam("kms_uuid", o.KmsUUID); err != nil {
		return err
	}

	// path param node_uuid
	if err := r.SetPathParam("node_uuid", o.NodeUUID); err != nil {
		return err
	}

	// path param uuid
	if err := r.SetPathParam("uuid", o.UUID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
