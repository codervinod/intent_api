package clusters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetClustersUUIDCertificatesCsrsNodeIPParams creates a new GetClustersUUIDCertificatesCsrsNodeIPParams object
// with the default values initialized.
func NewGetClustersUUIDCertificatesCsrsNodeIPParams() *GetClustersUUIDCertificatesCsrsNodeIPParams {
	var ()
	return &GetClustersUUIDCertificatesCsrsNodeIPParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetClustersUUIDCertificatesCsrsNodeIPParamsWithTimeout creates a new GetClustersUUIDCertificatesCsrsNodeIPParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetClustersUUIDCertificatesCsrsNodeIPParamsWithTimeout(timeout time.Duration) *GetClustersUUIDCertificatesCsrsNodeIPParams {
	var ()
	return &GetClustersUUIDCertificatesCsrsNodeIPParams{

		timeout: timeout,
	}
}

// NewGetClustersUUIDCertificatesCsrsNodeIPParamsWithContext creates a new GetClustersUUIDCertificatesCsrsNodeIPParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetClustersUUIDCertificatesCsrsNodeIPParamsWithContext(ctx context.Context) *GetClustersUUIDCertificatesCsrsNodeIPParams {
	var ()
	return &GetClustersUUIDCertificatesCsrsNodeIPParams{

		Context: ctx,
	}
}

/*GetClustersUUIDCertificatesCsrsNodeIPParams contains all the parameters to send to the API endpoint
for the get clusters UUID certificates csrs node IP operation typically these are written to a http.Request
*/
type GetClustersUUIDCertificatesCsrsNodeIPParams struct {

	/*NodeIP*/
	NodeIP string
	/*UUID*/
	UUID string

	timeout time.Duration
	Context context.Context
}

// WithTimeout adds the timeout to the get clusters UUID certificates csrs node IP params
func (o *GetClustersUUIDCertificatesCsrsNodeIPParams) WithTimeout(timeout time.Duration) *GetClustersUUIDCertificatesCsrsNodeIPParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get clusters UUID certificates csrs node IP params
func (o *GetClustersUUIDCertificatesCsrsNodeIPParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get clusters UUID certificates csrs node IP params
func (o *GetClustersUUIDCertificatesCsrsNodeIPParams) WithContext(ctx context.Context) *GetClustersUUIDCertificatesCsrsNodeIPParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get clusters UUID certificates csrs node IP params
func (o *GetClustersUUIDCertificatesCsrsNodeIPParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithNodeIP adds the nodeIP to the get clusters UUID certificates csrs node IP params
func (o *GetClustersUUIDCertificatesCsrsNodeIPParams) WithNodeIP(nodeIP string) *GetClustersUUIDCertificatesCsrsNodeIPParams {
	o.SetNodeIP(nodeIP)
	return o
}

// SetNodeIP adds the nodeIp to the get clusters UUID certificates csrs node IP params
func (o *GetClustersUUIDCertificatesCsrsNodeIPParams) SetNodeIP(nodeIP string) {
	o.NodeIP = nodeIP
}

// WithUUID adds the uuid to the get clusters UUID certificates csrs node IP params
func (o *GetClustersUUIDCertificatesCsrsNodeIPParams) WithUUID(uuid string) *GetClustersUUIDCertificatesCsrsNodeIPParams {
	o.SetUUID(uuid)
	return o
}

// SetUUID adds the uuid to the get clusters UUID certificates csrs node IP params
func (o *GetClustersUUIDCertificatesCsrsNodeIPParams) SetUUID(uuid string) {
	o.UUID = uuid
}

// WriteToRequest writes these params to a swagger request
func (o *GetClustersUUIDCertificatesCsrsNodeIPParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	// path param node_ip
	if err := r.SetPathParam("node_ip", o.NodeIP); err != nil {
		return err
	}

	// path param uuid
	if err := r.SetPathParam("uuid", o.UUID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
