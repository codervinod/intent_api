package clusters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/intent_api/models"
)

// PutClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUIDReader is a Reader for the PutClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUID structure.
type PutClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPutClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		result := NewPutClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUIDDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	}
}

// NewPutClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUIDOK creates a PutClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUIDOK with default headers values
func NewPutClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUIDOK() *PutClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUIDOK {
	return &PutClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUIDOK{}
}

/*PutClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUIDOK handles this case with default header values.

Request Succeeded
*/
type PutClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUIDOK struct {
	Payload *models.CloudCredentialsIntentResponse
}

func (o *PutClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUIDOK) Error() string {
	return fmt.Sprintf("[PUT /clusters/{uuid}/cloud_credentials/{cloud_type}/{cloud_credentials_uuid}][%d] putClustersUuidCloudCredentialsCloudTypeCloudCredentialsUuidOK  %+v", 200, o.Payload)
}

func (o *PutClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CloudCredentialsIntentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUIDDefault creates a PutClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUIDDefault with default headers values
func NewPutClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUIDDefault(code int) *PutClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUIDDefault {
	return &PutClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUIDDefault{
		_statusCode: code,
	}
}

/*PutClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUIDDefault handles this case with default header values.

Internal Error
*/
type PutClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUIDDefault struct {
	_statusCode int

	Payload *models.CloudCredentialsStatus
}

// Code gets the status code for the put clusters UUID cloud credentials cloud type cloud credentials UUID default response
func (o *PutClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUIDDefault) Code() int {
	return o._statusCode
}

func (o *PutClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUIDDefault) Error() string {
	return fmt.Sprintf("[PUT /clusters/{uuid}/cloud_credentials/{cloud_type}/{cloud_credentials_uuid}][%d] PutClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUID default  %+v", o._statusCode, o.Payload)
}

func (o *PutClustersUUIDCloudCredentialsCloudTypeCloudCredentialsUUIDDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CloudCredentialsStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
