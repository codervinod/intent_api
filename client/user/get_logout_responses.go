package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// GetLogoutReader is a Reader for the GetLogout structure.
type GetLogoutReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetLogoutReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetLogoutOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		result := NewGetLogoutDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	}
}

// NewGetLogoutOK creates a GetLogoutOK with default headers values
func NewGetLogoutOK() *GetLogoutOK {
	return &GetLogoutOK{}
}

/*GetLogoutOK handles this case with default header values.

Successfully invalidated session
*/
type GetLogoutOK struct {
}

func (o *GetLogoutOK) Error() string {
	return fmt.Sprintf("[GET /logout][%d] getLogoutOK ", 200)
}

func (o *GetLogoutOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetLogoutDefault creates a GetLogoutDefault with default headers values
func NewGetLogoutDefault(code int) *GetLogoutDefault {
	return &GetLogoutDefault{
		_statusCode: code,
	}
}

/*GetLogoutDefault handles this case with default header values.

Failed to invalidate session
*/
type GetLogoutDefault struct {
	_statusCode int
}

// Code gets the status code for the get logout default response
func (o *GetLogoutDefault) Code() int {
	return o._statusCode
}

func (o *GetLogoutDefault) Error() string {
	return fmt.Sprintf("[GET /logout][%d] GetLogout default ", o._statusCode)
}

func (o *GetLogoutDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
