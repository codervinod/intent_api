package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetLogoutParams creates a new GetLogoutParams object
// with the default values initialized.
func NewGetLogoutParams() *GetLogoutParams {

	return &GetLogoutParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetLogoutParamsWithTimeout creates a new GetLogoutParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetLogoutParamsWithTimeout(timeout time.Duration) *GetLogoutParams {

	return &GetLogoutParams{

		timeout: timeout,
	}
}

// NewGetLogoutParamsWithContext creates a new GetLogoutParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetLogoutParamsWithContext(ctx context.Context) *GetLogoutParams {

	return &GetLogoutParams{

		Context: ctx,
	}
}

/*GetLogoutParams contains all the parameters to send to the API endpoint
for the get logout operation typically these are written to a http.Request
*/
type GetLogoutParams struct {
	timeout time.Duration
	Context context.Context
}

// WithTimeout adds the timeout to the get logout params
func (o *GetLogoutParams) WithTimeout(timeout time.Duration) *GetLogoutParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get logout params
func (o *GetLogoutParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get logout params
func (o *GetLogoutParams) WithContext(ctx context.Context) *GetLogoutParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get logout params
func (o *GetLogoutParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WriteToRequest writes these params to a swagger request
func (o *GetLogoutParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
