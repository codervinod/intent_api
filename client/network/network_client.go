package network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new network API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for network API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteNetworksUUID deletes a network

Delete a network
*/
func (a *Client) DeleteNetworksUUID(params *DeleteNetworksUUIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteNetworksUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNetworksUUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteNetworksUUID",
		Method:             "DELETE",
		PathPattern:        "/networks/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteNetworksUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteNetworksUUIDOK), nil

}

/*
GetNetworksUUID gets details for a network

Get details for a network
*/
func (a *Client) GetNetworksUUID(params *GetNetworksUUIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworksUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworksUUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetNetworksUUID",
		Method:             "GET",
		PathPattern:        "/networks/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworksUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNetworksUUIDOK), nil

}

/*
PostNetworks creates a network

Create a network
*/
func (a *Client) PostNetworks(params *PostNetworksParams, authInfo runtime.ClientAuthInfoWriter) (*PostNetworksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostNetworksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostNetworks",
		Method:             "POST",
		PathPattern:        "/networks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostNetworksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostNetworksOK), nil

}

/*
PostNetworksList gets networks

Get networks
*/
func (a *Client) PostNetworksList(params *PostNetworksListParams, authInfo runtime.ClientAuthInfoWriter) (*PostNetworksListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostNetworksListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostNetworksList",
		Method:             "POST",
		PathPattern:        "/networks/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostNetworksListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostNetworksListOK), nil

}

/*
PutNetworksUUID modifies network

Modify network
*/
func (a *Client) PutNetworksUUID(params *PutNetworksUUIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutNetworksUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutNetworksUUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutNetworksUUID",
		Method:             "PUT",
		PathPattern:        "/networks/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutNetworksUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutNetworksUUIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
