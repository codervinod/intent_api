package volume_group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new volume group API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for volume group API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteVolumeGroupsUUID deletes a volume group

Deletes a volume group
*/
func (a *Client) DeleteVolumeGroupsUUID(params *DeleteVolumeGroupsUUIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteVolumeGroupsUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVolumeGroupsUUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteVolumeGroupsUUID",
		Method:             "DELETE",
		PathPattern:        "/volume_groups/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteVolumeGroupsUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteVolumeGroupsUUIDOK), nil

}

/*
GetVolumeGroupsUUID retrieves specified volume group

Retrieves specified volume group
*/
func (a *Client) GetVolumeGroupsUUID(params *GetVolumeGroupsUUIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetVolumeGroupsUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVolumeGroupsUUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVolumeGroupsUUID",
		Method:             "GET",
		PathPattern:        "/volume_groups/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVolumeGroupsUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVolumeGroupsUUIDOK), nil

}

/*
PostVolumeGroups creates a volume group

Creates a volume group
*/
func (a *Client) PostVolumeGroups(params *PostVolumeGroupsParams, authInfo runtime.ClientAuthInfoWriter) (*PostVolumeGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostVolumeGroupsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostVolumeGroups",
		Method:             "POST",
		PathPattern:        "/volume_groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostVolumeGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostVolumeGroupsOK), nil

}

/*
PostVolumeGroupsList retrieves all volume groups

Retrieves all volume groups
*/
func (a *Client) PostVolumeGroupsList(params *PostVolumeGroupsListParams, authInfo runtime.ClientAuthInfoWriter) (*PostVolumeGroupsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostVolumeGroupsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostVolumeGroupsList",
		Method:             "POST",
		PathPattern:        "/volume_groups/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostVolumeGroupsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostVolumeGroupsListOK), nil

}

/*
PutVolumeGroupsUUID updates specified volume group

Updates specified volume group
*/
func (a *Client) PutVolumeGroupsUUID(params *PutVolumeGroupsUUIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutVolumeGroupsUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutVolumeGroupsUUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutVolumeGroupsUUID",
		Method:             "PUT",
		PathPattern:        "/volume_groups/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutVolumeGroupsUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutVolumeGroupsUUIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
