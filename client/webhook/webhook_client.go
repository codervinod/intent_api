package webhook

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new webhook API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for webhook API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteWebhooksUUID deletes a webhook

Delete a webhook given its uuid
*/
func (a *Client) DeleteWebhooksUUID(params *DeleteWebhooksUUIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteWebhooksUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteWebhooksUUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteWebhooksUUID",
		Method:             "DELETE",
		PathPattern:        "/webhooks/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteWebhooksUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteWebhooksUUIDOK), nil

}

/*
GetWebhooksUUID gets a webhook

Given a UUID, returns a webhook definition
*/
func (a *Client) GetWebhooksUUID(params *GetWebhooksUUIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetWebhooksUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWebhooksUUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetWebhooksUUID",
		Method:             "GET",
		PathPattern:        "/webhooks/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWebhooksUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWebhooksUUIDOK), nil

}

/*
PostWebhooks creates webhook

Given an intentful spec, creates a Webhook with associated metadata
*/
func (a *Client) PostWebhooks(params *PostWebhooksParams, authInfo runtime.ClientAuthInfoWriter) (*PostWebhooksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostWebhooksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostWebhooks",
		Method:             "POST",
		PathPattern:        "/webhooks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWebhooksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostWebhooksOK), nil

}

/*
PostWebhooksList lists the webhooks

List the Webhooks with associated metadata
*/
func (a *Client) PostWebhooksList(params *PostWebhooksListParams, authInfo runtime.ClientAuthInfoWriter) (*PostWebhooksListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostWebhooksListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostWebhooksList",
		Method:             "POST",
		PathPattern:        "/webhooks/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWebhooksListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostWebhooksListOK), nil

}

/*
PutWebhooksUUID updates webhook

Given an intenful spec and Webhook uuid, update Webhook
*/
func (a *Client) PutWebhooksUUID(params *PutWebhooksUUIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutWebhooksUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutWebhooksUUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutWebhooksUUID",
		Method:             "PUT",
		PathPattern:        "/webhooks/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutWebhooksUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutWebhooksUUIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
