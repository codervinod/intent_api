package workflow

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/intent_api/models"
)

// NewPatchWorkflowsUUIDParams creates a new PatchWorkflowsUUIDParams object
// with the default values initialized.
func NewPatchWorkflowsUUIDParams() *PatchWorkflowsUUIDParams {
	var ()
	return &PatchWorkflowsUUIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPatchWorkflowsUUIDParamsWithTimeout creates a new PatchWorkflowsUUIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPatchWorkflowsUUIDParamsWithTimeout(timeout time.Duration) *PatchWorkflowsUUIDParams {
	var ()
	return &PatchWorkflowsUUIDParams{

		timeout: timeout,
	}
}

// NewPatchWorkflowsUUIDParamsWithContext creates a new PatchWorkflowsUUIDParams object
// with the default values initialized, and the ability to set a context for a request
func NewPatchWorkflowsUUIDParamsWithContext(ctx context.Context) *PatchWorkflowsUUIDParams {
	var ()
	return &PatchWorkflowsUUIDParams{

		Context: ctx,
	}
}

/*PatchWorkflowsUUIDParams contains all the parameters to send to the API endpoint
for the patch workflows UUID operation typically these are written to a http.Request
*/
type PatchWorkflowsUUIDParams struct {

	/*Body
	  Request body

	*/
	Body *models.WorkflowIntentInput
	/*UUID
	  Uuid of workflow to be updated

	*/
	UUID string

	timeout time.Duration
	Context context.Context
}

// WithTimeout adds the timeout to the patch workflows UUID params
func (o *PatchWorkflowsUUIDParams) WithTimeout(timeout time.Duration) *PatchWorkflowsUUIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the patch workflows UUID params
func (o *PatchWorkflowsUUIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the patch workflows UUID params
func (o *PatchWorkflowsUUIDParams) WithContext(ctx context.Context) *PatchWorkflowsUUIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the patch workflows UUID params
func (o *PatchWorkflowsUUIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithBody adds the body to the patch workflows UUID params
func (o *PatchWorkflowsUUIDParams) WithBody(body *models.WorkflowIntentInput) *PatchWorkflowsUUIDParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the patch workflows UUID params
func (o *PatchWorkflowsUUIDParams) SetBody(body *models.WorkflowIntentInput) {
	o.Body = body
}

// WithUUID adds the uuid to the patch workflows UUID params
func (o *PatchWorkflowsUUIDParams) WithUUID(uuid string) *PatchWorkflowsUUIDParams {
	o.SetUUID(uuid)
	return o
}

// SetUUID adds the uuid to the patch workflows UUID params
func (o *PatchWorkflowsUUIDParams) SetUUID(uuid string) {
	o.UUID = uuid
}

// WriteToRequest writes these params to a swagger request
func (o *PatchWorkflowsUUIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.Body == nil {
		o.Body = new(models.WorkflowIntentInput)
	}

	if err := r.SetBodyParam(o.Body); err != nil {
		return err
	}

	// path param uuid
	if err := r.SetPathParam("uuid", o.UUID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
