package workflow

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new workflow API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for workflow API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteWorkflowsUUID deletes workflow

Delete a Workflow given its UUID
*/
func (a *Client) DeleteWorkflowsUUID(params *DeleteWorkflowsUUIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteWorkflowsUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteWorkflowsUUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteWorkflowsUUID",
		Method:             "DELETE",
		PathPattern:        "/workflows/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteWorkflowsUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteWorkflowsUUIDOK), nil

}

/*
GetWorkflowsUUID gets workflow

Given a UUID, returns a Workflow definition
*/
func (a *Client) GetWorkflowsUUID(params *GetWorkflowsUUIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetWorkflowsUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkflowsUUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetWorkflowsUUID",
		Method:             "GET",
		PathPattern:        "/workflows/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkflowsUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkflowsUUIDOK), nil

}

/*
PatchWorkflowsUUID updates workflow partial

Given an intentful spec and Workflow UUID, update Workflow using partial update semantics
*/
func (a *Client) PatchWorkflowsUUID(params *PatchWorkflowsUUIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchWorkflowsUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchWorkflowsUUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchWorkflowsUUID",
		Method:             "PATCH",
		PathPattern:        "/workflows/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchWorkflowsUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchWorkflowsUUIDOK), nil

}

/*
PostWorkflows creates workflow

Given  an intentful spec creates a Workflow with associated metadata
*/
func (a *Client) PostWorkflows(params *PostWorkflowsParams, authInfo runtime.ClientAuthInfoWriter) (*PostWorkflowsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostWorkflowsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostWorkflows",
		Method:             "POST",
		PathPattern:        "/workflows",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkflowsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostWorkflowsOK), nil

}

/*
PostWorkflowsList lists the workflows

List the Workflows with associated metadata
*/
func (a *Client) PostWorkflowsList(params *PostWorkflowsListParams, authInfo runtime.ClientAuthInfoWriter) (*PostWorkflowsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostWorkflowsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostWorkflowsList",
		Method:             "POST",
		PathPattern:        "/workflows/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkflowsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostWorkflowsListOK), nil

}

/*
PutWorkflowsUUID updates workflow

Given an intenful spec and Workflow UUID, update Workflow
*/
func (a *Client) PutWorkflowsUUID(params *PutWorkflowsUUIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutWorkflowsUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutWorkflowsUUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutWorkflowsUUID",
		Method:             "PUT",
		PathPattern:        "/workflows/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutWorkflowsUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutWorkflowsUUIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
