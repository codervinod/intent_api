package volume_group_backup

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/intent_api/models"
)

// GetVolumeGroupBackupsUUIDReader is a Reader for the GetVolumeGroupBackupsUUID structure.
type GetVolumeGroupBackupsUUIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetVolumeGroupBackupsUUIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetVolumeGroupBackupsUUIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewGetVolumeGroupBackupsUUIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetVolumeGroupBackupsUUIDDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	}
}

// NewGetVolumeGroupBackupsUUIDOK creates a GetVolumeGroupBackupsUUIDOK with default headers values
func NewGetVolumeGroupBackupsUUIDOK() *GetVolumeGroupBackupsUUIDOK {
	return &GetVolumeGroupBackupsUUIDOK{}
}

/*GetVolumeGroupBackupsUUIDOK handles this case with default header values.

Request succeeded
*/
type GetVolumeGroupBackupsUUIDOK struct {
	Payload *models.VolumeGroupBackupIntentResponse
}

func (o *GetVolumeGroupBackupsUUIDOK) Error() string {
	return fmt.Sprintf("[GET /volume_group_backups/{uuid}][%d] getVolumeGroupBackupsUuidOK  %+v", 200, o.Payload)
}

func (o *GetVolumeGroupBackupsUUIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.VolumeGroupBackupIntentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVolumeGroupBackupsUUIDNotFound creates a GetVolumeGroupBackupsUUIDNotFound with default headers values
func NewGetVolumeGroupBackupsUUIDNotFound() *GetVolumeGroupBackupsUUIDNotFound {
	return &GetVolumeGroupBackupsUUIDNotFound{}
}

/*GetVolumeGroupBackupsUUIDNotFound handles this case with default header values.

Invalid UUID Provided
*/
type GetVolumeGroupBackupsUUIDNotFound struct {
	Payload *models.VolumeGroupBackupStatus
}

func (o *GetVolumeGroupBackupsUUIDNotFound) Error() string {
	return fmt.Sprintf("[GET /volume_group_backups/{uuid}][%d] getVolumeGroupBackupsUuidNotFound  %+v", 404, o.Payload)
}

func (o *GetVolumeGroupBackupsUUIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.VolumeGroupBackupStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVolumeGroupBackupsUUIDDefault creates a GetVolumeGroupBackupsUUIDDefault with default headers values
func NewGetVolumeGroupBackupsUUIDDefault(code int) *GetVolumeGroupBackupsUUIDDefault {
	return &GetVolumeGroupBackupsUUIDDefault{
		_statusCode: code,
	}
}

/*GetVolumeGroupBackupsUUIDDefault handles this case with default header values.

Internal Error
*/
type GetVolumeGroupBackupsUUIDDefault struct {
	_statusCode int

	Payload *models.VolumeGroupBackupStatus
}

// Code gets the status code for the get volume group backups UUID default response
func (o *GetVolumeGroupBackupsUUIDDefault) Code() int {
	return o._statusCode
}

func (o *GetVolumeGroupBackupsUUIDDefault) Error() string {
	return fmt.Sprintf("[GET /volume_group_backups/{uuid}][%d] GetVolumeGroupBackupsUUID default  %+v", o._statusCode, o.Payload)
}

func (o *GetVolumeGroupBackupsUUIDDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.VolumeGroupBackupStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
