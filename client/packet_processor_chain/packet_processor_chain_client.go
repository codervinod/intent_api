package packet_processor_chain

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new packet processor chain API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for packet processor chain API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeletePacketProcessorChainsUUID deletes packet processor chain

Delete a packet processor chain given its uuid
*/
func (a *Client) DeletePacketProcessorChainsUUID(params *DeletePacketProcessorChainsUUIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeletePacketProcessorChainsUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePacketProcessorChainsUUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeletePacketProcessorChainsUUID",
		Method:             "DELETE",
		PathPattern:        "/packet_processor_chains/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeletePacketProcessorChainsUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeletePacketProcessorChainsUUIDOK), nil

}

/*
GetPacketProcessorChainsUUID gets packet processor chain

Given a UUID, returns a packet_processor_chain definition
*/
func (a *Client) GetPacketProcessorChainsUUID(params *GetPacketProcessorChainsUUIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetPacketProcessorChainsUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPacketProcessorChainsUUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPacketProcessorChainsUUID",
		Method:             "GET",
		PathPattern:        "/packet_processor_chains/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPacketProcessorChainsUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPacketProcessorChainsUUIDOK), nil

}

/*
PostPacketProcessorChains creates packet processor chain

Given an intentful spec, creates a packet processor chain with associated metadata
*/
func (a *Client) PostPacketProcessorChains(params *PostPacketProcessorChainsParams, authInfo runtime.ClientAuthInfoWriter) (*PostPacketProcessorChainsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPacketProcessorChainsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPacketProcessorChains",
		Method:             "POST",
		PathPattern:        "/packet_processor_chains",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPacketProcessorChainsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPacketProcessorChainsOK), nil

}

/*
PostPacketProcessorChainsList lists the packet processor chains

List the packet_processor_chains with associated metadata
*/
func (a *Client) PostPacketProcessorChainsList(params *PostPacketProcessorChainsListParams, authInfo runtime.ClientAuthInfoWriter) (*PostPacketProcessorChainsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPacketProcessorChainsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPacketProcessorChainsList",
		Method:             "POST",
		PathPattern:        "/packet_processor_chains/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPacketProcessorChainsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPacketProcessorChainsListOK), nil

}

/*
PutPacketProcessorChainsUUID updates packet processor chain

Given an intenful spec and uuid, update packet processor chain
*/
func (a *Client) PutPacketProcessorChainsUUID(params *PutPacketProcessorChainsUUIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutPacketProcessorChainsUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutPacketProcessorChainsUUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutPacketProcessorChainsUUID",
		Method:             "PUT",
		PathPattern:        "/packet_processor_chains/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutPacketProcessorChainsUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutPacketProcessorChainsUUIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
