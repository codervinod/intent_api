package hosts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new hosts API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for hosts API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteHostsUUID removes a host

Remove the host given by the uuid
*/
func (a *Client) DeleteHostsUUID(params *DeleteHostsUUIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteHostsUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteHostsUUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteHostsUUID",
		Method:             "DELETE",
		PathPattern:        "/hosts/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteHostsUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteHostsUUIDOK), nil

}

/*
GetHostsUUID gets a host

Return the host definition by the given uuid
*/
func (a *Client) GetHostsUUID(params *GetHostsUUIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetHostsUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHostsUUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetHostsUUID",
		Method:             "GET",
		PathPattern:        "/hosts/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetHostsUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetHostsUUIDOK), nil

}

/*
PostHosts adds a node

Add a node to the cluster given by the host input object
*/
func (a *Client) PostHosts(params *PostHostsParams, authInfo runtime.ClientAuthInfoWriter) (*PostHostsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostHostsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostHosts",
		Method:             "POST",
		PathPattern:        "/hosts/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostHostsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostHostsOK), nil

}

/*
PostHostsList gets the hosts

Get the list of hosts of the cluster
*/
func (a *Client) PostHostsList(params *PostHostsListParams, authInfo runtime.ClientAuthInfoWriter) (*PostHostsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostHostsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostHostsList",
		Method:             "POST",
		PathPattern:        "/hosts/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostHostsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostHostsListOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
