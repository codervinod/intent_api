package availability_zone

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new availability zone API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for availability zone API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteAvailabilityZonesUUID deletes an availability zone

Delete an availability zone
*/
func (a *Client) DeleteAvailabilityZonesUUID(params *DeleteAvailabilityZonesUUIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAvailabilityZonesUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAvailabilityZonesUUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAvailabilityZonesUUID",
		Method:             "DELETE",
		PathPattern:        "/availability_zones/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAvailabilityZonesUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAvailabilityZonesUUIDOK), nil

}

/*
GetAvailabilityZonesUUID gets details for an availability zones

Get details for an availability zones
*/
func (a *Client) GetAvailabilityZonesUUID(params *GetAvailabilityZonesUUIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetAvailabilityZonesUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAvailabilityZonesUUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAvailabilityZonesUUID",
		Method:             "GET",
		PathPattern:        "/availability_zones/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAvailabilityZonesUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAvailabilityZonesUUIDOK), nil

}

/*
PostAvailabilityZones creates an availability zones

Create an availability zones
*/
func (a *Client) PostAvailabilityZones(params *PostAvailabilityZonesParams, authInfo runtime.ClientAuthInfoWriter) (*PostAvailabilityZonesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAvailabilityZonesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAvailabilityZones",
		Method:             "POST",
		PathPattern:        "/availability_zones",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAvailabilityZonesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAvailabilityZonesOK), nil

}

/*
PostAvailabilityZonesList gets availability zones

Get availability zones
*/
func (a *Client) PostAvailabilityZonesList(params *PostAvailabilityZonesListParams, authInfo runtime.ClientAuthInfoWriter) (*PostAvailabilityZonesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAvailabilityZonesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAvailabilityZonesList",
		Method:             "POST",
		PathPattern:        "/availability_zones/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAvailabilityZonesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAvailabilityZonesListOK), nil

}

/*
PutAvailabilityZonesUUID modifies availability zone

Modify availability zone
*/
func (a *Client) PutAvailabilityZonesUUID(params *PutAvailabilityZonesUUIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutAvailabilityZonesUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAvailabilityZonesUUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutAvailabilityZonesUUID",
		Method:             "PUT",
		PathPattern:        "/availability_zones/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAvailabilityZonesUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutAvailabilityZonesUUIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
