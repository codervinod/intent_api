package vm_snapshot

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new vm snapshot API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for vm snapshot API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteVMSnapshotsUUID deletes kind snapshot

Delete a kind snapshot given its uuid
*/
func (a *Client) DeleteVMSnapshotsUUID(params *DeleteVMSnapshotsUUIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteVMSnapshotsUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVMSnapshotsUUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteVMSnapshotsUUID",
		Method:             "DELETE",
		PathPattern:        "/vm_snapshots/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteVMSnapshotsUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteVMSnapshotsUUIDOK), nil

}

/*
GetVMSnapshotsUUID gets kind snapshot

Given a UUID, returns a kind snapshot definition
*/
func (a *Client) GetVMSnapshotsUUID(params *GetVMSnapshotsUUIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetVMSnapshotsUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVMSnapshotsUUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVMSnapshotsUUID",
		Method:             "GET",
		PathPattern:        "/vm_snapshots/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVMSnapshotsUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVMSnapshotsUUIDOK), nil

}

/*
PostVMSnapshots creates kind snapshot

Given an intentful spec, creates a snapshot with associated metadata

*/
func (a *Client) PostVMSnapshots(params *PostVMSnapshotsParams, authInfo runtime.ClientAuthInfoWriter) (*PostVMSnapshotsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostVMSnapshotsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostVMSnapshots",
		Method:             "POST",
		PathPattern:        "/vm_snapshots",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostVMSnapshotsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostVMSnapshotsOK), nil

}

/*
PostVMSnapshotsList gets kind snapshots

Get kind snapshots
*/
func (a *Client) PostVMSnapshotsList(params *PostVMSnapshotsListParams, authInfo runtime.ClientAuthInfoWriter) (*PostVMSnapshotsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostVMSnapshotsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostVMSnapshotsList",
		Method:             "POST",
		PathPattern:        "/vm_snapshots/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostVMSnapshotsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostVMSnapshotsListOK), nil

}

/*
PutVMSnapshotsUUID updates kind snapshot

Given an intenful spec and snapshot uuid, update kind snapshot

*/
func (a *Client) PutVMSnapshotsUUID(params *PutVMSnapshotsUUIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutVMSnapshotsUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutVMSnapshotsUUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutVMSnapshotsUUID",
		Method:             "PUT",
		PathPattern:        "/vm_snapshots/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutVMSnapshotsUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutVMSnapshotsUUIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
