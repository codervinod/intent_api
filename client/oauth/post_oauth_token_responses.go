package oauth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/codervinod/intent_api/models"
)

// PostOauthTokenReader is a Reader for the PostOauthToken structure.
type PostOauthTokenReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostOauthTokenReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPostOauthTokenOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPostOauthTokenBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewPostOauthTokenUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewPostOauthTokenDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	}
}

// NewPostOauthTokenOK creates a PostOauthTokenOK with default headers values
func NewPostOauthTokenOK() *PostOauthTokenOK {
	return &PostOauthTokenOK{}
}

/*PostOauthTokenOK handles this case with default header values.

A new token
*/
type PostOauthTokenOK struct {
	Payload *models.OauthToken
}

func (o *PostOauthTokenOK) Error() string {
	return fmt.Sprintf("[POST /oauth/token][%d] postOauthTokenOK  %+v", 200, o.Payload)
}

func (o *PostOauthTokenOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OauthToken)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostOauthTokenBadRequest creates a PostOauthTokenBadRequest with default headers values
func NewPostOauthTokenBadRequest() *PostOauthTokenBadRequest {
	return &PostOauthTokenBadRequest{}
}

/*PostOauthTokenBadRequest handles this case with default header values.

Missing or wrong grant_type
*/
type PostOauthTokenBadRequest struct {
	Payload *models.OauthStatus
}

func (o *PostOauthTokenBadRequest) Error() string {
	return fmt.Sprintf("[POST /oauth/token][%d] postOauthTokenBadRequest  %+v", 400, o.Payload)
}

func (o *PostOauthTokenBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OauthStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostOauthTokenUnauthorized creates a PostOauthTokenUnauthorized with default headers values
func NewPostOauthTokenUnauthorized() *PostOauthTokenUnauthorized {
	return &PostOauthTokenUnauthorized{}
}

/*PostOauthTokenUnauthorized handles this case with default header values.

Missing or invalid authentication
*/
type PostOauthTokenUnauthorized struct {
	Payload *models.OauthStatus
}

func (o *PostOauthTokenUnauthorized) Error() string {
	return fmt.Sprintf("[POST /oauth/token][%d] postOauthTokenUnauthorized  %+v", 401, o.Payload)
}

func (o *PostOauthTokenUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OauthStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostOauthTokenDefault creates a PostOauthTokenDefault with default headers values
func NewPostOauthTokenDefault(code int) *PostOauthTokenDefault {
	return &PostOauthTokenDefault{
		_statusCode: code,
	}
}

/*PostOauthTokenDefault handles this case with default header values.

Error
*/
type PostOauthTokenDefault struct {
	_statusCode int

	Payload *models.OauthStatus
}

// Code gets the status code for the post oauth token default response
func (o *PostOauthTokenDefault) Code() int {
	return o._statusCode
}

func (o *PostOauthTokenDefault) Error() string {
	return fmt.Sprintf("[POST /oauth/token][%d] PostOauthToken default  %+v", o._statusCode, o.Payload)
}

func (o *PostOauthTokenDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OauthStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
