package oauth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPostOauthAuthorizeParams creates a new PostOauthAuthorizeParams object
// with the default values initialized.
func NewPostOauthAuthorizeParams() *PostOauthAuthorizeParams {
	var ()
	return &PostOauthAuthorizeParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostOauthAuthorizeParamsWithTimeout creates a new PostOauthAuthorizeParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostOauthAuthorizeParamsWithTimeout(timeout time.Duration) *PostOauthAuthorizeParams {
	var ()
	return &PostOauthAuthorizeParams{

		timeout: timeout,
	}
}

// NewPostOauthAuthorizeParamsWithContext creates a new PostOauthAuthorizeParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostOauthAuthorizeParamsWithContext(ctx context.Context) *PostOauthAuthorizeParams {
	var ()
	return &PostOauthAuthorizeParams{

		Context: ctx,
	}
}

/*PostOauthAuthorizeParams contains all the parameters to send to the API endpoint
for the post oauth authorize operation typically these are written to a http.Request
*/
type PostOauthAuthorizeParams struct {

	/*ClientID
	  Your client ID

	*/
	ClientID string
	/*Confirm
	  Must be 'yes' or 'no'

	*/
	Confirm string
	/*RedirectURI
	  This URL is used to provide user authorization if the user accepted
	access to the application or not


	*/
	RedirectURI *string
	/*ResponseType
	  Must be 'code'

	*/
	ResponseType string
	/*Scope
	  Whitespace-separated list of scopes you application needs

	*/
	Scope *string
	/*State
	  state parameter to prevent cross site origin attacks

	*/
	State *string

	timeout time.Duration
	Context context.Context
}

// WithTimeout adds the timeout to the post oauth authorize params
func (o *PostOauthAuthorizeParams) WithTimeout(timeout time.Duration) *PostOauthAuthorizeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post oauth authorize params
func (o *PostOauthAuthorizeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post oauth authorize params
func (o *PostOauthAuthorizeParams) WithContext(ctx context.Context) *PostOauthAuthorizeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post oauth authorize params
func (o *PostOauthAuthorizeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithClientID adds the clientID to the post oauth authorize params
func (o *PostOauthAuthorizeParams) WithClientID(clientID string) *PostOauthAuthorizeParams {
	o.SetClientID(clientID)
	return o
}

// SetClientID adds the clientId to the post oauth authorize params
func (o *PostOauthAuthorizeParams) SetClientID(clientID string) {
	o.ClientID = clientID
}

// WithConfirm adds the confirm to the post oauth authorize params
func (o *PostOauthAuthorizeParams) WithConfirm(confirm string) *PostOauthAuthorizeParams {
	o.SetConfirm(confirm)
	return o
}

// SetConfirm adds the confirm to the post oauth authorize params
func (o *PostOauthAuthorizeParams) SetConfirm(confirm string) {
	o.Confirm = confirm
}

// WithRedirectURI adds the redirectURI to the post oauth authorize params
func (o *PostOauthAuthorizeParams) WithRedirectURI(redirectURI *string) *PostOauthAuthorizeParams {
	o.SetRedirectURI(redirectURI)
	return o
}

// SetRedirectURI adds the redirectUri to the post oauth authorize params
func (o *PostOauthAuthorizeParams) SetRedirectURI(redirectURI *string) {
	o.RedirectURI = redirectURI
}

// WithResponseType adds the responseType to the post oauth authorize params
func (o *PostOauthAuthorizeParams) WithResponseType(responseType string) *PostOauthAuthorizeParams {
	o.SetResponseType(responseType)
	return o
}

// SetResponseType adds the responseType to the post oauth authorize params
func (o *PostOauthAuthorizeParams) SetResponseType(responseType string) {
	o.ResponseType = responseType
}

// WithScope adds the scope to the post oauth authorize params
func (o *PostOauthAuthorizeParams) WithScope(scope *string) *PostOauthAuthorizeParams {
	o.SetScope(scope)
	return o
}

// SetScope adds the scope to the post oauth authorize params
func (o *PostOauthAuthorizeParams) SetScope(scope *string) {
	o.Scope = scope
}

// WithState adds the state to the post oauth authorize params
func (o *PostOauthAuthorizeParams) WithState(state *string) *PostOauthAuthorizeParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the post oauth authorize params
func (o *PostOauthAuthorizeParams) SetState(state *string) {
	o.State = state
}

// WriteToRequest writes these params to a swagger request
func (o *PostOauthAuthorizeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	// form param client_id
	frClientID := o.ClientID
	fClientID := frClientID
	if fClientID != "" {
		if err := r.SetFormParam("client_id", fClientID); err != nil {
			return err
		}
	}

	// form param confirm
	frConfirm := o.Confirm
	fConfirm := frConfirm
	if fConfirm != "" {
		if err := r.SetFormParam("confirm", fConfirm); err != nil {
			return err
		}
	}

	if o.RedirectURI != nil {

		// form param redirect_uri
		var frRedirectURI string
		if o.RedirectURI != nil {
			frRedirectURI = *o.RedirectURI
		}
		fRedirectURI := frRedirectURI
		if fRedirectURI != "" {
			if err := r.SetFormParam("redirect_uri", fRedirectURI); err != nil {
				return err
			}
		}

	}

	// form param response_type
	frResponseType := o.ResponseType
	fResponseType := frResponseType
	if fResponseType != "" {
		if err := r.SetFormParam("response_type", fResponseType); err != nil {
			return err
		}
	}

	if o.Scope != nil {

		// form param scope
		var frScope string
		if o.Scope != nil {
			frScope = *o.Scope
		}
		fScope := frScope
		if fScope != "" {
			if err := r.SetFormParam("scope", fScope); err != nil {
				return err
			}
		}

	}

	if o.State != nil {

		// form param state
		var frState string
		if o.State != nil {
			frState = *o.State
		}
		fState := frState
		if fState != "" {
			if err := r.SetFormParam("state", fState); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
