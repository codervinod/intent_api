package policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new policy API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for policy API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeletePolicyUUID deletes policy

Delete a policy
*/
func (a *Client) DeletePolicyUUID(params *DeletePolicyUUIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeletePolicyUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePolicyUUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeletePolicyUUID",
		Method:             "DELETE",
		PathPattern:        "/policy/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeletePolicyUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeletePolicyUUIDOK), nil

}

/*
GetPolicyUUID gets details for a policy

Get details for a policy
*/
func (a *Client) GetPolicyUUID(params *GetPolicyUUIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetPolicyUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPolicyUUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPolicyUUID",
		Method:             "GET",
		PathPattern:        "/policy/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPolicyUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPolicyUUIDOK), nil

}

/*
PostPolicy creates policy

Create a policy
*/
func (a *Client) PostPolicy(params *PostPolicyParams, authInfo runtime.ClientAuthInfoWriter) (*PostPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPolicyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPolicy",
		Method:             "POST",
		PathPattern:        "/policy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPolicyOK), nil

}

/*
PostPolicyList gets policies

Get all policies
*/
func (a *Client) PostPolicyList(params *PostPolicyListParams, authInfo runtime.ClientAuthInfoWriter) (*PostPolicyListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPolicyListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPolicyList",
		Method:             "POST",
		PathPattern:        "/policy/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPolicyListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPolicyListOK), nil

}

/*
PutPolicyUUID modifies policy

Modify policy
*/
func (a *Client) PutPolicyUUID(params *PutPolicyUUIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutPolicyUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutPolicyUUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutPolicyUUID",
		Method:             "PUT",
		PathPattern:        "/policy/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutPolicyUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutPolicyUUIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
